# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/dialogflow/v2/conversation_pb"
require "google/cloud/location"

module Google
  module Cloud
    module Dialogflow
      module V2
        module Conversations
          ##
          # Client for the Conversations service.
          #
          # Service for managing {::Google::Cloud::Dialogflow::V2::Conversation Conversations}.
          #
          class Client
            include Paths

            # @private
            attr_reader :conversations_stub

            ##
            # Configure the Conversations Client class.
            #
            # See {::Google::Cloud::Dialogflow::V2::Conversations::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all Conversations clients
            #   ::Google::Cloud::Dialogflow::V2::Conversations::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Dialogflow", "V2"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0
                default_config.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the Conversations Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Dialogflow::V2::Conversations::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new Conversations client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Dialogflow::V2::Conversations::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Dialogflow::V2::Conversations::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Conversations client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/dialogflow/v2/conversation_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @location_client = Google::Cloud::Location::Locations::Client.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @config.endpoint
              end

              @conversations_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Dialogflow::V2::Conversations::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            ##
            # Get the associated client for mix-in of the Locations.
            #
            # @return [Google::Cloud::Location::Locations::Client]
            #
            attr_reader :location_client

            # Service calls

            ##
            # Creates a new conversation. Conversations are auto-completed after 24
            # hours.
            #
            # Conversation Lifecycle:
            # There are two stages during a conversation: Automated Agent Stage and
            # Assist Stage.
            #
            # For Automated Agent Stage, there will be a dialogflow agent responding to
            # user queries.
            #
            # For Assist Stage, there's no dialogflow agent responding to user queries.
            # But we will provide suggestions which are generated from conversation.
            #
            # If {::Google::Cloud::Dialogflow::V2::Conversation#conversation_profile Conversation.conversation_profile} is configured for a dialogflow
            # agent, conversation will start from `Automated Agent Stage`, otherwise, it
            # will start from `Assist Stage`. And during `Automated Agent Stage`, once an
            # {::Google::Cloud::Dialogflow::V2::Intent Intent} with {::Google::Cloud::Dialogflow::V2::Intent#live_agent_handoff Intent.live_agent_handoff} is triggered, conversation
            # will transfer to Assist Stage.
            #
            # @overload create_conversation(request, options = nil)
            #   Pass arguments to `create_conversation` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2::CreateConversationRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2::CreateConversationRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_conversation(parent: nil, conversation: nil, conversation_id: nil)
            #   Pass arguments to `create_conversation` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. Resource identifier of the project creating the conversation.
            #     Format: `projects/<Project ID>/locations/<Location ID>`.
            #   @param conversation [::Google::Cloud::Dialogflow::V2::Conversation, ::Hash]
            #     Required. The conversation to create.
            #   @param conversation_id [::String]
            #     Optional. Identifier of the conversation. Generally it's auto generated by Google.
            #     Only set it if you cannot wait for the response to return a
            #     auto-generated one to you.
            #
            #     The conversation ID must be compliant with the regression fomula
            #     "[a-zA-Z][a-zA-Z0-9_-]*" with the characters length in range of [3,64].
            #     If the field is provided, the caller is resposible for
            #     1. the uniqueness of the ID, otherwise the request will be rejected.
            #     2. the consistency for whether to use custom ID or not under a project to
            #     better ensure uniqueness.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2::Conversation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2::Conversation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2::Conversations::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2::CreateConversationRequest.new
            #
            #   # Call the create_conversation method.
            #   result = client.create_conversation request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2::Conversation.
            #   p result
            #
            def create_conversation request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2::CreateConversationRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_conversation.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_conversation.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_conversation.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @conversations_stub.call_rpc :create_conversation, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns the list of all conversations in the specified project.
            #
            # @overload list_conversations(request, options = nil)
            #   Pass arguments to `list_conversations` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2::ListConversationsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2::ListConversationsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_conversations(parent: nil, page_size: nil, page_token: nil, filter: nil)
            #   Pass arguments to `list_conversations` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The project from which to list all conversation.
            #     Format: `projects/<Project ID>/locations/<Location ID>`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of items to return in a single page. By
            #     default 100 and at most 1000.
            #   @param page_token [::String]
            #     Optional. The next_page_token value returned from a previous list request.
            #   @param filter [::String]
            #     A filter expression that filters conversations listed in the response. In
            #     general, the expression must specify the field name, a comparison operator,
            #     and the value to use for filtering:
            #     <ul>
            #       <li>The value must be a string, a number, or a boolean.</li>
            #       <li>The comparison operator must be either `=`,`!=`, `>`, or `<`.</li>
            #       <li>To filter on multiple expressions, separate the
            #           expressions with `AND` or `OR` (omitting both implies `AND`).</li>
            #       <li>For clarity, expressions can be enclosed in parentheses.</li>
            #     </ul>
            #     Only `lifecycle_state` can be filtered on in this way. For example,
            #     the following expression only returns `COMPLETED` conversations:
            #
            #     `lifecycle_state = "COMPLETED"`
            #
            #     For more information about filtering, see
            #     [API Filtering](https://aip.dev/160).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2::Conversation>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2::Conversation>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2::Conversations::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2::ListConversationsRequest.new
            #
            #   # Call the list_conversations method.
            #   result = client.list_conversations request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Dialogflow::V2::Conversation.
            #     p response
            #   end
            #
            def list_conversations request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2::ListConversationsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_conversations.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_conversations.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_conversations.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @conversations_stub.call_rpc :list_conversations, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @conversations_stub, :list_conversations, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves the specific conversation.
            #
            # @overload get_conversation(request, options = nil)
            #   Pass arguments to `get_conversation` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2::GetConversationRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2::GetConversationRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_conversation(name: nil)
            #   Pass arguments to `get_conversation` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the conversation. Format:
            #     `projects/<Project ID>/locations/<Location ID>/conversations/<Conversation
            #     ID>`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2::Conversation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2::Conversation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2::Conversations::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2::GetConversationRequest.new
            #
            #   # Call the get_conversation method.
            #   result = client.get_conversation request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2::Conversation.
            #   p result
            #
            def get_conversation request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2::GetConversationRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_conversation.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_conversation.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_conversation.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @conversations_stub.call_rpc :get_conversation, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Completes the specified conversation. Finished conversations are purged
            # from the database after 30 days.
            #
            # @overload complete_conversation(request, options = nil)
            #   Pass arguments to `complete_conversation` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2::CompleteConversationRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2::CompleteConversationRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload complete_conversation(name: nil)
            #   Pass arguments to `complete_conversation` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. Resource identifier of the conversation to close.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dialogflow::V2::Conversation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dialogflow::V2::Conversation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2::Conversations::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2::CompleteConversationRequest.new
            #
            #   # Call the complete_conversation method.
            #   result = client.complete_conversation request
            #
            #   # The returned object is of type Google::Cloud::Dialogflow::V2::Conversation.
            #   p result
            #
            def complete_conversation request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2::CompleteConversationRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.complete_conversation.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.complete_conversation.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.complete_conversation.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @conversations_stub.call_rpc :complete_conversation, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists messages that belong to a given conversation.
            # `messages` are ordered by `create_time` in descending order. To fetch
            # updates without duplication, send request with filter
            # `create_time_epoch_microseconds >
            # [first item's create_time of previous request]` and empty page_token.
            #
            # @overload list_messages(request, options = nil)
            #   Pass arguments to `list_messages` via a request object, either of type
            #   {::Google::Cloud::Dialogflow::V2::ListMessagesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dialogflow::V2::ListMessagesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_messages(parent: nil, filter: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_messages` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the conversation to list messages for.
            #     Format: `projects/<Project ID>/locations/<Location
            #     ID>/conversations/<Conversation ID>`
            #   @param filter [::String]
            #     Optional. Filter on message fields. Currently predicates on `create_time`
            #     and `create_time_epoch_microseconds` are supported. `create_time` only
            #     support milliseconds accuracy. E.g.,
            #     `create_time_epoch_microseconds > 1551790877964485` or
            #     `create_time > 2017-01-15T01:30:15.01Z`.
            #
            #     For more information about filtering, see
            #     [API Filtering](https://aip.dev/160).
            #   @param page_size [::Integer]
            #     Optional. The maximum number of items to return in a single page. By
            #     default 100 and at most 1000.
            #   @param page_token [::String]
            #     Optional. The next_page_token value returned from a previous list request.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2::Message>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Dialogflow::V2::Message>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/dialogflow/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Dialogflow::V2::Conversations::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Dialogflow::V2::ListMessagesRequest.new
            #
            #   # Call the list_messages method.
            #   result = client.list_messages request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Dialogflow::V2::Message.
            #     p response
            #   end
            #
            def list_messages request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dialogflow::V2::ListMessagesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_messages.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dialogflow::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_messages.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_messages.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @conversations_stub.call_rpc :list_messages, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @conversations_stub, :list_messages, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the Conversations API.
            #
            # This class represents the configuration for Conversations,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Dialogflow::V2::Conversations::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_conversation to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Dialogflow::V2::Conversations::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_conversation.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Dialogflow::V2::Conversations::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_conversation.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"dialogflow.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "dialogflow.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the Conversations API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_conversation`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_conversation
                ##
                # RPC-specific configuration for `list_conversations`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_conversations
                ##
                # RPC-specific configuration for `get_conversation`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_conversation
                ##
                # RPC-specific configuration for `complete_conversation`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :complete_conversation
                ##
                # RPC-specific configuration for `list_messages`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_messages

                # @private
                def initialize parent_rpcs = nil
                  create_conversation_config = parent_rpcs.create_conversation if parent_rpcs.respond_to? :create_conversation
                  @create_conversation = ::Gapic::Config::Method.new create_conversation_config
                  list_conversations_config = parent_rpcs.list_conversations if parent_rpcs.respond_to? :list_conversations
                  @list_conversations = ::Gapic::Config::Method.new list_conversations_config
                  get_conversation_config = parent_rpcs.get_conversation if parent_rpcs.respond_to? :get_conversation
                  @get_conversation = ::Gapic::Config::Method.new get_conversation_config
                  complete_conversation_config = parent_rpcs.complete_conversation if parent_rpcs.respond_to? :complete_conversation
                  @complete_conversation = ::Gapic::Config::Method.new complete_conversation_config
                  list_messages_config = parent_rpcs.list_messages if parent_rpcs.respond_to? :list_messages
                  @list_messages = ::Gapic::Config::Method.new list_messages_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
