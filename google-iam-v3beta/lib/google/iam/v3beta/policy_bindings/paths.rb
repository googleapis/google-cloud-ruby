# frozen_string_literal: true

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Iam
    module V3beta
      module PolicyBindings
        # Path helper methods for the PolicyBindings API.
        module Paths
          ##
          # Create a fully-qualified FolderLocation resource string.
          #
          # The resource will be in the following format:
          #
          # `folders/{folder}/locations/{location}`
          #
          # @param folder [String]
          # @param location [String]
          #
          # @return [::String]
          def folder_location_path folder:, location:
            raise ::ArgumentError, "folder cannot contain /" if folder.to_s.include? "/"

            "folders/#{folder}/locations/#{location}"
          end

          ##
          # Create a fully-qualified Location resource string.
          #
          # The resource will be in the following format:
          #
          # `projects/{project}/locations/{location}`
          #
          # @param project [String]
          # @param location [String]
          #
          # @return [::String]
          def location_path project:, location:
            raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

            "projects/#{project}/locations/#{location}"
          end

          ##
          # Create a fully-qualified OrganizationLocation resource string.
          #
          # The resource will be in the following format:
          #
          # `organizations/{organization}/locations/{location}`
          #
          # @param organization [String]
          # @param location [String]
          #
          # @return [::String]
          def organization_location_path organization:, location:
            raise ::ArgumentError, "organization cannot contain /" if organization.to_s.include? "/"

            "organizations/#{organization}/locations/#{location}"
          end

          ##
          # Create a fully-qualified PolicyBinding resource string.
          #
          # @overload policy_binding_path(organization:, location:, policy_binding:)
          #   The resource will be in the following format:
          #
          #   `organizations/{organization}/locations/{location}/policyBindings/{policy_binding}`
          #
          #   @param organization [String]
          #   @param location [String]
          #   @param policy_binding [String]
          #
          # @overload policy_binding_path(folder:, location:, policy_binding:)
          #   The resource will be in the following format:
          #
          #   `folders/{folder}/locations/{location}/policyBindings/{policy_binding}`
          #
          #   @param folder [String]
          #   @param location [String]
          #   @param policy_binding [String]
          #
          # @overload policy_binding_path(project:, location:, policy_binding:)
          #   The resource will be in the following format:
          #
          #   `projects/{project}/locations/{location}/policyBindings/{policy_binding}`
          #
          #   @param project [String]
          #   @param location [String]
          #   @param policy_binding [String]
          #
          # @return [::String]
          def policy_binding_path **args
            resources = {
              "location:organization:policy_binding" => (proc do |organization:, location:, policy_binding:|
                raise ::ArgumentError, "organization cannot contain /" if organization.to_s.include? "/"
                raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

                "organizations/#{organization}/locations/#{location}/policyBindings/#{policy_binding}"
              end),
              "folder:location:policy_binding" => (proc do |folder:, location:, policy_binding:|
                raise ::ArgumentError, "folder cannot contain /" if folder.to_s.include? "/"
                raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

                "folders/#{folder}/locations/#{location}/policyBindings/#{policy_binding}"
              end),
              "location:policy_binding:project" => (proc do |project:, location:, policy_binding:|
                raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
                raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

                "projects/#{project}/locations/#{location}/policyBindings/#{policy_binding}"
              end)
            }

            resource = resources[args.keys.sort.join(":")]
            raise ::ArgumentError, "no resource found for values #{args.keys}" if resource.nil?
            resource.call(**args)
          end

          extend self
        end
      end
    end
  end
end
