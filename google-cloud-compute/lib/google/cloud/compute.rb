# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

# Require this file early so that the version constant gets defined before
# requiring "google/cloud". This is because google-cloud-core will load the
# entrypoint (gem name) file, which in turn re-requires this file (hence
# causing a require cycle) unless the version constant is already defined.
require "google/cloud/compute/version"

require "googleauth"
gem "google-cloud-core"
require "google/cloud" unless defined? ::Google::Cloud.new
require "google/cloud/config"

# Set the default configuration
::Google::Cloud.configure.add_config! :compute do |config|
  config.add_field! :endpoint,      "compute.googleapis.com", match: ::String
  config.add_field! :credentials,   nil, match: [::String, ::Hash, ::Google::Auth::Credentials]
  config.add_field! :scope,         nil, match: [::Array, ::String]
  config.add_field! :lib_name,      nil, match: ::String
  config.add_field! :lib_version,   nil, match: ::String
  config.add_field! :timeout,       nil, match: ::Numeric
  config.add_field! :metadata,      nil, match: ::Hash
  config.add_field! :retry_policy,  nil, match: [::Hash, ::Proc]
  config.add_field! :quota_project, nil, match: ::String
end

module Google
  module Cloud
    module Compute
      ##
      # Create a new client object for AcceleratorTypes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::AcceleratorTypes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-AcceleratorTypes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the AcceleratorTypes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About AcceleratorTypes
      #
      # Services
      #
      # The AcceleratorTypes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.accelerator_types version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:AcceleratorTypes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Addresses.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Addresses::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Addresses-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Addresses service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Addresses
      #
      # The Addresses API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.addresses version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Addresses)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Autoscalers.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Autoscalers::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Autoscalers-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Autoscalers service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Autoscalers
      #
      # The Autoscalers API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.autoscalers version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Autoscalers)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for BackendBuckets.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::BackendBuckets::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-BackendBuckets-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the BackendBuckets service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About BackendBuckets
      #
      # The BackendBuckets API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.backend_buckets version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:BackendBuckets)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for BackendServices.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::BackendServices::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-BackendServices-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the BackendServices service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About BackendServices
      #
      # The BackendServices API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.backend_services version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:BackendServices)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for DiskTypes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::DiskTypes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-DiskTypes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the DiskTypes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About DiskTypes
      #
      # The DiskTypes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.disk_types version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:DiskTypes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Disks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Disks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Disks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Disks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Disks
      #
      # The Disks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.disks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Disks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ExternalVpnGateways.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::ExternalVpnGateways::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-ExternalVpnGateways-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ExternalVpnGateways service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ExternalVpnGateways
      #
      # The ExternalVpnGateways API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.external_vpn_gateways version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:ExternalVpnGateways)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for FirewallPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::FirewallPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-FirewallPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the FirewallPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About FirewallPolicies
      #
      # The FirewallPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.firewall_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:FirewallPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Firewalls.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Firewalls::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Firewalls-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Firewalls service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Firewalls
      #
      # The Firewalls API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.firewalls version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Firewalls)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ForwardingRules.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::ForwardingRules::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-ForwardingRules-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ForwardingRules service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ForwardingRules
      #
      # The ForwardingRules API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.forwarding_rules version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:ForwardingRules)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for GlobalAddresses.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalAddresses::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalAddresses-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalAddresses service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About GlobalAddresses
      #
      # The GlobalAddresses API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_addresses version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalAddresses)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for GlobalForwardingRules.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalForwardingRules::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalForwardingRules-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalForwardingRules service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About GlobalForwardingRules
      #
      # The GlobalForwardingRules API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_forwarding_rules version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalForwardingRules)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for GlobalNetworkEndpointGroups.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalNetworkEndpointGroups::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalNetworkEndpointGroups-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalNetworkEndpointGroups service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About GlobalNetworkEndpointGroups
      #
      # The GlobalNetworkEndpointGroups API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_network_endpoint_groups version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalNetworkEndpointGroups)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for GlobalOperations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalOperations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalOperations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalOperations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About GlobalOperations
      #
      # The GlobalOperations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_operations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalOperations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for GlobalOrganizationOperations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalOrganizationOperations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalOrganizationOperations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalOrganizationOperations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About GlobalOrganizationOperations
      #
      # The GlobalOrganizationOperations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_organization_operations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalOrganizationOperations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for GlobalPublicDelegatedPrefixes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::GlobalPublicDelegatedPrefixes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-GlobalPublicDelegatedPrefixes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the GlobalPublicDelegatedPrefixes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About GlobalPublicDelegatedPrefixes
      #
      # The GlobalPublicDelegatedPrefixes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.global_public_delegated_prefixes version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:GlobalPublicDelegatedPrefixes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for HealthChecks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::HealthChecks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-HealthChecks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the HealthChecks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About HealthChecks
      #
      # The HealthChecks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.health_checks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:HealthChecks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ImageFamilyViews.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::ImageFamilyViews::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-ImageFamilyViews-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ImageFamilyViews service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ImageFamilyViews
      #
      # The ImageFamilyViews API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.image_family_views version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:ImageFamilyViews)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Images.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Images::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Images-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Images service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Images
      #
      # The Images API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.images version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Images)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for InstanceGroupManagers.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::InstanceGroupManagers::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-InstanceGroupManagers-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the InstanceGroupManagers service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About InstanceGroupManagers
      #
      # The InstanceGroupManagers API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.instance_group_managers version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:InstanceGroupManagers)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for InstanceGroups.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::InstanceGroups::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-InstanceGroups-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the InstanceGroups service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About InstanceGroups
      #
      # The InstanceGroups API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.instance_groups version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:InstanceGroups)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for InstanceTemplates.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::InstanceTemplates::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-InstanceTemplates-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the InstanceTemplates service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About InstanceTemplates
      #
      # The InstanceTemplates API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.instance_templates version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:InstanceTemplates)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Instances.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Instances::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Instances-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Instances service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Instances
      #
      # The Instances API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.instances version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Instances)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for InterconnectAttachments.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::InterconnectAttachments::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-InterconnectAttachments-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the InterconnectAttachments service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About InterconnectAttachments
      #
      # The InterconnectAttachments API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.interconnect_attachments version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:InterconnectAttachments)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for InterconnectLocations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::InterconnectLocations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-InterconnectLocations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the InterconnectLocations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About InterconnectLocations
      #
      # The InterconnectLocations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.interconnect_locations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:InterconnectLocations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Interconnects.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Interconnects::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Interconnects-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Interconnects service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Interconnects
      #
      # The Interconnects API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.interconnects version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Interconnects)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for LicenseCodes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::LicenseCodes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-LicenseCodes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the LicenseCodes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About LicenseCodes
      #
      # The LicenseCodes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.license_codes version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:LicenseCodes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Licenses.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Licenses::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Licenses-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Licenses service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Licenses
      #
      # The Licenses API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.licenses version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Licenses)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for MachineImages.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::MachineImages::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-MachineImages-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the MachineImages service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About MachineImages
      #
      # The MachineImages API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.machine_images version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:MachineImages)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for MachineTypes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::MachineTypes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-MachineTypes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the MachineTypes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About MachineTypes
      #
      # The MachineTypes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.machine_types version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:MachineTypes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NetworkAttachments.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NetworkAttachments::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NetworkAttachments-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NetworkAttachments service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NetworkAttachments
      #
      # The NetworkAttachments API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.network_attachments version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NetworkAttachments)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NetworkEdgeSecurityServices.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NetworkEdgeSecurityServices::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NetworkEdgeSecurityServices-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NetworkEdgeSecurityServices service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NetworkEdgeSecurityServices
      #
      # The NetworkEdgeSecurityServices API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.network_edge_security_services version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NetworkEdgeSecurityServices)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NetworkEndpointGroups.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NetworkEndpointGroups::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NetworkEndpointGroups-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NetworkEndpointGroups service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NetworkEndpointGroups
      #
      # The NetworkEndpointGroups API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.network_endpoint_groups version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NetworkEndpointGroups)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NetworkFirewallPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NetworkFirewallPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NetworkFirewallPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NetworkFirewallPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NetworkFirewallPolicies
      #
      # The NetworkFirewallPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.network_firewall_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NetworkFirewallPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Networks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Networks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Networks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Networks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Networks
      #
      # The Networks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.networks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Networks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NodeGroups.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NodeGroups::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NodeGroups-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NodeGroups service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NodeGroups
      #
      # The NodeGroups API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.node_groups version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NodeGroups)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NodeTemplates.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NodeTemplates::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NodeTemplates-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NodeTemplates service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NodeTemplates
      #
      # The NodeTemplates API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.node_templates version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NodeTemplates)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NodeTypes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::NodeTypes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-NodeTypes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NodeTypes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NodeTypes
      #
      # The NodeTypes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.node_types version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:NodeTypes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for PacketMirrorings.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::PacketMirrorings::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-PacketMirrorings-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the PacketMirrorings service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About PacketMirrorings
      #
      # The PacketMirrorings API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.packet_mirrorings version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:PacketMirrorings)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Projects.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Projects::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Projects-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Projects service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Projects
      #
      # The Projects API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.projects version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Projects)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for PublicAdvertisedPrefixes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::PublicAdvertisedPrefixes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-PublicAdvertisedPrefixes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the PublicAdvertisedPrefixes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About PublicAdvertisedPrefixes
      #
      # The PublicAdvertisedPrefixes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.public_advertised_prefixes version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:PublicAdvertisedPrefixes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for PublicDelegatedPrefixes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::PublicDelegatedPrefixes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-PublicDelegatedPrefixes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the PublicDelegatedPrefixes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About PublicDelegatedPrefixes
      #
      # The PublicDelegatedPrefixes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.public_delegated_prefixes version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:PublicDelegatedPrefixes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionAutoscalers.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionAutoscalers::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionAutoscalers-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionAutoscalers service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionAutoscalers
      #
      # The RegionAutoscalers API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_autoscalers version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionAutoscalers)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionBackendServices.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionBackendServices::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionBackendServices-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionBackendServices service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionBackendServices
      #
      # The RegionBackendServices API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_backend_services version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionBackendServices)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionCommitments.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionCommitments::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionCommitments-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionCommitments service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionCommitments
      #
      # The RegionCommitments API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_commitments version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionCommitments)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionDiskTypes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionDiskTypes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionDiskTypes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionDiskTypes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionDiskTypes
      #
      # The RegionDiskTypes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_disk_types version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionDiskTypes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionDisks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionDisks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionDisks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionDisks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionDisks
      #
      # The RegionDisks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_disks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionDisks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionHealthCheckServices.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionHealthCheckServices::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionHealthCheckServices-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionHealthCheckServices service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionHealthCheckServices
      #
      # The RegionHealthCheckServices API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_health_check_services version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionHealthCheckServices)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionHealthChecks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionHealthChecks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionHealthChecks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionHealthChecks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionHealthChecks
      #
      # The RegionHealthChecks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_health_checks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionHealthChecks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionInstanceGroupManagers.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionInstanceGroupManagers::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionInstanceGroupManagers-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionInstanceGroupManagers service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionInstanceGroupManagers
      #
      # The RegionInstanceGroupManagers API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_instance_group_managers version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionInstanceGroupManagers)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionInstanceGroups.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionInstanceGroups::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionInstanceGroups-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionInstanceGroups service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionInstanceGroups
      #
      # The RegionInstanceGroups API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_instance_groups version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionInstanceGroups)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionInstanceTemplates.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionInstanceTemplates::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionInstanceTemplates-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionInstanceTemplates service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionInstanceTemplates
      #
      # The RegionInstanceTemplates API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_instance_templates version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionInstanceTemplates)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionInstances.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionInstances::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionInstances-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionInstances service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionInstances
      #
      # The RegionInstances API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_instances version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionInstances)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionNetworkEndpointGroups.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionNetworkEndpointGroups::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionNetworkEndpointGroups-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionNetworkEndpointGroups service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionNetworkEndpointGroups
      #
      # The RegionNetworkEndpointGroups API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_network_endpoint_groups version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionNetworkEndpointGroups)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionNetworkFirewallPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionNetworkFirewallPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionNetworkFirewallPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionNetworkFirewallPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionNetworkFirewallPolicies
      #
      # The RegionNetworkFirewallPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_network_firewall_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionNetworkFirewallPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionNotificationEndpoints.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionNotificationEndpoints::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionNotificationEndpoints-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionNotificationEndpoints service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionNotificationEndpoints
      #
      # The RegionNotificationEndpoints API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_notification_endpoints version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionNotificationEndpoints)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionOperations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionOperations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionOperations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionOperations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionOperations
      #
      # The RegionOperations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_operations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionOperations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionSecurityPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionSecurityPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionSecurityPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionSecurityPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionSecurityPolicies
      #
      # The RegionSecurityPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_security_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionSecurityPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionSslCertificates.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionSslCertificates::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionSslCertificates-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionSslCertificates service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionSslCertificates
      #
      # The RegionSslCertificates API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_ssl_certificates version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionSslCertificates)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionSslPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionSslPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionSslPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionSslPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionSslPolicies
      #
      # The RegionSslPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_ssl_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionSslPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionTargetHttpProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionTargetHttpProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionTargetHttpProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionTargetHttpProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionTargetHttpProxies
      #
      # The RegionTargetHttpProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_target_http_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionTargetHttpProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionTargetHttpsProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionTargetHttpsProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionTargetHttpsProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionTargetHttpsProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionTargetHttpsProxies
      #
      # The RegionTargetHttpsProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_target_https_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionTargetHttpsProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionTargetTcpProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionTargetTcpProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionTargetTcpProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionTargetTcpProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionTargetTcpProxies
      #
      # The RegionTargetTcpProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_target_tcp_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionTargetTcpProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RegionUrlMaps.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::RegionUrlMaps::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-RegionUrlMaps-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RegionUrlMaps service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RegionUrlMaps
      #
      # The RegionUrlMaps API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.region_url_maps version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:RegionUrlMaps)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Regions.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Regions::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Regions-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Regions service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Regions
      #
      # The Regions API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.regions version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Regions)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Reservations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Reservations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Reservations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Reservations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Reservations
      #
      # The Reservations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.reservations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Reservations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ResourcePolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::ResourcePolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-ResourcePolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ResourcePolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ResourcePolicies
      #
      # The ResourcePolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.resource_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:ResourcePolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Routers.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Routers::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Routers-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Routers service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Routers
      #
      # The Routers API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.routers version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Routers)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Routes.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Routes::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Routes-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Routes service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Routes
      #
      # The Routes API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.routes version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Routes)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for SecurityPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::SecurityPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-SecurityPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the SecurityPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About SecurityPolicies
      #
      # The SecurityPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.security_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:SecurityPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ServiceAttachments.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::ServiceAttachments::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-ServiceAttachments-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ServiceAttachments service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ServiceAttachments
      #
      # The ServiceAttachments API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.service_attachments version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:ServiceAttachments)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Snapshots.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Snapshots::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Snapshots-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Snapshots service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Snapshots
      #
      # The Snapshots API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.snapshots version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Snapshots)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for SslCertificates.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::SslCertificates::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-SslCertificates-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the SslCertificates service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About SslCertificates
      #
      # The SslCertificates API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.ssl_certificates version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:SslCertificates)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for SslPolicies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::SslPolicies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-SslPolicies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the SslPolicies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About SslPolicies
      #
      # The SslPolicies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.ssl_policies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:SslPolicies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Subnetworks.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Subnetworks::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Subnetworks-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Subnetworks service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Subnetworks
      #
      # The Subnetworks API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.subnetworks version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Subnetworks)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetGrpcProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetGrpcProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetGrpcProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetGrpcProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetGrpcProxies
      #
      # The TargetGrpcProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_grpc_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetGrpcProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetHttpProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetHttpProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetHttpProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetHttpProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetHttpProxies
      #
      # The TargetHttpProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_http_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetHttpProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetHttpsProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetHttpsProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetHttpsProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetHttpsProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetHttpsProxies
      #
      # The TargetHttpsProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_https_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetHttpsProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetInstances.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetInstances::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetInstances-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetInstances service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetInstances
      #
      # The TargetInstances API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_instances version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetInstances)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetPools.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetPools::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetPools-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetPools service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetPools
      #
      # The TargetPools API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_pools version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetPools)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetSslProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetSslProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetSslProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetSslProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetSslProxies
      #
      # The TargetSslProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_ssl_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetSslProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetTcpProxies.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetTcpProxies::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetTcpProxies-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetTcpProxies service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetTcpProxies
      #
      # The TargetTcpProxies API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_tcp_proxies version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetTcpProxies)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TargetVpnGateways.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::TargetVpnGateways::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-TargetVpnGateways-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TargetVpnGateways service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TargetVpnGateways
      #
      # The TargetVpnGateways API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.target_vpn_gateways version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:TargetVpnGateways)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for UrlMaps.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::UrlMaps::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-UrlMaps-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the UrlMaps service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About UrlMaps
      #
      # The UrlMaps API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.url_maps version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:UrlMaps)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for VpnGateways.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::VpnGateways::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-VpnGateways-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the VpnGateways service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About VpnGateways
      #
      # The VpnGateways API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.vpn_gateways version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:VpnGateways)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for VpnTunnels.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::VpnTunnels::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-VpnTunnels-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the VpnTunnels service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About VpnTunnels
      #
      # The VpnTunnels API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.vpn_tunnels version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:VpnTunnels)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ZoneOperations.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::ZoneOperations::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-ZoneOperations-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ZoneOperations service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ZoneOperations
      #
      # The ZoneOperations API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.zone_operations version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:ZoneOperations)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for Zones.
      #
      # By default, this returns an instance of
      # [Google::Cloud::Compute::V1::Zones::Rest::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-compute-v1/latest/Google-Cloud-Compute-V1-Zones-Rest-Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the Zones service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About Zones
      #
      # The Zones API.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.zones version: :v1, &block
        require "google/cloud/compute/#{version.to_s.downcase}"

        package_name = Google::Cloud::Compute
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Cloud::Compute.const_get(package_name).const_get(:Zones)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Configure the google-cloud-compute library.
      #
      # The following configuration parameters are supported:
      #
      # * `credentials` (*type:* `String, Hash, Google::Auth::Credentials`) -
      #   The path to the keyfile as a String, the contents of the keyfile as a
      #   Hash, or a Google::Auth::Credentials object.
      # * `lib_name` (*type:* `String`) -
      #   The library name as recorded in instrumentation and logging.
      # * `lib_version` (*type:* `String`) -
      #   The library version as recorded in instrumentation and logging.
      # * `timeout` (*type:* `Numeric`) -
      #   Default timeout in seconds.
      # * `metadata` (*type:* `Hash{Symbol=>String}`) -
      #   Additional headers to be sent with the call.
      # * `retry_policy` (*type:* `Hash`) -
      #   The retry policy. The value is a hash with the following keys:
      #     * `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
      #     * `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
      #     * `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
      #     * `:retry_codes` (*type:* `Array<String>`) -
      #       The error codes that should trigger a retry.
      #
      # @return [::Google::Cloud::Config] The default configuration used by this library
      #
      def self.configure
        yield ::Google::Cloud.configure.compute if block_given?

        ::Google::Cloud.configure.compute
      end
    end
  end
end

helper_path = ::File.join __dir__, "compute", "helpers.rb"
require "google/cloud/compute/helpers" if ::File.file? helper_path
