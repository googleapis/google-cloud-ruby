# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: google/cloud/support/v2/comment_service.proto for package 'Google.Cloud.Support.V2'
# Original file comments:
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'google/cloud/support/v2/comment_service_pb'

module Google
  module Cloud
    module Support
      module V2
        module CommentService
          # A service to manage comments on cases.
          class Service

            include ::GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'google.cloud.support.v2.CommentService'

            # List all the comments associated with a case.
            #
            # EXAMPLES:
            #
            # cURL:
            #
            # ```shell
            # case="projects/some-project/cases/43595344"
            # curl \
            #   --header "Authorization: Bearer $(gcloud auth print-access-token)" \
            #   "https://cloudsupport.googleapis.com/v2/$case/comments"
            # ```
            #
            # Python:
            #
            # ```python
            # import googleapiclient.discovery
            #
            # api_version = "v2"
            # supportApiService = googleapiclient.discovery.build(
            #     serviceName="cloudsupport",
            #     version=api_version,
            #     discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}",
            # )
            # request = (
            #     supportApiService.cases()
            #     .comments()
            #     .list(parent="projects/some-project/cases/43595344")
            # )
            # print(request.execute())
            # ```
            rpc :ListComments, ::Google::Cloud::Support::V2::ListCommentsRequest, ::Google::Cloud::Support::V2::ListCommentsResponse
            # Add a new comment to a case.
            #
            # The comment must have the following fields set: `body`.
            #
            # EXAMPLES:
            #
            # cURL:
            #
            # ```shell
            # case="projects/some-project/cases/43591344"
            # curl \
            #   --request POST \
            #   --header "Authorization: Bearer $(gcloud auth print-access-token)" \
            #   --header 'Content-Type: application/json' \
            #   --data '{
            #     "body": "This is a test comment."
            #   }' \
            #   "https://cloudsupport.googleapis.com/v2/$case/comments"
            # ```
            #
            # Python:
            #
            # ```python
            # import googleapiclient.discovery
            #
            # api_version = "v2"
            # supportApiService = googleapiclient.discovery.build(
            #     serviceName="cloudsupport",
            #     version=api_version,
            #     discoveryServiceUrl=f"https://cloudsupport.googleapis.com/$discovery/rest?version={api_version}",
            # )
            # request = (
            #     supportApiService.cases()
            #     .comments()
            #     .create(
            #         parent="projects/some-project/cases/43595344",
            #         body={"body": "This is a test comment."},
            #     )
            # )
            # print(request.execute())
            # ```
            rpc :CreateComment, ::Google::Cloud::Support::V2::CreateCommentRequest, ::Google::Cloud::Support::V2::Comment
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
