# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/devtools/clouddebugger/v2/debugger_pb"
require "google/devtools/clouddebugger/v2/debugger_services_pb"
require "google/cloud/debugger/v2/debugger"

class ::Google::Cloud::Debugger::V2::Debugger::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_set_breakpoint
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Debugger::V2::SetBreakpointResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    debuggee_id = "hello world"
    breakpoint = {}
    client_version = "hello world"

    set_breakpoint_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :set_breakpoint, name
      assert_kind_of ::Google::Cloud::Debugger::V2::SetBreakpointRequest, request
      assert_equal "hello world", request["debuggee_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Debugger::V2::Breakpoint), request["breakpoint"]
      assert_equal "hello world", request["client_version"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, set_breakpoint_client_stub do
      # Create client
      client = ::Google::Cloud::Debugger::V2::Debugger::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.set_breakpoint({ debuggee_id: debuggee_id, breakpoint: breakpoint, client_version: client_version }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.set_breakpoint debuggee_id: debuggee_id, breakpoint: breakpoint, client_version: client_version do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.set_breakpoint ::Google::Cloud::Debugger::V2::SetBreakpointRequest.new(debuggee_id: debuggee_id, breakpoint: breakpoint, client_version: client_version) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.set_breakpoint({ debuggee_id: debuggee_id, breakpoint: breakpoint, client_version: client_version }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.set_breakpoint(::Google::Cloud::Debugger::V2::SetBreakpointRequest.new(debuggee_id: debuggee_id, breakpoint: breakpoint, client_version: client_version), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, set_breakpoint_client_stub.call_rpc_count
    end
  end

  def test_get_breakpoint
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Debugger::V2::GetBreakpointResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    debuggee_id = "hello world"
    breakpoint_id = "hello world"
    client_version = "hello world"

    get_breakpoint_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_breakpoint, name
      assert_kind_of ::Google::Cloud::Debugger::V2::GetBreakpointRequest, request
      assert_equal "hello world", request["debuggee_id"]
      assert_equal "hello world", request["breakpoint_id"]
      assert_equal "hello world", request["client_version"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_breakpoint_client_stub do
      # Create client
      client = ::Google::Cloud::Debugger::V2::Debugger::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_breakpoint({ debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_breakpoint debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_breakpoint ::Google::Cloud::Debugger::V2::GetBreakpointRequest.new(debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_breakpoint({ debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_breakpoint(::Google::Cloud::Debugger::V2::GetBreakpointRequest.new(debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_breakpoint_client_stub.call_rpc_count
    end
  end

  def test_delete_breakpoint
    # Create GRPC objects.
    grpc_response = ::Google::Protobuf::Empty.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    debuggee_id = "hello world"
    breakpoint_id = "hello world"
    client_version = "hello world"

    delete_breakpoint_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_breakpoint, name
      assert_kind_of ::Google::Cloud::Debugger::V2::DeleteBreakpointRequest, request
      assert_equal "hello world", request["debuggee_id"]
      assert_equal "hello world", request["breakpoint_id"]
      assert_equal "hello world", request["client_version"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_breakpoint_client_stub do
      # Create client
      client = ::Google::Cloud::Debugger::V2::Debugger::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_breakpoint({ debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_breakpoint debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_breakpoint ::Google::Cloud::Debugger::V2::DeleteBreakpointRequest.new(debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_breakpoint({ debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_breakpoint(::Google::Cloud::Debugger::V2::DeleteBreakpointRequest.new(debuggee_id: debuggee_id, breakpoint_id: breakpoint_id, client_version: client_version), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_breakpoint_client_stub.call_rpc_count
    end
  end

  def test_list_breakpoints
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Debugger::V2::ListBreakpointsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    debuggee_id = "hello world"
    include_all_users = true
    include_inactive = true
    action = {}
    strip_results = true
    wait_token = "hello world"
    client_version = "hello world"

    list_breakpoints_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_breakpoints, name
      assert_kind_of ::Google::Cloud::Debugger::V2::ListBreakpointsRequest, request
      assert_equal "hello world", request["debuggee_id"]
      assert_equal true, request["include_all_users"]
      assert_equal true, request["include_inactive"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Debugger::V2::ListBreakpointsRequest::BreakpointActionValue), request["action"]
      assert_equal true, request["strip_results"]
      assert_equal "hello world", request["wait_token"]
      assert_equal "hello world", request["client_version"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_breakpoints_client_stub do
      # Create client
      client = ::Google::Cloud::Debugger::V2::Debugger::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_breakpoints({ debuggee_id: debuggee_id, include_all_users: include_all_users, include_inactive: include_inactive, action: action, strip_results: strip_results, wait_token: wait_token, client_version: client_version }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_breakpoints debuggee_id: debuggee_id, include_all_users: include_all_users, include_inactive: include_inactive, action: action, strip_results: strip_results, wait_token: wait_token, client_version: client_version do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_breakpoints ::Google::Cloud::Debugger::V2::ListBreakpointsRequest.new(debuggee_id: debuggee_id, include_all_users: include_all_users, include_inactive: include_inactive, action: action, strip_results: strip_results, wait_token: wait_token, client_version: client_version) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_breakpoints({ debuggee_id: debuggee_id, include_all_users: include_all_users, include_inactive: include_inactive, action: action, strip_results: strip_results, wait_token: wait_token, client_version: client_version }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_breakpoints(::Google::Cloud::Debugger::V2::ListBreakpointsRequest.new(debuggee_id: debuggee_id, include_all_users: include_all_users, include_inactive: include_inactive, action: action, strip_results: strip_results, wait_token: wait_token, client_version: client_version), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_breakpoints_client_stub.call_rpc_count
    end
  end

  def test_list_debuggees
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Debugger::V2::ListDebuggeesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    project = "hello world"
    include_inactive = true
    client_version = "hello world"

    list_debuggees_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_debuggees, name
      assert_kind_of ::Google::Cloud::Debugger::V2::ListDebuggeesRequest, request
      assert_equal "hello world", request["project"]
      assert_equal true, request["include_inactive"]
      assert_equal "hello world", request["client_version"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_debuggees_client_stub do
      # Create client
      client = ::Google::Cloud::Debugger::V2::Debugger::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_debuggees({ project: project, include_inactive: include_inactive, client_version: client_version }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_debuggees project: project, include_inactive: include_inactive, client_version: client_version do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_debuggees ::Google::Cloud::Debugger::V2::ListDebuggeesRequest.new(project: project, include_inactive: include_inactive, client_version: client_version) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_debuggees({ project: project, include_inactive: include_inactive, client_version: client_version }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_debuggees(::Google::Cloud::Debugger::V2::ListDebuggeesRequest.new(project: project, include_inactive: include_inactive, client_version: client_version), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_debuggees_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Debugger::V2::Debugger::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Debugger::V2::Debugger::Client::Configuration, config
  end
end
