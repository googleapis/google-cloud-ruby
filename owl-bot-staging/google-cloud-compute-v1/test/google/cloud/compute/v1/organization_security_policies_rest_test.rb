# frozen_string_literal: true

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"
require "gapic/rest"
require "google/cloud/compute/v1/compute_pb"
require "google/cloud/compute/v1/organization_security_policies/rest"


class ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_count, :requests

    def initialize response, &block
      @response = response
      @block = block
      @call_count = 0
      @requests = []
    end

    def make_get_request uri:, params: {}, options: {}, method_name: nil
      make_http_request :get, uri: uri, body: nil, params: params, options: options, method_name: method_name
    end

    def make_delete_request uri:, params: {}, options: {}, method_name: nil
      make_http_request :delete, uri: uri, body: nil, params: params, options: options, method_name: method_name
    end

    def make_post_request uri:, body: nil, params: {}, options: {}, method_name: nil
      make_http_request :post, uri: uri, body: body, params: params, options: options, method_name: method_name
    end

    def make_patch_request uri:, body:, params: {}, options: {}, method_name: nil
      make_http_request :patch, uri: uri, body: body, params: params, options: options, method_name: method_name
    end

    def make_put_request uri:, body:, params: {}, options: {}, method_name: nil
      make_http_request :put, uri: uri, body: body, params: params, options: options, method_name: method_name
    end

    def make_http_request *args, **kwargs
      @call_count += 1

      @requests << @block&.call(*args, **kwargs)

      @response
    end

    def endpoint
      "endpoint.example.com"
    end

    def universe_domain
      "example.com"
    end

    def stub_logger
      nil
    end

    def logger
      nil
    end
  end

  def test_add_association
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    replace_existing_association = true
    request_id = "hello world"
    security_policy = "hello world"
    security_policy_association_resource = {}

    add_association_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_add_association_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, add_association_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.add_association({ replace_existing_association: replace_existing_association, request_id: request_id, security_policy: security_policy, security_policy_association_resource: security_policy_association_resource }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.add_association replace_existing_association: replace_existing_association, request_id: request_id, security_policy: security_policy, security_policy_association_resource: security_policy_association_resource do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.add_association ::Google::Cloud::Compute::V1::AddAssociationOrganizationSecurityPolicyRequest.new(replace_existing_association: replace_existing_association, request_id: request_id, security_policy: security_policy, security_policy_association_resource: security_policy_association_resource) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.add_association({ replace_existing_association: replace_existing_association, request_id: request_id, security_policy: security_policy, security_policy_association_resource: security_policy_association_resource }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.add_association(::Google::Cloud::Compute::V1::AddAssociationOrganizationSecurityPolicyRequest.new(replace_existing_association: replace_existing_association, request_id: request_id, security_policy: security_policy, security_policy_association_resource: security_policy_association_resource), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, add_association_client_stub.call_count
      end
    end
  end

  def test_add_rule
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    security_policy = "hello world"
    security_policy_rule_resource = {}

    add_rule_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_add_rule_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, add_rule_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.add_rule({ request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.add_rule request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.add_rule ::Google::Cloud::Compute::V1::AddRuleOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.add_rule({ request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.add_rule(::Google::Cloud::Compute::V1::AddRuleOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, add_rule_client_stub.call_count
      end
    end
  end

  def test_copy_rules
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    security_policy = "hello world"
    source_security_policy = "hello world"

    copy_rules_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_copy_rules_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, copy_rules_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.copy_rules({ request_id: request_id, security_policy: security_policy, source_security_policy: source_security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.copy_rules request_id: request_id, security_policy: security_policy, source_security_policy: source_security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.copy_rules ::Google::Cloud::Compute::V1::CopyRulesOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy, source_security_policy: source_security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.copy_rules({ request_id: request_id, security_policy: security_policy, source_security_policy: source_security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.copy_rules(::Google::Cloud::Compute::V1::CopyRulesOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy, source_security_policy: source_security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, copy_rules_client_stub.call_count
      end
    end
  end

  def test_delete
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    security_policy = "hello world"

    delete_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_delete_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, delete_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.delete({ request_id: request_id, security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.delete request_id: request_id, security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.delete ::Google::Cloud::Compute::V1::DeleteOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.delete({ request_id: request_id, security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.delete(::Google::Cloud::Compute::V1::DeleteOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, delete_client_stub.call_count
      end
    end
  end

  def test_get
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::SecurityPolicy.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    security_policy = "hello world"

    get_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_get_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, get_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.get({ security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.get security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.get ::Google::Cloud::Compute::V1::GetOrganizationSecurityPolicyRequest.new(security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.get({ security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.get(::Google::Cloud::Compute::V1::GetOrganizationSecurityPolicyRequest.new(security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, get_client_stub.call_count
      end
    end
  end

  def test_get_association
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::SecurityPolicyAssociation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    security_policy = "hello world"

    get_association_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_get_association_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, get_association_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.get_association({ name: name, security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.get_association name: name, security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.get_association ::Google::Cloud::Compute::V1::GetAssociationOrganizationSecurityPolicyRequest.new(name: name, security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.get_association({ name: name, security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.get_association(::Google::Cloud::Compute::V1::GetAssociationOrganizationSecurityPolicyRequest.new(name: name, security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, get_association_client_stub.call_count
      end
    end
  end

  def test_get_rule
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::SecurityPolicyRule.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    priority = 42
    security_policy = "hello world"

    get_rule_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_get_rule_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, get_rule_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.get_rule({ priority: priority, security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.get_rule priority: priority, security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.get_rule ::Google::Cloud::Compute::V1::GetRuleOrganizationSecurityPolicyRequest.new(priority: priority, security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.get_rule({ priority: priority, security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.get_rule(::Google::Cloud::Compute::V1::GetRuleOrganizationSecurityPolicyRequest.new(priority: priority, security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, get_rule_client_stub.call_count
      end
    end
  end

  def test_insert
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent_id = "hello world"
    request_id = "hello world"
    security_policy_resource = {}

    insert_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_insert_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, insert_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.insert({ parent_id: parent_id, request_id: request_id, security_policy_resource: security_policy_resource }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.insert parent_id: parent_id, request_id: request_id, security_policy_resource: security_policy_resource do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.insert ::Google::Cloud::Compute::V1::InsertOrganizationSecurityPolicyRequest.new(parent_id: parent_id, request_id: request_id, security_policy_resource: security_policy_resource) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.insert({ parent_id: parent_id, request_id: request_id, security_policy_resource: security_policy_resource }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.insert(::Google::Cloud::Compute::V1::InsertOrganizationSecurityPolicyRequest.new(parent_id: parent_id, request_id: request_id, security_policy_resource: security_policy_resource), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, insert_client_stub.call_count
      end
    end
  end

  def test_list
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::SecurityPolicyList.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    filter = "hello world"
    max_results = 42
    order_by = "hello world"
    page_token = "hello world"
    parent_id = "hello world"
    return_partial_success = true

    list_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_list_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list({ filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list ::Google::Cloud::Compute::V1::ListOrganizationSecurityPoliciesRequest.new(filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list({ filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list(::Google::Cloud::Compute::V1::ListOrganizationSecurityPoliciesRequest.new(filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_client_stub.call_count
      end
    end
  end

  def test_list_associations
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::OrganizationSecurityPoliciesListAssociationsResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    target_resource = "hello world"

    list_associations_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_list_associations_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_associations_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list_associations({ target_resource: target_resource }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list_associations target_resource: target_resource do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list_associations ::Google::Cloud::Compute::V1::ListAssociationsOrganizationSecurityPolicyRequest.new(target_resource: target_resource) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list_associations({ target_resource: target_resource }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list_associations(::Google::Cloud::Compute::V1::ListAssociationsOrganizationSecurityPolicyRequest.new(target_resource: target_resource), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_associations_client_stub.call_count
      end
    end
  end

  def test_list_preconfigured_expression_sets
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::SecurityPoliciesListPreconfiguredExpressionSetsResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    filter = "hello world"
    max_results = 42
    order_by = "hello world"
    page_token = "hello world"
    parent_id = "hello world"
    return_partial_success = true

    list_preconfigured_expression_sets_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_list_preconfigured_expression_sets_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_preconfigured_expression_sets_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list_preconfigured_expression_sets({ filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list_preconfigured_expression_sets filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list_preconfigured_expression_sets ::Google::Cloud::Compute::V1::ListPreconfiguredExpressionSetsOrganizationSecurityPoliciesRequest.new(filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list_preconfigured_expression_sets({ filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list_preconfigured_expression_sets(::Google::Cloud::Compute::V1::ListPreconfiguredExpressionSetsOrganizationSecurityPoliciesRequest.new(filter: filter, max_results: max_results, order_by: order_by, page_token: page_token, parent_id: parent_id, return_partial_success: return_partial_success), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_preconfigured_expression_sets_client_stub.call_count
      end
    end
  end

  def test_move
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent_id = "hello world"
    request_id = "hello world"
    security_policy = "hello world"

    move_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_move_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, move_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.move({ parent_id: parent_id, request_id: request_id, security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.move parent_id: parent_id, request_id: request_id, security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.move ::Google::Cloud::Compute::V1::MoveOrganizationSecurityPolicyRequest.new(parent_id: parent_id, request_id: request_id, security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.move({ parent_id: parent_id, request_id: request_id, security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.move(::Google::Cloud::Compute::V1::MoveOrganizationSecurityPolicyRequest.new(parent_id: parent_id, request_id: request_id, security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, move_client_stub.call_count
      end
    end
  end

  def test_patch
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    request_id = "hello world"
    security_policy = "hello world"
    security_policy_resource = {}

    patch_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_patch_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, patch_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.patch({ request_id: request_id, security_policy: security_policy, security_policy_resource: security_policy_resource }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.patch request_id: request_id, security_policy: security_policy, security_policy_resource: security_policy_resource do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.patch ::Google::Cloud::Compute::V1::PatchOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy, security_policy_resource: security_policy_resource) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.patch({ request_id: request_id, security_policy: security_policy, security_policy_resource: security_policy_resource }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.patch(::Google::Cloud::Compute::V1::PatchOrganizationSecurityPolicyRequest.new(request_id: request_id, security_policy: security_policy, security_policy_resource: security_policy_resource), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, patch_client_stub.call_count
      end
    end
  end

  def test_patch_rule
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    priority = 42
    request_id = "hello world"
    security_policy = "hello world"
    security_policy_rule_resource = {}

    patch_rule_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_patch_rule_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, patch_rule_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.patch_rule({ priority: priority, request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.patch_rule priority: priority, request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.patch_rule ::Google::Cloud::Compute::V1::PatchRuleOrganizationSecurityPolicyRequest.new(priority: priority, request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.patch_rule({ priority: priority, request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.patch_rule(::Google::Cloud::Compute::V1::PatchRuleOrganizationSecurityPolicyRequest.new(priority: priority, request_id: request_id, security_policy: security_policy, security_policy_rule_resource: security_policy_rule_resource), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, patch_rule_client_stub.call_count
      end
    end
  end

  def test_remove_association
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    request_id = "hello world"
    security_policy = "hello world"

    remove_association_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_remove_association_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, remove_association_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.remove_association({ name: name, request_id: request_id, security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.remove_association name: name, request_id: request_id, security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.remove_association ::Google::Cloud::Compute::V1::RemoveAssociationOrganizationSecurityPolicyRequest.new(name: name, request_id: request_id, security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.remove_association({ name: name, request_id: request_id, security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.remove_association(::Google::Cloud::Compute::V1::RemoveAssociationOrganizationSecurityPolicyRequest.new(name: name, request_id: request_id, security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, remove_association_client_stub.call_count
      end
    end
  end

  def test_remove_rule
    # Create test objects.
    client_result = ::Google::Cloud::Compute::V1::Operation.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    priority = 42
    request_id = "hello world"
    security_policy = "hello world"

    remove_rule_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:, method_name:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::ServiceStub.stub :transcode_remove_rule_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, remove_rule_client_stub do
        # Create client
        client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.remove_rule({ priority: priority, request_id: request_id, security_policy: security_policy }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.remove_rule priority: priority, request_id: request_id, security_policy: security_policy do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.remove_rule ::Google::Cloud::Compute::V1::RemoveRuleOrganizationSecurityPolicyRequest.new(priority: priority, request_id: request_id, security_policy: security_policy) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.remove_rule({ priority: priority, request_id: request_id, security_policy: security_policy }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.remove_rule(::Google::Cloud::Compute::V1::RemoveRuleOrganizationSecurityPolicyRequest.new(priority: priority, request_id: request_id, security_policy: security_policy), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, remove_rule_client_stub.call_count
      end
    end
  end

  def test_configure
    credentials_token = :dummy_value

    client = block_config = config = nil
    dummy_stub = ClientStub.new nil
    Gapic::Rest::ClientStub.stub :new, dummy_stub do
      client = ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client.new do |config|
        config.credentials = credentials_token
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Compute::V1::OrganizationSecurityPolicies::Rest::Client::Configuration, config
  end
end
