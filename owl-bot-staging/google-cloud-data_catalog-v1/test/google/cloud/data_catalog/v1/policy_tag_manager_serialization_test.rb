# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/cloud/datacatalog/v1/policytagmanagerserialization_pb"
require "google/cloud/datacatalog/v1/policytagmanagerserialization_services_pb"
require "google/cloud/data_catalog/v1/policy_tag_manager_serialization"

class ::Google::Cloud::DataCatalog::V1::PolicyTagManagerSerialization::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_replace_taxonomy
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::DataCatalog::V1::Taxonomy.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    serialized_taxonomy = {}

    replace_taxonomy_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :replace_taxonomy, name
      assert_kind_of ::Google::Cloud::DataCatalog::V1::ReplaceTaxonomyRequest, request
      assert_equal "hello world", request["name"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::DataCatalog::V1::SerializedTaxonomy), request["serialized_taxonomy"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, replace_taxonomy_client_stub do
      # Create client
      client = ::Google::Cloud::DataCatalog::V1::PolicyTagManagerSerialization::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.replace_taxonomy({ name: name, serialized_taxonomy: serialized_taxonomy }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.replace_taxonomy name: name, serialized_taxonomy: serialized_taxonomy do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.replace_taxonomy ::Google::Cloud::DataCatalog::V1::ReplaceTaxonomyRequest.new(name: name, serialized_taxonomy: serialized_taxonomy) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.replace_taxonomy({ name: name, serialized_taxonomy: serialized_taxonomy }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.replace_taxonomy(::Google::Cloud::DataCatalog::V1::ReplaceTaxonomyRequest.new(name: name, serialized_taxonomy: serialized_taxonomy), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, replace_taxonomy_client_stub.call_rpc_count
    end
  end

  def test_import_taxonomies
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::DataCatalog::V1::ImportTaxonomiesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    inline_source = {}

    import_taxonomies_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :import_taxonomies, name
      assert_kind_of ::Google::Cloud::DataCatalog::V1::ImportTaxonomiesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::DataCatalog::V1::InlineSource), request["inline_source"]
      assert_equal :inline_source, request.source
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, import_taxonomies_client_stub do
      # Create client
      client = ::Google::Cloud::DataCatalog::V1::PolicyTagManagerSerialization::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.import_taxonomies({ parent: parent, inline_source: inline_source }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.import_taxonomies parent: parent, inline_source: inline_source do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.import_taxonomies ::Google::Cloud::DataCatalog::V1::ImportTaxonomiesRequest.new(parent: parent, inline_source: inline_source) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.import_taxonomies({ parent: parent, inline_source: inline_source }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.import_taxonomies(::Google::Cloud::DataCatalog::V1::ImportTaxonomiesRequest.new(parent: parent, inline_source: inline_source), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, import_taxonomies_client_stub.call_rpc_count
    end
  end

  def test_export_taxonomies
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::DataCatalog::V1::ExportTaxonomiesResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    taxonomies = ["hello world"]
    serialized_taxonomies = true

    export_taxonomies_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :export_taxonomies, name
      assert_kind_of ::Google::Cloud::DataCatalog::V1::ExportTaxonomiesRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal ["hello world"], request["taxonomies"]
      assert_equal true, request["serialized_taxonomies"]
      assert_equal :serialized_taxonomies, request.destination
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, export_taxonomies_client_stub do
      # Create client
      client = ::Google::Cloud::DataCatalog::V1::PolicyTagManagerSerialization::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.export_taxonomies({ parent: parent, taxonomies: taxonomies, serialized_taxonomies: serialized_taxonomies }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.export_taxonomies parent: parent, taxonomies: taxonomies, serialized_taxonomies: serialized_taxonomies do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.export_taxonomies ::Google::Cloud::DataCatalog::V1::ExportTaxonomiesRequest.new(parent: parent, taxonomies: taxonomies, serialized_taxonomies: serialized_taxonomies) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.export_taxonomies({ parent: parent, taxonomies: taxonomies, serialized_taxonomies: serialized_taxonomies }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.export_taxonomies(::Google::Cloud::DataCatalog::V1::ExportTaxonomiesRequest.new(parent: parent, taxonomies: taxonomies, serialized_taxonomies: serialized_taxonomies), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, export_taxonomies_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::DataCatalog::V1::PolicyTagManagerSerialization::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::DataCatalog::V1::PolicyTagManagerSerialization::Client::Configuration, config
  end
end
