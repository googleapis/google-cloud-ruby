# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/apigeeconnect/v1/tether.proto

require 'google/protobuf'

require 'google/protobuf/duration_pb'
require 'google/rpc/status_pb'
require 'google/api/client_pb'


descriptor_data = "\n*google/cloud/apigeeconnect/v1/tether.proto\x12\x1dgoogle.cloud.apigeeconnect.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x17google/rpc/status.proto\x1a\x17google/api/client.proto\"\xe4\x01\n\rEgressRequest\x12\n\n\x02id\x18\x01 \x01(\t\x12\x37\n\x07payload\x18\x02 \x01(\x0b\x32&.google.cloud.apigeeconnect.v1.Payload\x12?\n\x08\x65ndpoint\x18\x03 \x01(\x0e\x32-.google.cloud.apigeeconnect.v1.TetherEndpoint\x12\x0f\n\x07project\x18\x04 \x01(\t\x12\x10\n\x08trace_id\x18\x05 \x01(\t\x12*\n\x07timeout\x18\x06 \x01(\x0b\x32\x19.google.protobuf.Duration\"\xd0\x01\n\x07Payload\x12\x42\n\x0chttp_request\x18\x01 \x01(\x0b\x32*.google.cloud.apigeeconnect.v1.HttpRequestH\x00\x12@\n\x0bstream_info\x18\x02 \x01(\x0b\x32).google.cloud.apigeeconnect.v1.StreamInfoH\x00\x12\x37\n\x06\x61\x63tion\x18\x03 \x01(\x0e\x32%.google.cloud.apigeeconnect.v1.ActionH\x00\x42\x06\n\x04kind\"\x18\n\nStreamInfo\x12\n\n\x02id\x18\x01 \x01(\t\"\xf6\x01\n\x0e\x45gressResponse\x12\n\n\x02id\x18\x01 \x01(\t\x12\x42\n\rhttp_response\x18\x02 \x01(\x0b\x32+.google.cloud.apigeeconnect.v1.HttpResponse\x12\"\n\x06status\x18\x03 \x01(\x0b\x32\x12.google.rpc.Status\x12\x0f\n\x07project\x18\x04 \x01(\t\x12\x10\n\x08trace_id\x18\x05 \x01(\t\x12?\n\x08\x65ndpoint\x18\x06 \x01(\x0e\x32-.google.cloud.apigeeconnect.v1.TetherEndpoint\x12\x0c\n\x04name\x18\x07 \x01(\t\"\xa0\x01\n\x0bHttpRequest\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0e\n\x06method\x18\x02 \x01(\t\x12/\n\x03url\x18\x03 \x01(\x0b\x32\".google.cloud.apigeeconnect.v1.Url\x12\x36\n\x07headers\x18\x04 \x03(\x0b\x32%.google.cloud.apigeeconnect.v1.Header\x12\x0c\n\x04\x62ody\x18\x05 \x01(\x0c\"X\n\x03Url\x12\x35\n\x06scheme\x18\x01 \x01(\x0e\x32%.google.cloud.apigeeconnect.v1.Scheme\x12\x0c\n\x04host\x18\x02 \x01(\t\x12\x0c\n\x04path\x18\x03 \x01(\t\"%\n\x06Header\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x0e\n\x06values\x18\x02 \x03(\t\"\x9d\x01\n\x0cHttpResponse\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0e\n\x06status\x18\x02 \x01(\t\x12\x13\n\x0bstatus_code\x18\x03 \x01(\x05\x12\x0c\n\x04\x62ody\x18\x04 \x01(\x0c\x12\x36\n\x07headers\x18\x05 \x03(\x0b\x32%.google.cloud.apigeeconnect.v1.Header\x12\x16\n\x0e\x63ontent_length\x18\x06 \x01(\x03*5\n\x06\x41\x63tion\x12\x16\n\x12\x41\x43TION_UNSPECIFIED\x10\x00\x12\x13\n\x0fOPEN_NEW_STREAM\x10\x01*n\n\x0eTetherEndpoint\x12\x1f\n\x1bTETHER_ENDPOINT_UNSPECIFIED\x10\x00\x12\x0f\n\x0b\x41PIGEE_MART\x10\x01\x12\x12\n\x0e\x41PIGEE_RUNTIME\x10\x02\x12\x16\n\x12\x41PIGEE_MINT_RATING\x10\x03*+\n\x06Scheme\x12\x16\n\x12SCHEME_UNSPECIFIED\x10\x00\x12\t\n\x05HTTPS\x10\x01\x32\xc7\x01\n\x06Tether\x12k\n\x06\x45gress\x12-.google.cloud.apigeeconnect.v1.EgressResponse\x1a,.google.cloud.apigeeconnect.v1.EgressRequest\"\x00(\x01\x30\x01\x1aP\xca\x41\x1c\x61pigeeconnect.googleapis.com\xd2\x41.https://www.googleapis.com/auth/cloud-platformB\xde\x01\n!com.google.cloud.apigeeconnect.v1B\x0bTetherProtoP\x01ZGcloud.google.com/go/apigeeconnect/apiv1/apigeeconnectpb;apigeeconnectpb\xaa\x02\x1dGoogle.Cloud.ApigeeConnect.V1\xca\x02\x1dGoogle\\Cloud\\ApigeeConnect\\V1\xea\x02 Google::Cloud::ApigeeConnect::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.Duration", "google/protobuf/duration.proto"],
    ["google.rpc.Status", "google/rpc/status.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module ApigeeConnect
      module V1
        EgressRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.EgressRequest").msgclass
        Payload = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.Payload").msgclass
        StreamInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.StreamInfo").msgclass
        EgressResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.EgressResponse").msgclass
        HttpRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.HttpRequest").msgclass
        Url = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.Url").msgclass
        Header = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.Header").msgclass
        HttpResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.HttpResponse").msgclass
        Action = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.Action").enummodule
        TetherEndpoint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.TetherEndpoint").enummodule
        Scheme = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.apigeeconnect.v1.Scheme").enummodule
      end
    end
  end
end
