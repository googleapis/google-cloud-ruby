# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/appengine/v1/certificate.proto

require 'google/protobuf'

require 'google/protobuf/timestamp_pb'


descriptor_data = "\n%google/appengine/v1/certificate.proto\x12\x13google.appengine.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xdb\x02\n\x15\x41uthorizedCertificate\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\t\x12\x14\n\x0c\x64isplay_name\x18\x03 \x01(\t\x12\x14\n\x0c\x64omain_names\x18\x04 \x03(\t\x12/\n\x0b\x65xpire_time\x18\x05 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x45\n\x14\x63\x65rtificate_raw_data\x18\x06 \x01(\x0b\x32\'.google.appengine.v1.CertificateRawData\x12\x44\n\x13managed_certificate\x18\x07 \x01(\x0b\x32\'.google.appengine.v1.ManagedCertificate\x12\x1f\n\x17visible_domain_mappings\x18\x08 \x03(\t\x12\x1d\n\x15\x64omain_mappings_count\x18\t \x01(\x05\"E\n\x12\x43\x65rtificateRawData\x12\x1a\n\x12public_certificate\x18\x01 \x01(\t\x12\x13\n\x0bprivate_key\x18\x02 \x01(\t\"\x82\x01\n\x12ManagedCertificate\x12\x35\n\x11last_renewal_time\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x35\n\x06status\x18\x02 \x01(\x0e\x32%.google.appengine.v1.ManagementStatus*\xc6\x01\n\x10ManagementStatus\x12!\n\x1dMANAGEMENT_STATUS_UNSPECIFIED\x10\x00\x12\x06\n\x02OK\x10\x01\x12\x0b\n\x07PENDING\x10\x02\x12\x1f\n\x1b\x46\x41ILED_RETRYING_NOT_VISIBLE\x10\x04\x12\x14\n\x10\x46\x41ILED_PERMANENT\x10\x06\x12!\n\x1d\x46\x41ILED_RETRYING_CAA_FORBIDDEN\x10\x07\x12 \n\x1c\x46\x41ILED_RETRYING_CAA_CHECKING\x10\x08\x42\xc1\x01\n\x17\x63om.google.appengine.v1B\x10\x43\x65rtificateProtoP\x01Z;cloud.google.com/go/appengine/apiv1/appenginepb;appenginepb\xaa\x02\x19Google.Cloud.AppEngine.V1\xca\x02\x19Google\\Cloud\\AppEngine\\V1\xea\x02\x1cGoogle::Cloud::AppEngine::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.Timestamp", "google/protobuf/timestamp.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module AppEngine
      module V1
        AuthorizedCertificate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.appengine.v1.AuthorizedCertificate").msgclass
        CertificateRawData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.appengine.v1.CertificateRawData").msgclass
        ManagedCertificate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.appengine.v1.ManagedCertificate").msgclass
        ManagementStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.appengine.v1.ManagementStatus").enummodule
      end
    end
  end
end
