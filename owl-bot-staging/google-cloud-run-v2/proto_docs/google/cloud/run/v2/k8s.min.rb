# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module Run
      module V2
        # A single application container.
        # This specifies both the container to run, the command to run in the container
        # and the arguments to supply to it.
        # Note that additional arguments may be supplied by the system to the container
        # at runtime.
        # @!attribute [rw] name
        #   @return [::String]
        #     Name of the container specified as a DNS_LABEL.
        # @!attribute [rw] image
        #   @return [::String]
        #     Required. URL of the Container image in Google Container Registry or Google Artifact
        #     Registry. More info: https://kubernetes.io/docs/concepts/containers/images
        # @!attribute [rw] command
        #   @return [::Array<::String>]
        #     Entrypoint array. Not executed within a shell.
        #     The docker image's ENTRYPOINT is used if this is not provided.
        #     Variable references $(VAR_NAME) are expanded using the container's
        #     environment. If a variable cannot be resolved, the reference in the input
        #     string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
        #     double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
        #     regardless of whether the variable exists or not.
        #     More info:
        #     https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        # @!attribute [rw] args
        #   @return [::Array<::String>]
        #     Arguments to the entrypoint.
        #     The docker image's CMD is used if this is not provided.
        #     Variable references $(VAR_NAME) are expanded using the container's
        #     environment. If a variable cannot be resolved, the reference in the input
        #     string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
        #     double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
        #     regardless of whether the variable exists or not.
        #     More info:
        #     https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
        # @!attribute [rw] env
        #   @return [::Array<::Google::Cloud::Run::V2::EnvVar>]
        #     List of environment variables to set in the container.
        # @!attribute [rw] resources
        #   @return [::Google::Cloud::Run::V2::ResourceRequirements]
        #     Compute Resource requirements by this container.
        #     More info:
        #     https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        # @!attribute [rw] ports
        #   @return [::Array<::Google::Cloud::Run::V2::ContainerPort>]
        #     List of ports to expose from the container. Only a single port can be
        #     specified. The specified ports must be listening on all interfaces
        #     (0.0.0.0) within the container to be accessible.
        #
        #     If omitted, a port number will be chosen and passed to the container
        #     through the PORT environment variable for the container to listen on.
        # @!attribute [rw] volume_mounts
        #   @return [::Array<::Google::Cloud::Run::V2::VolumeMount>]
        #     Volume to mount into the container's filesystem.
        class Container
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # ResourceRequirements describes the compute resource requirements.
        # @!attribute [rw] limits
        #   @return [::Google::Protobuf::Map{::String => ::String}]
        #     Only memory and CPU are supported. Note: The only
        #     supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at
        #     least 2Gi of memory.
        #     The values of the map is string form of the 'quantity' k8s type:
        #     https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
        # @!attribute [rw] cpu_idle
        #   @return [::Boolean]
        #     Determines whether CPU should be throttled or not outside of requests.
        class ResourceRequirements
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods

          # @!attribute [rw] key
          #   @return [::String]
          # @!attribute [rw] value
          #   @return [::String]
          class LimitsEntry
            include ::Google::Protobuf::MessageExts
            extend ::Google::Protobuf::MessageExts::ClassMethods
          end
        end

        # EnvVar represents an environment variable present in a Container.
        # @!attribute [rw] name
        #   @return [::String]
        #     Required. Name of the environment variable. Must be a C_IDENTIFIER, and mnay not
        #     exceed 32768 characters.
        # @!attribute [rw] value
        #   @return [::String]
        #     Variable references $(VAR_NAME) are expanded
        #     using the previous defined environment variables in the container and
        #     any route environment variables. If a variable cannot be resolved,
        #     the reference in the input string will be unchanged. The $(VAR_NAME)
        #     syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
        #     references will never be expanded, regardless of whether the variable
        #     exists or not.
        #     Defaults to "", and the maximum length is 32768 bytes.
        # @!attribute [rw] value_source
        #   @return [::Google::Cloud::Run::V2::EnvVarSource]
        #     Source for the environment variable's value.
        class EnvVar
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # EnvVarSource represents a source for the value of an EnvVar.
        # @!attribute [rw] secret_key_ref
        #   @return [::Google::Cloud::Run::V2::SecretKeySelector]
        #     Selects a secret and a specific version from Cloud Secret Manager.
        class EnvVarSource
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # SecretEnvVarSource represents a source for the value of an EnvVar.
        # @!attribute [rw] secret
        #   @return [::String]
        #     Required. The name of the secret in Cloud Secret Manager.
        #     Format: \\{secret_name} if the secret is in the same project.
        #     projects/\\{project}/secrets/\\{secret_name} if the secret is
        #     in a different project.
        # @!attribute [rw] version
        #   @return [::String]
        #     The Cloud Secret Manager secret version.
        #     Can be 'latest' for the latest value or an integer for a specific version.
        class SecretKeySelector
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # ContainerPort represents a network port in a single container.
        # @!attribute [rw] name
        #   @return [::String]
        #     If specified, used to specify which protocol to use.
        #     Allowed values are "http1" and "h2c".
        # @!attribute [rw] container_port
        #   @return [::Integer]
        #     Port number the container listens on.
        #     This must be a valid TCP port number, 0 < container_port < 65536.
        class ContainerPort
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # VolumeMount describes a mounting of a Volume within a container.
        # @!attribute [rw] name
        #   @return [::String]
        #     Required. This must match the Name of a Volume.
        # @!attribute [rw] mount_path
        #   @return [::String]
        #     Required. Path within the container at which the volume should be mounted.  Must
        #     not contain ':'. For Cloud SQL volumes, it can be left empty, or must
        #     otherwise be `/cloudsql`. All instances defined in the Volume will be
        #     available as `/cloudsql/[instance]`. For more information on Cloud SQL
        #     volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
        class VolumeMount
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # Volume represents a named volume in a container.
        # @!attribute [rw] name
        #   @return [::String]
        #     Required. Volume's name.
        # @!attribute [rw] secret
        #   @return [::Google::Cloud::Run::V2::SecretVolumeSource]
        #     Secret represents a secret that should populate this volume.
        #     More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        # @!attribute [rw] cloud_sql_instance
        #   @return [::Google::Cloud::Run::V2::CloudSqlInstance]
        #     For Cloud SQL volumes, contains the specific instances that should be
        #     mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for
        #     more information on how to connect Cloud SQL and Cloud Run.
        class Volume
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # The secret's value will be presented as the content of a file whose
        # name is defined in the item path. If no items are defined, the name of
        # the file is the secret.
        # @!attribute [rw] secret
        #   @return [::String]
        #     Required. The name of the secret in Cloud Secret Manager.
        #     Format: \\{secret} if the secret is in the same project.
        #     projects/\\{project}/secrets/\\{secret} if the secret is
        #     in a different project.
        # @!attribute [rw] items
        #   @return [::Array<::Google::Cloud::Run::V2::VersionToPath>]
        #     If unspecified, the volume will expose a file whose name is the
        #     secret, relative to VolumeMount.mount_path.
        #     If specified, the key will be used as the version to fetch from Cloud
        #     Secret Manager and the path will be the name of the file exposed in the
        #     volume. When items are defined, they must specify a path and a version.
        # @!attribute [rw] default_mode
        #   @return [::Integer]
        #     Integer representation of mode bits to use on created files by default.
        #     Must be a value between 0000 and 0777 (octal), defaulting to 0644.
        #     Directories within the path are not affected by  this setting.
        #
        #     Notes
        #
        #     * Internally, a umask of 0222 will be applied to any non-zero value.
        #     * This is an integer representation of the mode bits. So, the octal
        #     integer value should look exactly as the chmod numeric notation with a
        #     leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or
        #     511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or
        #     416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493
        #     (base-10).
        #     * This might be in conflict with other options that affect the
        #     file mode, like fsGroup, and the result can be other mode bits set.
        #
        #     This might be in conflict with other options that affect the
        #     file mode, like fsGroup, and as a result, other mode bits could be set.
        class SecretVolumeSource
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # VersionToPath maps a specific version of a secret to a relative file to mount
        # to, relative to VolumeMount's mount_path.
        # @!attribute [rw] path
        #   @return [::String]
        #     Required. The relative path of the secret in the container.
        # @!attribute [rw] version
        #   @return [::String]
        #     The Cloud Secret Manager secret version.
        #     Can be 'latest' for the latest value or an integer for a specific version.
        # @!attribute [rw] mode
        #   @return [::Integer]
        #     Integer octal mode bits to use on this file, must be a value between
        #     01 and 0777 (octal). If 0 or not set, the Volume's default mode will be
        #     used.
        #
        #     Notes
        #
        #     * Internally, a umask of 0222 will be applied to any non-zero value.
        #     * This is an integer representation of the mode bits. So, the octal
        #     integer value should look exactly as the chmod numeric notation with a
        #     leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or
        #     511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or
        #     416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493
        #     (base-10).
        #     * This might be in conflict with other options that affect the
        #     file mode, like fsGroup, and the result can be other mode bits set.
        class VersionToPath
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # Represents a specific Cloud SQL instance.
        # @!attribute [rw] instances
        #   @return [::Array<::String>]
        #     The Cloud SQL instance connection names, as can be found in
        #     https://console.cloud.google.com/sql/instances. Visit
        #     https://cloud.google.com/sql/docs/mysql/connect-run for more information on
        #     how to connect Cloud SQL and Cloud Run. Format:
        #     \\{project}:\\{location}:\\{instance}
        class CloudSqlInstance
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end
      end
    end
  end
end
