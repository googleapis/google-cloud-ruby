# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/gkemulticloud/v1/aws_service_pb"

module Google
  module Cloud
    module GkeMultiCloud
      module V1
        module AwsClusters
          ##
          # Client for the AwsClusters service.
          #
          # The AwsClusters API provides a single centrally managed service
          # to create and manage Anthos clusters that run on AWS infrastructure.
          #
          class Client
            include Paths

            # @private
            attr_reader :aws_clusters_stub

            ##
            # Configure the AwsClusters Client class.
            #
            # See {::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all AwsClusters clients
            #   ::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "GkeMultiCloud", "V1"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.rpcs.create_aws_cluster.timeout = 60.0

                default_config.rpcs.update_aws_cluster.timeout = 60.0

                default_config.rpcs.get_aws_cluster.timeout = 60.0
                default_config.rpcs.get_aws_cluster.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.list_aws_clusters.timeout = 60.0
                default_config.rpcs.list_aws_clusters.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.delete_aws_cluster.timeout = 60.0

                default_config.rpcs.generate_aws_access_token.timeout = 60.0
                default_config.rpcs.generate_aws_access_token.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.create_aws_node_pool.timeout = 60.0

                default_config.rpcs.update_aws_node_pool.timeout = 60.0

                default_config.rpcs.get_aws_node_pool.timeout = 60.0
                default_config.rpcs.get_aws_node_pool.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.list_aws_node_pools.timeout = 60.0
                default_config.rpcs.list_aws_node_pools.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.delete_aws_node_pool.timeout = 60.0

                default_config.rpcs.get_aws_server_config.timeout = 60.0
                default_config.rpcs.get_aws_server_config.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the AwsClusters Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new AwsClusters client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the AwsClusters client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/gkemulticloud/v1/aws_service_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @operations_client = Operations.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @config.endpoint
              end

              @aws_clusters_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            ##
            # Get the associated client for long-running operations.
            #
            # @return [::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Operations]
            #
            attr_reader :operations_client

            # Service calls

            ##
            # Creates a new {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource on a given GCP project and region.
            #
            # If successful, the response contains a newly created
            # {::Google::Longrunning::Operation Operation} resource that can be
            # described to track the status of the operation.
            #
            # @overload create_aws_cluster(request, options = nil)
            #   Pass arguments to `create_aws_cluster` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::CreateAwsClusterRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::CreateAwsClusterRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_aws_cluster(parent: nil, aws_cluster: nil, aws_cluster_id: nil, validate_only: nil)
            #   Pass arguments to `create_aws_cluster` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The parent location where this {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource
            #     will be created.
            #
            #     Location names are formatted as `projects/<project-id>/locations/<region>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #   @param aws_cluster [::Google::Cloud::GkeMultiCloud::V1::AwsCluster, ::Hash]
            #     Required. The specification of the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} to create.
            #   @param aws_cluster_id [::String]
            #     Required. A client provided ID the resource. Must be unique within the parent
            #     resource.
            #
            #     The provided ID will be part of the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster}
            #     resource name formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
            #
            #     Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 40 characters.
            #   @param validate_only [::Boolean]
            #     If set, only validate the request, but do not actually create the cluster.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::CreateAwsClusterRequest.new
            #
            #   # Call the create_aws_cluster method.
            #   result = client.create_aws_cluster request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def create_aws_cluster request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::CreateAwsClusterRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_aws_cluster.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_aws_cluster.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_aws_cluster.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :create_aws_cluster, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates an {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster}.
            #
            # @overload update_aws_cluster(request, options = nil)
            #   Pass arguments to `update_aws_cluster` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::UpdateAwsClusterRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::UpdateAwsClusterRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_aws_cluster(aws_cluster: nil, validate_only: nil, update_mask: nil)
            #   Pass arguments to `update_aws_cluster` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param aws_cluster [::Google::Cloud::GkeMultiCloud::V1::AwsCluster, ::Hash]
            #     Required. The {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource to update.
            #   @param validate_only [::Boolean]
            #     If set, only validate the request, but do not actually update the cluster.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Required. Mask of fields to update. At least one path must be supplied in
            #     this field. The elements of the repeated paths field can only include these
            #     fields from {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster}:
            #
            #      *   `description`.
            #      *   `annotations`.
            #      *   `control_plane.version`.
            #      *   `authorization.admin_users`.
            #      *   `control_plane.aws_services_authentication.role_arn`.
            #      *   `control_plane.aws_services_authentication.role_session_name`.
            #      *   `control_plane.config_encryption.kms_key_arn`.
            #      *   `control_plane.instance_type`.
            #      *   `control_plane.security_group_ids`.
            #      *   `control_plane.proxy_config`.
            #      *   `control_plane.proxy_config.secret_arn`.
            #      *   `control_plane.proxy_config.secret_version`.
            #      *   `control_plane.root_volume.iops`.
            #      *   `control_plane.root_volume.kms_key_arn`.
            #      *   `control_plane.root_volume.volume_type`.
            #      *   `control_plane.root_volume.size_gib`.
            #      *   `control_plane.ssh_config`.
            #      *   `control_plane.ssh_config.ec2_key_pair`.
            #      *   `control_plane.instance_placement.tenancy`.
            #      *   `logging_config`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::UpdateAwsClusterRequest.new
            #
            #   # Call the update_aws_cluster method.
            #   result = client.update_aws_cluster request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def update_aws_cluster request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::UpdateAwsClusterRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_aws_cluster.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.aws_cluster&.name
                header_params["aws_cluster.name"] = request.aws_cluster.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_aws_cluster.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_aws_cluster.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :update_aws_cluster, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Describes a specific {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource.
            #
            # @overload get_aws_cluster(request, options = nil)
            #   Pass arguments to `get_aws_cluster` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::GetAwsClusterRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::GetAwsClusterRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_aws_cluster(name: nil)
            #   Pass arguments to `get_aws_cluster` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource to describe.
            #
            #     `AwsCluster` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on GCP resource names.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::GkeMultiCloud::V1::AwsCluster]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::GkeMultiCloud::V1::AwsCluster]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::GetAwsClusterRequest.new
            #
            #   # Call the get_aws_cluster method.
            #   result = client.get_aws_cluster request
            #
            #   # The returned object is of type Google::Cloud::GkeMultiCloud::V1::AwsCluster.
            #   p result
            #
            def get_aws_cluster request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::GetAwsClusterRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_aws_cluster.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_aws_cluster.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_aws_cluster.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :get_aws_cluster, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resources on a given Google Cloud project and
            # region.
            #
            # @overload list_aws_clusters(request, options = nil)
            #   Pass arguments to `list_aws_clusters` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::ListAwsClustersRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::ListAwsClustersRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_aws_clusters(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_aws_clusters` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The parent location which owns this collection of
            #     {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resources.
            #
            #     Location names are formatted as `projects/<project-id>/locations/<region>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on GCP resource names.
            #   @param page_size [::Integer]
            #     The maximum number of items to return.
            #
            #     If not specified, a default value of 50 will be used by the service.
            #     Regardless of the pageSize value, the response can include a partial list
            #     and a caller should only rely on response's
            #     {::Google::Cloud::GkeMultiCloud::V1::ListAwsClustersResponse#next_page_token nextPageToken} to determine if
            #     there are more instances left to be queried.
            #   @param page_token [::String]
            #     The `nextPageToken` value returned from a previous
            #     {::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client#list_aws_clusters awsClusters.list} request, if any.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::GkeMultiCloud::V1::AwsCluster>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::GkeMultiCloud::V1::AwsCluster>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::ListAwsClustersRequest.new
            #
            #   # Call the list_aws_clusters method.
            #   result = client.list_aws_clusters request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::GkeMultiCloud::V1::AwsCluster.
            #     p response
            #   end
            #
            def list_aws_clusters request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::ListAwsClustersRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_aws_clusters.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_aws_clusters.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_aws_clusters.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :list_aws_clusters, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @aws_clusters_stub, :list_aws_clusters, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a specific {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource.
            #
            # Fails if the cluster has one or more associated {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool}
            # resources.
            #
            # If successful, the response contains a newly created
            # {::Google::Longrunning::Operation Operation} resource that can be
            # described to track the status of the operation.
            #
            # @overload delete_aws_cluster(request, options = nil)
            #   Pass arguments to `delete_aws_cluster` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::DeleteAwsClusterRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::DeleteAwsClusterRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_aws_cluster(name: nil, validate_only: nil, allow_missing: nil, etag: nil)
            #   Pass arguments to `delete_aws_cluster` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} to delete.
            #
            #     `AwsCluster` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on GCP resource names.
            #   @param validate_only [::Boolean]
            #     If set, only validate the request, but do not actually delete the resource.
            #   @param allow_missing [::Boolean]
            #     If set to true, and the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource is not found,
            #     the request will succeed but no action will be taken on the server and a
            #     completed {::Google::Longrunning::Operation Operation} will be returned.
            #
            #     Useful for idempotent deletion.
            #   @param etag [::String]
            #     The current etag of the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster}.
            #
            #     Allows clients to perform deletions through optimistic concurrency control.
            #
            #     If the provided etag does not match the current etag of the cluster,
            #     the request will fail and an ABORTED error will be returned.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::DeleteAwsClusterRequest.new
            #
            #   # Call the delete_aws_cluster method.
            #   result = client.delete_aws_cluster request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def delete_aws_cluster request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::DeleteAwsClusterRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_aws_cluster.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_aws_cluster.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_aws_cluster.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :delete_aws_cluster, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Generates a short-lived access token to authenticate to a given
            # {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource.
            #
            # @overload generate_aws_access_token(request, options = nil)
            #   Pass arguments to `generate_aws_access_token` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload generate_aws_access_token(aws_cluster: nil)
            #   Pass arguments to `generate_aws_access_token` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param aws_cluster [::String]
            #     Required. The name of the {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource to authenticate to.
            #
            #     `AwsCluster` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenRequest.new
            #
            #   # Call the generate_aws_access_token method.
            #   result = client.generate_aws_access_token request
            #
            #   # The returned object is of type Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenResponse.
            #   p result
            #
            def generate_aws_access_token request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::GenerateAwsAccessTokenRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.generate_aws_access_token.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.aws_cluster
                header_params["aws_cluster"] = request.aws_cluster
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.generate_aws_access_token.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.generate_aws_access_token.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :generate_aws_access_token, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a new {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool}, attached to a given {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster}.
            #
            # If successful, the response contains a newly created
            # {::Google::Longrunning::Operation Operation} resource that can be
            # described to track the status of the operation.
            #
            # @overload create_aws_node_pool(request, options = nil)
            #   Pass arguments to `create_aws_node_pool` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::CreateAwsNodePoolRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::CreateAwsNodePoolRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_aws_node_pool(parent: nil, aws_node_pool: nil, aws_node_pool_id: nil, validate_only: nil)
            #   Pass arguments to `create_aws_node_pool` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster} resource where this node pool will be created.
            #
            #     `AwsCluster` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #   @param aws_node_pool [::Google::Cloud::GkeMultiCloud::V1::AwsNodePool, ::Hash]
            #     Required. The specification of the {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} to create.
            #   @param aws_node_pool_id [::String]
            #     Required. A client provided ID the resource. Must be unique within the parent
            #     resource.
            #
            #     The provided ID will be part of the {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool}
            #     resource name formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
            #
            #     Valid characters are `/[a-z][0-9]-/`. Cannot be longer than 40 characters.
            #   @param validate_only [::Boolean]
            #     If set, only validate the request, but do not actually create the node
            #     pool.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::CreateAwsNodePoolRequest.new
            #
            #   # Call the create_aws_node_pool method.
            #   result = client.create_aws_node_pool request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def create_aws_node_pool request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::CreateAwsNodePoolRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_aws_node_pool.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_aws_node_pool.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_aws_node_pool.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :create_aws_node_pool, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates an {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool}.
            #
            # @overload update_aws_node_pool(request, options = nil)
            #   Pass arguments to `update_aws_node_pool` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::UpdateAwsNodePoolRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::UpdateAwsNodePoolRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_aws_node_pool(aws_node_pool: nil, validate_only: nil, update_mask: nil)
            #   Pass arguments to `update_aws_node_pool` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param aws_node_pool [::Google::Cloud::GkeMultiCloud::V1::AwsNodePool, ::Hash]
            #     Required. The {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resource to update.
            #   @param validate_only [::Boolean]
            #     If set, only validate the request, but don't actually update the node pool.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Required. Mask of fields to update. At least one path must be supplied in
            #     this field. The elements of the repeated paths field can only include these
            #     fields from {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool}:
            #
            #      *   `annotations`.
            #      *   `version`.
            #      *   `autoscaling.min_node_count`.
            #      *   `autoscaling.max_node_count`.
            #      *   `config.config_encryption.kms_key_arn`.
            #      *   `config.security_group_ids`.
            #      *   `config.root_volume.iops`.
            #      *   `config.root_volume.kms_key_arn`.
            #      *   `config.root_volume.volume_type`.
            #      *   `config.root_volume.size_gib`.
            #      *   `config.proxy_config`.
            #      *   `config.proxy_config.secret_arn`.
            #      *   `config.proxy_config.secret_version`.
            #      *   `config.ssh_config`.
            #      *   `config.ssh_config.ec2_key_pair`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::UpdateAwsNodePoolRequest.new
            #
            #   # Call the update_aws_node_pool method.
            #   result = client.update_aws_node_pool request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def update_aws_node_pool request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::UpdateAwsNodePoolRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_aws_node_pool.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.aws_node_pool&.name
                header_params["aws_node_pool.name"] = request.aws_node_pool.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_aws_node_pool.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_aws_node_pool.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :update_aws_node_pool, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Describes a specific {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resource.
            #
            # @overload get_aws_node_pool(request, options = nil)
            #   Pass arguments to `get_aws_node_pool` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::GetAwsNodePoolRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::GetAwsNodePoolRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_aws_node_pool(name: nil)
            #   Pass arguments to `get_aws_node_pool` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resource to describe.
            #
            #     `AwsNodePool` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::GkeMultiCloud::V1::AwsNodePool]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::GkeMultiCloud::V1::AwsNodePool]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::GetAwsNodePoolRequest.new
            #
            #   # Call the get_aws_node_pool method.
            #   result = client.get_aws_node_pool request
            #
            #   # The returned object is of type Google::Cloud::GkeMultiCloud::V1::AwsNodePool.
            #   p result
            #
            def get_aws_node_pool request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::GetAwsNodePoolRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_aws_node_pool.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_aws_node_pool.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_aws_node_pool.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :get_aws_node_pool, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists all {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resources on a given {::Google::Cloud::GkeMultiCloud::V1::AwsCluster AwsCluster}.
            #
            # @overload list_aws_node_pools(request, options = nil)
            #   Pass arguments to `list_aws_node_pools` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::ListAwsNodePoolsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::ListAwsNodePoolsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_aws_node_pools(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_aws_node_pools` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The parent `AwsCluster` which owns this collection of
            #     {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resources.
            #
            #     `AwsCluster` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #   @param page_size [::Integer]
            #     The maximum number of items to return.
            #
            #     If not specified, a default value of 50 will be used by the service.
            #     Regardless of the pageSize value, the response can include a partial list
            #     and a caller should only rely on response's
            #     {::Google::Cloud::GkeMultiCloud::V1::ListAwsNodePoolsResponse#next_page_token nextPageToken} to determine if
            #     there are more instances left to be queried.
            #   @param page_token [::String]
            #     The `nextPageToken` value returned from a previous
            #     {::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client#list_aws_node_pools awsNodePools.list} request, if any.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::GkeMultiCloud::V1::AwsNodePool>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::GkeMultiCloud::V1::AwsNodePool>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::ListAwsNodePoolsRequest.new
            #
            #   # Call the list_aws_node_pools method.
            #   result = client.list_aws_node_pools request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::GkeMultiCloud::V1::AwsNodePool.
            #     p response
            #   end
            #
            def list_aws_node_pools request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::ListAwsNodePoolsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_aws_node_pools.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_aws_node_pools.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_aws_node_pools.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :list_aws_node_pools, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @aws_clusters_stub, :list_aws_node_pools, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a specific {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resource.
            #
            # If successful, the response contains a newly created
            # {::Google::Longrunning::Operation Operation} resource that can be
            # described to track the status of the operation.
            #
            # @overload delete_aws_node_pool(request, options = nil)
            #   Pass arguments to `delete_aws_node_pool` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::DeleteAwsNodePoolRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::DeleteAwsNodePoolRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_aws_node_pool(name: nil, validate_only: nil, allow_missing: nil, etag: nil)
            #   Pass arguments to `delete_aws_node_pool` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name the {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} to delete.
            #
            #     `AwsNodePool` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsClusters/<cluster-id>/awsNodePools/<node-pool-id>`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #   @param validate_only [::Boolean]
            #     If set, only validate the request, but do not actually delete the node
            #     pool.
            #   @param allow_missing [::Boolean]
            #     If set to true, and the {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool} resource is not found,
            #     the request will succeed but no action will be taken on the server and a
            #     completed {::Google::Longrunning::Operation Operation} will be returned.
            #
            #     Useful for idempotent deletion.
            #   @param etag [::String]
            #     The current ETag of the {::Google::Cloud::GkeMultiCloud::V1::AwsNodePool AwsNodePool}.
            #
            #     Allows clients to perform deletions through optimistic concurrency control.
            #
            #     If the provided ETag does not match the current etag of the node pool,
            #     the request will fail and an ABORTED error will be returned.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::DeleteAwsNodePoolRequest.new
            #
            #   # Call the delete_aws_node_pool method.
            #   result = client.delete_aws_node_pool request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def delete_aws_node_pool request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::DeleteAwsNodePoolRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_aws_node_pool.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_aws_node_pool.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_aws_node_pool.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :delete_aws_node_pool, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns information, such as supported AWS regions and Kubernetes
            # versions, on a given Google Cloud location.
            #
            # @overload get_aws_server_config(request, options = nil)
            #   Pass arguments to `get_aws_server_config` via a request object, either of type
            #   {::Google::Cloud::GkeMultiCloud::V1::GetAwsServerConfigRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::GkeMultiCloud::V1::GetAwsServerConfigRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_aws_server_config(name: nil)
            #   Pass arguments to `get_aws_server_config` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The name of the {::Google::Cloud::GkeMultiCloud::V1::AwsServerConfig AwsServerConfig} resource to describe.
            #
            #     `AwsServerConfig` names are formatted as
            #     `projects/<project-id>/locations/<region>/awsServerConfig`.
            #
            #     See [Resource Names](https://cloud.google.com/apis/design/resource_names)
            #     for more details on Google Cloud resource names.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::GkeMultiCloud::V1::AwsServerConfig]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::GkeMultiCloud::V1::AwsServerConfig]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/gke_multi_cloud/v1"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::GkeMultiCloud::V1::GetAwsServerConfigRequest.new
            #
            #   # Call the get_aws_server_config method.
            #   result = client.get_aws_server_config request
            #
            #   # The returned object is of type Google::Cloud::GkeMultiCloud::V1::AwsServerConfig.
            #   p result
            #
            def get_aws_server_config request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::GkeMultiCloud::V1::GetAwsServerConfigRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_aws_server_config.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::GkeMultiCloud::V1::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_aws_server_config.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_aws_server_config.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @aws_clusters_stub.call_rpc :get_aws_server_config, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the AwsClusters API.
            #
            # This class represents the configuration for AwsClusters,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_aws_cluster to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_aws_cluster.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::GkeMultiCloud::V1::AwsClusters::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_aws_cluster.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"gkemulticloud.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "gkemulticloud.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the AwsClusters API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_aws_cluster`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_aws_cluster
                ##
                # RPC-specific configuration for `update_aws_cluster`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_aws_cluster
                ##
                # RPC-specific configuration for `get_aws_cluster`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_aws_cluster
                ##
                # RPC-specific configuration for `list_aws_clusters`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_aws_clusters
                ##
                # RPC-specific configuration for `delete_aws_cluster`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_aws_cluster
                ##
                # RPC-specific configuration for `generate_aws_access_token`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :generate_aws_access_token
                ##
                # RPC-specific configuration for `create_aws_node_pool`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_aws_node_pool
                ##
                # RPC-specific configuration for `update_aws_node_pool`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_aws_node_pool
                ##
                # RPC-specific configuration for `get_aws_node_pool`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_aws_node_pool
                ##
                # RPC-specific configuration for `list_aws_node_pools`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_aws_node_pools
                ##
                # RPC-specific configuration for `delete_aws_node_pool`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_aws_node_pool
                ##
                # RPC-specific configuration for `get_aws_server_config`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_aws_server_config

                # @private
                def initialize parent_rpcs = nil
                  create_aws_cluster_config = parent_rpcs.create_aws_cluster if parent_rpcs.respond_to? :create_aws_cluster
                  @create_aws_cluster = ::Gapic::Config::Method.new create_aws_cluster_config
                  update_aws_cluster_config = parent_rpcs.update_aws_cluster if parent_rpcs.respond_to? :update_aws_cluster
                  @update_aws_cluster = ::Gapic::Config::Method.new update_aws_cluster_config
                  get_aws_cluster_config = parent_rpcs.get_aws_cluster if parent_rpcs.respond_to? :get_aws_cluster
                  @get_aws_cluster = ::Gapic::Config::Method.new get_aws_cluster_config
                  list_aws_clusters_config = parent_rpcs.list_aws_clusters if parent_rpcs.respond_to? :list_aws_clusters
                  @list_aws_clusters = ::Gapic::Config::Method.new list_aws_clusters_config
                  delete_aws_cluster_config = parent_rpcs.delete_aws_cluster if parent_rpcs.respond_to? :delete_aws_cluster
                  @delete_aws_cluster = ::Gapic::Config::Method.new delete_aws_cluster_config
                  generate_aws_access_token_config = parent_rpcs.generate_aws_access_token if parent_rpcs.respond_to? :generate_aws_access_token
                  @generate_aws_access_token = ::Gapic::Config::Method.new generate_aws_access_token_config
                  create_aws_node_pool_config = parent_rpcs.create_aws_node_pool if parent_rpcs.respond_to? :create_aws_node_pool
                  @create_aws_node_pool = ::Gapic::Config::Method.new create_aws_node_pool_config
                  update_aws_node_pool_config = parent_rpcs.update_aws_node_pool if parent_rpcs.respond_to? :update_aws_node_pool
                  @update_aws_node_pool = ::Gapic::Config::Method.new update_aws_node_pool_config
                  get_aws_node_pool_config = parent_rpcs.get_aws_node_pool if parent_rpcs.respond_to? :get_aws_node_pool
                  @get_aws_node_pool = ::Gapic::Config::Method.new get_aws_node_pool_config
                  list_aws_node_pools_config = parent_rpcs.list_aws_node_pools if parent_rpcs.respond_to? :list_aws_node_pools
                  @list_aws_node_pools = ::Gapic::Config::Method.new list_aws_node_pools_config
                  delete_aws_node_pool_config = parent_rpcs.delete_aws_node_pool if parent_rpcs.respond_to? :delete_aws_node_pool
                  @delete_aws_node_pool = ::Gapic::Config::Method.new delete_aws_node_pool_config
                  get_aws_server_config_config = parent_rpcs.get_aws_server_config if parent_rpcs.respond_to? :get_aws_server_config
                  @get_aws_server_config = ::Gapic::Config::Method.new get_aws_server_config_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
