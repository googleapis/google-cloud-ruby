# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/beyondcorp/appgateways/v1/app_gateways_service_pb"
require "google/cloud/location"
require "google/iam/v1"

module Google
  module Cloud
    module BeyondCorp
      module AppGateways
        module V1
          module AppGatewaysService
            ##
            # Client for the AppGatewaysService service.
            #
            # ## API Overview
            #
            # The `beyondcorp.googleapis.com` service implements the Google Cloud
            # BeyondCorp API.
            #
            # ## Data Model
            #
            # The AppGatewaysService exposes the following resources:
            #
            # * AppGateways, named as follows:
            #   `projects/{project_id}/locations/{location_id}/appGateways/{app_gateway_id}`.
            #
            # The AppGatewaysService service provides methods to manage
            # (create/read/update/delete) BeyondCorp AppGateways.
            #
            class Client
              include Paths

              # @private
              attr_reader :app_gateways_service_stub

              ##
              # Configure the AppGatewaysService Client class.
              #
              # See {::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all AppGatewaysService clients
              #   ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Cloud", "BeyondCorp", "AppGateways", "V1"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the AppGatewaysService Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new AppGatewaysService client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the AppGatewaysService client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the gRPC module only when it's required.
                # See https://github.com/googleapis/toolkit/issues/446
                require "gapic/grpc"
                require "google/cloud/beyondcorp/appgateways/v1/app_gateways_service_services_pb"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                         !@config.endpoint.split(".").first.include?("-")
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end
                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @operations_client = Operations.new do |config|
                  config.credentials = credentials
                  config.quota_project = @quota_project_id
                  config.endpoint = @config.endpoint
                end

                @location_client = Google::Cloud::Location::Locations::Client.new do |config|
                  config.credentials = credentials
                  config.quota_project = @quota_project_id
                  config.endpoint = @config.endpoint
                end

                @iam_policy_client = Google::Iam::V1::IAMPolicy::Client.new do |config|
                  config.credentials = credentials
                  config.quota_project = @quota_project_id
                  config.endpoint = @config.endpoint
                end

                @app_gateways_service_stub = ::Gapic::ServiceStub.new(
                  ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Stub,
                  credentials:  credentials,
                  endpoint:     @config.endpoint,
                  channel_args: @config.channel_args,
                  interceptors: @config.interceptors
                )
              end

              ##
              # Get the associated client for long-running operations.
              #
              # @return [::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Operations]
              #
              attr_reader :operations_client

              ##
              # Get the associated client for mix-in of the Locations.
              #
              # @return [Google::Cloud::Location::Locations::Client]
              #
              attr_reader :location_client

              ##
              # Get the associated client for mix-in of the IAMPolicy.
              #
              # @return [Google::Iam::V1::IAMPolicy::Client]
              #
              attr_reader :iam_policy_client

              # Service calls

              ##
              # Lists AppGateways in a given project and location.
              #
              # @overload list_app_gateways(request, options = nil)
              #   Pass arguments to `list_app_gateways` via a request object, either of type
              #   {::Google::Cloud::BeyondCorp::AppGateways::V1::ListAppGatewaysRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::BeyondCorp::AppGateways::V1::ListAppGatewaysRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload list_app_gateways(parent: nil, page_size: nil, page_token: nil, filter: nil, order_by: nil)
              #   Pass arguments to `list_app_gateways` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The resource name of the AppGateway location using the form:
              #     `projects/{project_id}/locations/{location_id}`
              #   @param page_size [::Integer]
              #     Optional. The maximum number of items to return.
              #     If not specified, a default value of 50 will be used by the service.
              #     Regardless of the page_size value, the response may include a partial list
              #     and a caller should only rely on response's
              #     [next_page_token][BeyondCorp.ListAppGatewaysResponse.next_page_token] to
              #     determine if there are more instances left to be queried.
              #   @param page_token [::String]
              #     Optional. The next_page_token value returned from a previous
              #     ListAppGatewaysRequest, if any.
              #   @param filter [::String]
              #     Optional. A filter specifying constraints of a list operation.
              #   @param order_by [::String]
              #     Optional. Specifies the ordering of results. See
              #     [Sorting
              #     order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
              #     for more information.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway>]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::PagedEnumerable<::Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway>]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/beyond_corp/app_gateways/v1"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::BeyondCorp::AppGateways::V1::ListAppGatewaysRequest.new
              #
              #   # Call the list_app_gateways method.
              #   result = client.list_app_gateways request
              #
              #   # The returned object is of type Gapic::PagedEnumerable. You can
              #   # iterate over all elements by calling #each, and the enumerable
              #   # will lazily make API calls to fetch subsequent pages. Other
              #   # methods are also available for managing paging directly.
              #   result.each do |response|
              #     # Each element is of type ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway.
              #     p response
              #   end
              #
              def list_app_gateways request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BeyondCorp::AppGateways::V1::ListAppGatewaysRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.list_app_gateways.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::BeyondCorp::AppGateways::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.list_app_gateways.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.list_app_gateways.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @app_gateways_service_stub.call_rpc :list_app_gateways, request, options: options do |response, operation|
                  response = ::Gapic::PagedEnumerable.new @app_gateways_service_stub, :list_app_gateways, request, response, operation, options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets details of a single AppGateway.
              #
              # @overload get_app_gateway(request, options = nil)
              #   Pass arguments to `get_app_gateway` via a request object, either of type
              #   {::Google::Cloud::BeyondCorp::AppGateways::V1::GetAppGatewayRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::BeyondCorp::AppGateways::V1::GetAppGatewayRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload get_app_gateway(name: nil)
              #   Pass arguments to `get_app_gateway` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. BeyondCorp AppGateway name using the form:
              #     `projects/{project_id}/locations/{location_id}/appGateways/{app_gateway_id}`
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/beyond_corp/app_gateways/v1"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::BeyondCorp::AppGateways::V1::GetAppGatewayRequest.new
              #
              #   # Call the get_app_gateway method.
              #   result = client.get_app_gateway request
              #
              #   # The returned object is of type Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway.
              #   p result
              #
              def get_app_gateway request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BeyondCorp::AppGateways::V1::GetAppGatewayRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.get_app_gateway.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::BeyondCorp::AppGateways::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.get_app_gateway.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.get_app_gateway.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @app_gateways_service_stub.call_rpc :get_app_gateway, request, options: options do |response, operation|
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Creates a new AppGateway in a given project and location.
              #
              # @overload create_app_gateway(request, options = nil)
              #   Pass arguments to `create_app_gateway` via a request object, either of type
              #   {::Google::Cloud::BeyondCorp::AppGateways::V1::CreateAppGatewayRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::BeyondCorp::AppGateways::V1::CreateAppGatewayRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload create_app_gateway(parent: nil, app_gateway_id: nil, app_gateway: nil, request_id: nil, validate_only: nil)
              #   Pass arguments to `create_app_gateway` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The resource project name of the AppGateway location using the
              #     form: `projects/{project_id}/locations/{location_id}`
              #   @param app_gateway_id [::String]
              #     Optional. User-settable AppGateway resource ID.
              #      * Must start with a letter.
              #      * Must contain between 4-63 characters from `/[a-z][0-9]-/`.
              #      * Must end with a number or a letter.
              #   @param app_gateway [::Google::Cloud::BeyondCorp::AppGateways::V1::AppGateway, ::Hash]
              #     Required. A BeyondCorp AppGateway resource.
              #   @param request_id [::String]
              #     Optional. An optional request ID to identify requests. Specify a unique
              #     request ID so that if you must retry your request, the server will know to
              #     ignore the request if it has already been completed. The server will
              #     guarantee that for at least 60 minutes since the first request.
              #
              #     For example, consider a situation where you make an initial request and t
              #     he request times out. If you make the request again with the same request
              #     ID, the server can check if original operation with the same request ID
              #     was received, and if so, will ignore the second request. This prevents
              #     clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is
              #     not supported (00000000-0000-0000-0000-000000000000).
              #   @param validate_only [::Boolean]
              #     Optional. If set, validates request by executing a dry-run which would not
              #     alter the resource in any way.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::Operation]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::Operation]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/beyond_corp/app_gateways/v1"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::BeyondCorp::AppGateways::V1::CreateAppGatewayRequest.new
              #
              #   # Call the create_app_gateway method.
              #   result = client.create_app_gateway request
              #
              #   # The returned object is of type Gapic::Operation. You can use this
              #   # object to check the status of an operation, cancel it, or wait
              #   # for results. Here is how to block until completion:
              #   result.wait_until_done! timeout: 60
              #   if result.response?
              #     p result.response
              #   else
              #     puts "Error!"
              #   end
              #
              def create_app_gateway request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BeyondCorp::AppGateways::V1::CreateAppGatewayRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.create_app_gateway.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::BeyondCorp::AppGateways::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.parent
                  header_params["parent"] = request.parent
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.create_app_gateway.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.create_app_gateway.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @app_gateways_service_stub.call_rpc :create_app_gateway, request, options: options do |response, operation|
                  response = ::Gapic::Operation.new response, @operations_client, options: options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Deletes a single AppGateway.
              #
              # @overload delete_app_gateway(request, options = nil)
              #   Pass arguments to `delete_app_gateway` via a request object, either of type
              #   {::Google::Cloud::BeyondCorp::AppGateways::V1::DeleteAppGatewayRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::BeyondCorp::AppGateways::V1::DeleteAppGatewayRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload delete_app_gateway(name: nil, request_id: nil, validate_only: nil)
              #   Pass arguments to `delete_app_gateway` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. BeyondCorp AppGateway name using the form:
              #     `projects/{project_id}/locations/{location_id}/appGateways/{app_gateway_id}`
              #   @param request_id [::String]
              #     Optional. An optional request ID to identify requests. Specify a unique
              #     request ID so that if you must retry your request, the server will know to
              #     ignore the request if it has already been completed. The server will
              #     guarantee that for at least 60 minutes after the first request.
              #
              #     For example, consider a situation where you make an initial request and t
              #     he request times out. If you make the request again with the same request
              #     ID, the server can check if original operation with the same request ID
              #     was received, and if so, will ignore the second request. This prevents
              #     clients from accidentally creating duplicate commitments.
              #
              #     The request ID must be a valid UUID with the exception that zero UUID is
              #     not supported (00000000-0000-0000-0000-000000000000).
              #   @param validate_only [::Boolean]
              #     Optional. If set, validates request by executing a dry-run which would not
              #     alter the resource in any way.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Gapic::Operation]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Gapic::Operation]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/cloud/beyond_corp/app_gateways/v1"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Cloud::BeyondCorp::AppGateways::V1::DeleteAppGatewayRequest.new
              #
              #   # Call the delete_app_gateway method.
              #   result = client.delete_app_gateway request
              #
              #   # The returned object is of type Gapic::Operation. You can use this
              #   # object to check the status of an operation, cancel it, or wait
              #   # for results. Here is how to block until completion:
              #   result.wait_until_done! timeout: 60
              #   if result.response?
              #     p result.response
              #   else
              #     puts "Error!"
              #   end
              #
              def delete_app_gateway request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::BeyondCorp::AppGateways::V1::DeleteAppGatewayRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.delete_app_gateway.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::BeyondCorp::AppGateways::V1::VERSION
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.delete_app_gateway.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.delete_app_gateway.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @app_gateways_service_stub.call_rpc :delete_app_gateway, request, options: options do |response, operation|
                  response = ::Gapic::Operation.new response, @operations_client, options: options
                  yield response, operation if block_given?
                  return response
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the AppGatewaysService API.
              #
              # This class represents the configuration for AppGatewaysService,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # list_app_gateways to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.list_app_gateways.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Cloud::BeyondCorp::AppGateways::V1::AppGatewaysService::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.list_app_gateways.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"beyondcorp.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
              #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
              #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] channel_args
              #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
              #   `GRPC::Core::Channel` object is provided as the credential.
              #   @return [::Hash]
              # @!attribute [rw] interceptors
              #   An array of interceptors that are run before calls are executed.
              #   @return [::Array<::GRPC::ClientInterceptor>]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional gRPC headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              #
              class Configuration
                extend ::Gapic::Config

                config_attr :endpoint,      "beyondcorp.googleapis.com", ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                config_attr :interceptors,  nil, ::Array, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the AppGatewaysService API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `list_app_gateways`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_app_gateways
                  ##
                  # RPC-specific configuration for `get_app_gateway`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_app_gateway
                  ##
                  # RPC-specific configuration for `create_app_gateway`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :create_app_gateway
                  ##
                  # RPC-specific configuration for `delete_app_gateway`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :delete_app_gateway

                  # @private
                  def initialize parent_rpcs = nil
                    list_app_gateways_config = parent_rpcs.list_app_gateways if parent_rpcs.respond_to? :list_app_gateways
                    @list_app_gateways = ::Gapic::Config::Method.new list_app_gateways_config
                    get_app_gateway_config = parent_rpcs.get_app_gateway if parent_rpcs.respond_to? :get_app_gateway
                    @get_app_gateway = ::Gapic::Config::Method.new get_app_gateway_config
                    create_app_gateway_config = parent_rpcs.create_app_gateway if parent_rpcs.respond_to? :create_app_gateway
                    @create_app_gateway = ::Gapic::Config::Method.new create_app_gateway_config
                    delete_app_gateway_config = parent_rpcs.delete_app_gateway if parent_rpcs.respond_to? :delete_app_gateway
                    @delete_app_gateway = ::Gapic::Config::Method.new delete_app_gateway_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
