# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Grafeas
  module V1
    module Grafeas
      # Path helper methods for the Grafeas API.
      module Paths
        ##
        # Create a fully-qualified Note resource string.
        #
        # The resource will be in the following format:
        #
        # `projects/{project}/notes/{note}`
        #
        # @param project [String]
        # @param note [String]
        #
        # @return [::String]
        def note_path project:, note:
          raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

          "projects/#{project}/notes/#{note}"
        end

        ##
        # Create a fully-qualified Occurrence resource string.
        #
        # The resource will be in the following format:
        #
        # `projects/{project}/occurrences/{occurrence}`
        #
        # @param project [String]
        # @param occurrence [String]
        #
        # @return [::String]
        def occurrence_path project:, occurrence:
          raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

          "projects/#{project}/occurrences/#{occurrence}"
        end

        ##
        # Create a fully-qualified Project resource string.
        #
        # The resource will be in the following format:
        #
        # `projects/{project}`
        #
        # @param project [String]
        #
        # @return [::String]
        def project_path project:
          "projects/#{project}"
        end

        extend self
      end
    end
  end
end
