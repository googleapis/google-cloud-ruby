# frozen_string_literal: true

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/support/v2/case_service_pb"

module Google
  module Cloud
    module Support
      module V2
        module CaseService
          ##
          # Client for the CaseService service.
          #
          # A service to manage Google Cloud support cases.
          #
          class Client
            include Paths

            # @private
            attr_reader :case_service_stub

            ##
            # Configure the CaseService Client class.
            #
            # See {::Google::Cloud::Support::V2::CaseService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all CaseService clients
            #   ::Google::Cloud::Support::V2::CaseService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Support", "V2"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.rpcs.get_case.timeout = 60.0
                default_config.rpcs.get_case.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.list_cases.timeout = 60.0
                default_config.rpcs.list_cases.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.search_cases.timeout = 60.0
                default_config.rpcs.search_cases.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.create_case.timeout = 60.0

                default_config.rpcs.update_case.timeout = 60.0

                default_config.rpcs.escalate_case.timeout = 60.0

                default_config.rpcs.close_case.timeout = 60.0

                default_config.rpcs.search_case_classifications.timeout = 60.0
                default_config.rpcs.search_case_classifications.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the CaseService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Support::V2::CaseService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new CaseService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Support::V2::CaseService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the CaseService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/support/v2/case_service_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @case_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Support::V2::CaseService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors,
                channel_pool_config: @config.channel_pool
              )
            end

            # Service calls

            ##
            # Retrieve the specified case.
            #
            # @overload get_case(request, options = nil)
            #   Pass arguments to `get_case` via a request object, either of type
            #   {::Google::Cloud::Support::V2::GetCaseRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::GetCaseRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_case(name: nil)
            #   Pass arguments to `get_case` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The fully qualified name of a case to be retrieved.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Support::V2::Case]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Support::V2::Case]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::GetCaseRequest.new
            #
            #   # Call the get_case method.
            #   result = client.get_case request
            #
            #   # The returned object is of type Google::Cloud::Support::V2::Case.
            #   p result
            #
            def get_case request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::GetCaseRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_case.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_case.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_case.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :get_case, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieve all cases under the specified parent.
            #
            # Note: Listing cases under an Organization returns only the cases directly
            # parented by that organization. To retrieve all cases under an organization,
            # including cases parented by projects under that organization, use
            # `cases.search`.
            #
            # @overload list_cases(request, options = nil)
            #   Pass arguments to `list_cases` via a request object, either of type
            #   {::Google::Cloud::Support::V2::ListCasesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::ListCasesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_cases(parent: nil, filter: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_cases` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The fully qualified name of parent resource to list cases under.
            #   @param filter [::String]
            #     An expression written in filter language. If non-empty, the query returns
            #     the cases that match the filter. Else, the query doesn't filter the cases.
            #
            #     Filter expressions use the following fields with the operators equals (`=`)
            #     and `AND`:
            #
            #     - `state`: The accepted values are `OPEN` or `CLOSED`.
            #     - `priority`: The accepted values are `P0`, `P1`, `P2`, `P3`, or `P4`. You
            #     can specify multiple values for priority using the `OR` operator. For
            #     example, `priority=P1 OR priority=P2`.
            #     - `creator.email`: The email address of the case creator.
            #
            #     Examples:
            #
            #     - `state=CLOSED`
            #     - `state=OPEN AND creator.email="tester@example.com"`
            #     - `state=OPEN AND (priority=P0 OR priority=P1)`
            #   @param page_size [::Integer]
            #     The maximum number of cases fetched with each request. Defaults to 10.
            #   @param page_token [::String]
            #     A token identifying the page of results to return. If unspecified, the
            #     first page is retrieved.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Support::V2::Case>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Support::V2::Case>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::ListCasesRequest.new
            #
            #   # Call the list_cases method.
            #   result = client.list_cases request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Cloud::Support::V2::Case.
            #     p item
            #   end
            #
            def list_cases request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::ListCasesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_cases.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_cases.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_cases.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :list_cases, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @case_service_stub, :list_cases, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Search cases using the specified query.
            #
            # @overload search_cases(request, options = nil)
            #   Pass arguments to `search_cases` via a request object, either of type
            #   {::Google::Cloud::Support::V2::SearchCasesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::SearchCasesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload search_cases(parent: nil, query: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `search_cases` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     The fully qualified name of parent resource to search cases under.
            #   @param query [::String]
            #     An expression written in filter language.
            #
            #     A query uses the following fields with the operators equals (`=`) and
            #     `AND`:
            #
            #     - `organization`: An organization name in the form
            #     `organizations/<organization_id>`.
            #     - `project`: A project name in the form `projects/<project_id>`.
            #     - `state`: The accepted values are `OPEN` or `CLOSED`.
            #     - `priority`: The accepted values are `P0`, `P1`, `P2`, `P3`, or `P4`. You
            #     can specify multiple values for priority using the `OR` operator. For
            #     example, `priority=P1 OR priority=P2`.
            #     - `creator.email`: The email address of the case creator.
            #     - `billingAccount`: A billing account in the form
            #     `billingAccounts/<billing_account_id>`
            #
            #     You must specify either `organization` or `project`.
            #
            #     To search across `displayName`, `description`, and comments, use a global
            #     restriction with no keyword or operator. For example, `"my search"`.
            #
            #     To search only cases updated after a certain date, use `update_time`
            #     restricted with that particular date, time, and timezone in ISO datetime
            #     format. For example, `update_time>"2020-01-01T00:00:00-05:00"`.
            #     `update_time` only supports the greater than operator (`>`).
            #
            #     Examples:
            #
            #     - `organization="organizations/123456789"`
            #     - `project="projects/my-project-id"`
            #     - `project="projects/123456789"`
            #     - `billing_account="billingAccounts/123456-A0B0C0-CUZ789"`
            #     - `organization="organizations/123456789" AND state=CLOSED`
            #     - `project="projects/my-project-id" AND creator.email="tester@example.com"`
            #     - `project="projects/my-project-id" AND (priority=P0 OR priority=P1)`
            #   @param page_size [::Integer]
            #     The maximum number of cases fetched with each request. The default page
            #     size is 10.
            #   @param page_token [::String]
            #     A token identifying the page of results to return. If unspecified, the
            #     first page is retrieved.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Support::V2::Case>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Support::V2::Case>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::SearchCasesRequest.new
            #
            #   # Call the search_cases method.
            #   result = client.search_cases request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Cloud::Support::V2::Case.
            #     p item
            #   end
            #
            def search_cases request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::SearchCasesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.search_cases.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.search_cases.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.search_cases.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :search_cases, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @case_service_stub, :search_cases, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Create a new case and associate it with the given Google Cloud Resource.
            # The case object must have the following fields set: `display_name`,
            # `description`, `classification`, and `priority`.
            #
            # @overload create_case(request, options = nil)
            #   Pass arguments to `create_case` via a request object, either of type
            #   {::Google::Cloud::Support::V2::CreateCaseRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::CreateCaseRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_case(parent: nil, case: nil)
            #   Pass arguments to `create_case` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The name of the Google Cloud Resource under which the case should
            #     be created.
            #   @param case [::Google::Cloud::Support::V2::Case, ::Hash]
            #     Required. The case to be created.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Support::V2::Case]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Support::V2::Case]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::CreateCaseRequest.new
            #
            #   # Call the create_case method.
            #   result = client.create_case request
            #
            #   # The returned object is of type Google::Cloud::Support::V2::Case.
            #   p result
            #
            def create_case request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::CreateCaseRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_case.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_case.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_case.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :create_case, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Update the specified case. Only a subset of fields can be updated.
            #
            # @overload update_case(request, options = nil)
            #   Pass arguments to `update_case` via a request object, either of type
            #   {::Google::Cloud::Support::V2::UpdateCaseRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::UpdateCaseRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_case(case: nil, update_mask: nil)
            #   Pass arguments to `update_case` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param case [::Google::Cloud::Support::V2::Case, ::Hash]
            #     Required. The case object to update.
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     A list of attributes of the case object that should be updated
            #     as part of this request. Supported values are `priority`, `display_name`,
            #     and `subscriber_email_addresses`. If no fields are specified, all supported
            #     fields are updated.
            #
            #     WARNING: If you do not provide a field mask, then you might accidentally
            #     clear some fields. For example, if you leave the field mask empty and do
            #     not provide a value for `subscriber_email_addresses`, then
            #     `subscriber_email_addresses` is updated to empty.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Support::V2::Case]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Support::V2::Case]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::UpdateCaseRequest.new
            #
            #   # Call the update_case method.
            #   result = client.update_case request
            #
            #   # The returned object is of type Google::Cloud::Support::V2::Case.
            #   p result
            #
            def update_case request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::UpdateCaseRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_case.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.case&.name
                header_params["case.name"] = request.case.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_case.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_case.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :update_case, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Escalate a case. Escalating a case will initiate the Google Cloud Support
            # escalation management process.
            #
            # This operation is only available to certain Customer Care tiers. Go to
            # https://cloud.google.com/support and look for 'Technical support
            # escalations' in the feature list to find out which tiers are able to
            # perform escalations.
            #
            # @overload escalate_case(request, options = nil)
            #   Pass arguments to `escalate_case` via a request object, either of type
            #   {::Google::Cloud::Support::V2::EscalateCaseRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::EscalateCaseRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload escalate_case(name: nil, escalation: nil)
            #   Pass arguments to `escalate_case` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The fully qualified name of the Case resource to be escalated.
            #   @param escalation [::Google::Cloud::Support::V2::Escalation, ::Hash]
            #     The escalation object to be sent with the escalation request.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Support::V2::Case]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Support::V2::Case]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::EscalateCaseRequest.new
            #
            #   # Call the escalate_case method.
            #   result = client.escalate_case request
            #
            #   # The returned object is of type Google::Cloud::Support::V2::Case.
            #   p result
            #
            def escalate_case request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::EscalateCaseRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.escalate_case.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.escalate_case.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.escalate_case.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :escalate_case, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Close the specified case.
            #
            # @overload close_case(request, options = nil)
            #   Pass arguments to `close_case` via a request object, either of type
            #   {::Google::Cloud::Support::V2::CloseCaseRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::CloseCaseRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload close_case(name: nil)
            #   Pass arguments to `close_case` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The fully qualified name of the case resource to be closed.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Support::V2::Case]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Support::V2::Case]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::CloseCaseRequest.new
            #
            #   # Call the close_case method.
            #   result = client.close_case request
            #
            #   # The returned object is of type Google::Cloud::Support::V2::Case.
            #   p result
            #
            def close_case request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::CloseCaseRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.close_case.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.close_case.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.close_case.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :close_case, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieve valid classifications to be used when creating a support case.
            # The classications are hierarchical, with each classification containing
            # all levels of the hierarchy, separated by " > ". For example "Technical
            # Issue > Compute > Compute Engine".
            #
            # @overload search_case_classifications(request, options = nil)
            #   Pass arguments to `search_case_classifications` via a request object, either of type
            #   {::Google::Cloud::Support::V2::SearchCaseClassificationsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Support::V2::SearchCaseClassificationsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload search_case_classifications(query: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `search_case_classifications` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param query [::String]
            #     An expression written in the Google Cloud filter language. If non-empty,
            #     then only cases whose fields match the filter are returned. If empty, then
            #     no messages are filtered out.
            #   @param page_size [::Integer]
            #     The maximum number of cases fetched with each request.
            #   @param page_token [::String]
            #     A token identifying the page of results to return. If unspecified, the
            #     first page is retrieved.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Support::V2::CaseClassification>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Support::V2::CaseClassification>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/support/v2"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Support::V2::CaseService::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Support::V2::SearchCaseClassificationsRequest.new
            #
            #   # Call the search_case_classifications method.
            #   result = client.search_case_classifications request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can iterate
            #   # over elements, and API calls will be issued to fetch pages as needed.
            #   result.each do |item|
            #     # Each element is of type ::Google::Cloud::Support::V2::CaseClassification.
            #     p item
            #   end
            #
            def search_case_classifications request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Support::V2::SearchCaseClassificationsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.search_case_classifications.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Support::V2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.search_case_classifications.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.search_case_classifications.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @case_service_stub.call_rpc :search_case_classifications, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @case_service_stub, :search_case_classifications, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the CaseService API.
            #
            # This class represents the configuration for CaseService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Support::V2::CaseService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # get_case to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Support::V2::CaseService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.get_case.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Support::V2::CaseService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.get_case.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"cloudsupport.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              DEFAULT_ENDPOINT = "cloudsupport.googleapis.com"

              config_attr :endpoint,      DEFAULT_ENDPOINT, ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration for the channel pool
              # @return [::Gapic::ServiceStub::ChannelPool::Configuration]
              #
              def channel_pool
                @channel_pool ||= ::Gapic::ServiceStub::ChannelPool::Configuration.new
              end

              ##
              # Configuration RPC class for the CaseService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `get_case`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_case
                ##
                # RPC-specific configuration for `list_cases`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_cases
                ##
                # RPC-specific configuration for `search_cases`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :search_cases
                ##
                # RPC-specific configuration for `create_case`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_case
                ##
                # RPC-specific configuration for `update_case`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_case
                ##
                # RPC-specific configuration for `escalate_case`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :escalate_case
                ##
                # RPC-specific configuration for `close_case`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :close_case
                ##
                # RPC-specific configuration for `search_case_classifications`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :search_case_classifications

                # @private
                def initialize parent_rpcs = nil
                  get_case_config = parent_rpcs.get_case if parent_rpcs.respond_to? :get_case
                  @get_case = ::Gapic::Config::Method.new get_case_config
                  list_cases_config = parent_rpcs.list_cases if parent_rpcs.respond_to? :list_cases
                  @list_cases = ::Gapic::Config::Method.new list_cases_config
                  search_cases_config = parent_rpcs.search_cases if parent_rpcs.respond_to? :search_cases
                  @search_cases = ::Gapic::Config::Method.new search_cases_config
                  create_case_config = parent_rpcs.create_case if parent_rpcs.respond_to? :create_case
                  @create_case = ::Gapic::Config::Method.new create_case_config
                  update_case_config = parent_rpcs.update_case if parent_rpcs.respond_to? :update_case
                  @update_case = ::Gapic::Config::Method.new update_case_config
                  escalate_case_config = parent_rpcs.escalate_case if parent_rpcs.respond_to? :escalate_case
                  @escalate_case = ::Gapic::Config::Method.new escalate_case_config
                  close_case_config = parent_rpcs.close_case if parent_rpcs.respond_to? :close_case
                  @close_case = ::Gapic::Config::Method.new close_case_config
                  search_case_classifications_config = parent_rpcs.search_case_classifications if parent_rpcs.respond_to? :search_case_classifications
                  @search_case_classifications = ::Gapic::Config::Method.new search_case_classifications_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
