# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/gkehub/v1/multiclusteringress/multiclusteringress.proto

require 'google/protobuf'


descriptor_data = "\nDgoogle/cloud/gkehub/v1/multiclusteringress/multiclusteringress.proto\x12*google.cloud.gkehub.multiclusteringress.v1\"(\n\x0b\x46\x65\x61tureSpec\x12\x19\n\x11\x63onfig_membership\x18\x01 \x01(\tB\xb9\x02\n.com.google.cloud.gkehub.multiclusteringress.v1B\x18MultiClusterIngressProtoP\x01Z`cloud.google.com/go/gkehub/multiclusteringress/apiv1/multiclusteringresspb;multiclusteringresspb\xaa\x02*Google.Cloud.GkeHub.MultiClusterIngress.V1\xca\x02*Google\\Cloud\\GkeHub\\MultiClusterIngress\\V1\xea\x02.Google::Cloud::GkeHub::MultiClusterIngress::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module GkeHub
      module MultiClusterIngress
        module V1
          FeatureSpec = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.gkehub.multiclusteringress.v1.FeatureSpec").msgclass
        end
      end
    end
  end
end
