# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/automl/v1/image.proto

require 'google/protobuf'

require 'google/api/field_behavior_pb'
require 'google/cloud/automl/v1/classification_pb'


descriptor_data = "\n\"google/cloud/automl/v1/image.proto\x12\x16google.cloud.automl.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a+google/cloud/automl/v1/classification.proto\"r\n\"ImageClassificationDatasetMetadata\x12L\n\x13\x63lassification_type\x18\x01 \x01(\x0e\x32*.google.cloud.automl.v1.ClassificationTypeB\x03\xe0\x41\x02\"%\n#ImageObjectDetectionDatasetMetadata\"\xf7\x01\n ImageClassificationModelMetadata\x12\x1a\n\rbase_model_id\x18\x01 \x01(\tB\x03\xe0\x41\x01\x12*\n\x1dtrain_budget_milli_node_hours\x18\x10 \x01(\x03\x42\x03\xe0\x41\x01\x12(\n\x1btrain_cost_milli_node_hours\x18\x11 \x01(\x03\x42\x03\xe0\x41\x03\x12\x18\n\x0bstop_reason\x18\x05 \x01(\tB\x03\xe0\x41\x03\x12\x17\n\nmodel_type\x18\x07 \x01(\tB\x03\xe0\x41\x01\x12\x15\n\x08node_qps\x18\r \x01(\x01\x42\x03\xe0\x41\x03\x12\x17\n\nnode_count\x18\x0e \x01(\x03\x42\x03\xe0\x41\x03\"\xdc\x01\n!ImageObjectDetectionModelMetadata\x12\x17\n\nmodel_type\x18\x01 \x01(\tB\x03\xe0\x41\x01\x12\x17\n\nnode_count\x18\x03 \x01(\x03\x42\x03\xe0\x41\x03\x12\x15\n\x08node_qps\x18\x04 \x01(\x01\x42\x03\xe0\x41\x03\x12\x18\n\x0bstop_reason\x18\x05 \x01(\tB\x03\xe0\x41\x03\x12*\n\x1dtrain_budget_milli_node_hours\x18\x06 \x01(\x03\x42\x03\xe0\x41\x01\x12(\n\x1btrain_cost_milli_node_hours\x18\x07 \x01(\x03\x42\x03\xe0\x41\x03\"E\n*ImageClassificationModelDeploymentMetadata\x12\x17\n\nnode_count\x18\x01 \x01(\x03\x42\x03\xe0\x41\x04\"F\n+ImageObjectDetectionModelDeploymentMetadata\x12\x17\n\nnode_count\x18\x01 \x01(\x03\x42\x03\xe0\x41\x04\x42\xac\x01\n\x1a\x63om.google.cloud.automl.v1B\nImageProtoP\x01Z2cloud.google.com/go/automl/apiv1/automlpb;automlpb\xaa\x02\x16Google.Cloud.AutoML.V1\xca\x02\x16Google\\Cloud\\AutoMl\\V1\xea\x02\x19Google::Cloud::AutoML::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module AutoML
      module V1
        ImageClassificationDatasetMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.automl.v1.ImageClassificationDatasetMetadata").msgclass
        ImageObjectDetectionDatasetMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.automl.v1.ImageObjectDetectionDatasetMetadata").msgclass
        ImageClassificationModelMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.automl.v1.ImageClassificationModelMetadata").msgclass
        ImageObjectDetectionModelMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.automl.v1.ImageObjectDetectionModelMetadata").msgclass
        ImageClassificationModelDeploymentMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.automl.v1.ImageClassificationModelDeploymentMetadata").msgclass
        ImageObjectDetectionModelDeploymentMetadata = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.automl.v1.ImageObjectDetectionModelDeploymentMetadata").msgclass
      end
    end
  end
end
