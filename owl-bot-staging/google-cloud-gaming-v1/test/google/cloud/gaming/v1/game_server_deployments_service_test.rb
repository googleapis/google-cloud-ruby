# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/cloud/gaming/v1/game_server_deployments_service_pb"
require "google/cloud/gaming/v1/game_server_deployments_service_services_pb"
require "google/cloud/gaming/v1/game_server_deployments_service"

class ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_list_game_server_deployments
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Gaming::V1::ListGameServerDeploymentsResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"
    filter = "hello world"
    order_by = "hello world"

    list_game_server_deployments_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_game_server_deployments, name
      assert_kind_of ::Google::Cloud::Gaming::V1::ListGameServerDeploymentsRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal 42, request["page_size"]
      assert_equal "hello world", request["page_token"]
      assert_equal "hello world", request["filter"]
      assert_equal "hello world", request["order_by"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_game_server_deployments_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_game_server_deployments({ parent: parent, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by }) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_game_server_deployments parent: parent, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_game_server_deployments ::Google::Cloud::Gaming::V1::ListGameServerDeploymentsRequest.new(parent: parent, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_game_server_deployments({ parent: parent, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by }, grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_game_server_deployments(::Google::Cloud::Gaming::V1::ListGameServerDeploymentsRequest.new(parent: parent, page_size: page_size, page_token: page_token, filter: filter, order_by: order_by), grpc_options) do |response, operation|
        assert_kind_of Gapic::PagedEnumerable, response
        assert_equal grpc_response, response.response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_game_server_deployments_client_stub.call_rpc_count
    end
  end

  def test_get_game_server_deployment
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Gaming::V1::GameServerDeployment.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_game_server_deployment_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_game_server_deployment, name
      assert_kind_of ::Google::Cloud::Gaming::V1::GetGameServerDeploymentRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_game_server_deployment_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_game_server_deployment({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_game_server_deployment name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_game_server_deployment ::Google::Cloud::Gaming::V1::GetGameServerDeploymentRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_game_server_deployment({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_game_server_deployment(::Google::Cloud::Gaming::V1::GetGameServerDeploymentRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_game_server_deployment_client_stub.call_rpc_count
    end
  end

  def test_create_game_server_deployment
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    deployment_id = "hello world"
    game_server_deployment = {}

    create_game_server_deployment_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_game_server_deployment, name
      assert_kind_of ::Google::Cloud::Gaming::V1::CreateGameServerDeploymentRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal "hello world", request["deployment_id"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Gaming::V1::GameServerDeployment), request["game_server_deployment"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_game_server_deployment_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_game_server_deployment({ parent: parent, deployment_id: deployment_id, game_server_deployment: game_server_deployment }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_game_server_deployment parent: parent, deployment_id: deployment_id, game_server_deployment: game_server_deployment do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_game_server_deployment ::Google::Cloud::Gaming::V1::CreateGameServerDeploymentRequest.new(parent: parent, deployment_id: deployment_id, game_server_deployment: game_server_deployment) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_game_server_deployment({ parent: parent, deployment_id: deployment_id, game_server_deployment: game_server_deployment }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_game_server_deployment(::Google::Cloud::Gaming::V1::CreateGameServerDeploymentRequest.new(parent: parent, deployment_id: deployment_id, game_server_deployment: game_server_deployment), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_game_server_deployment_client_stub.call_rpc_count
    end
  end

  def test_delete_game_server_deployment
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_game_server_deployment_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_game_server_deployment, name
      assert_kind_of ::Google::Cloud::Gaming::V1::DeleteGameServerDeploymentRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_game_server_deployment_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_game_server_deployment({ name: name }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_game_server_deployment name: name do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_game_server_deployment ::Google::Cloud::Gaming::V1::DeleteGameServerDeploymentRequest.new(name: name) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_game_server_deployment({ name: name }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_game_server_deployment(::Google::Cloud::Gaming::V1::DeleteGameServerDeploymentRequest.new(name: name), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_game_server_deployment_client_stub.call_rpc_count
    end
  end

  def test_update_game_server_deployment
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    game_server_deployment = {}
    update_mask = {}

    update_game_server_deployment_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_game_server_deployment, name
      assert_kind_of ::Google::Cloud::Gaming::V1::UpdateGameServerDeploymentRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Gaming::V1::GameServerDeployment), request["game_server_deployment"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_game_server_deployment_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_game_server_deployment({ game_server_deployment: game_server_deployment, update_mask: update_mask }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_game_server_deployment game_server_deployment: game_server_deployment, update_mask: update_mask do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_game_server_deployment ::Google::Cloud::Gaming::V1::UpdateGameServerDeploymentRequest.new(game_server_deployment: game_server_deployment, update_mask: update_mask) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_game_server_deployment({ game_server_deployment: game_server_deployment, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_game_server_deployment(::Google::Cloud::Gaming::V1::UpdateGameServerDeploymentRequest.new(game_server_deployment: game_server_deployment, update_mask: update_mask), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_game_server_deployment_client_stub.call_rpc_count
    end
  end

  def test_get_game_server_deployment_rollout
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Gaming::V1::GameServerDeploymentRollout.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_game_server_deployment_rollout_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_game_server_deployment_rollout, name
      assert_kind_of ::Google::Cloud::Gaming::V1::GetGameServerDeploymentRolloutRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_game_server_deployment_rollout_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_game_server_deployment_rollout({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_game_server_deployment_rollout name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_game_server_deployment_rollout ::Google::Cloud::Gaming::V1::GetGameServerDeploymentRolloutRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_game_server_deployment_rollout({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_game_server_deployment_rollout(::Google::Cloud::Gaming::V1::GetGameServerDeploymentRolloutRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_game_server_deployment_rollout_client_stub.call_rpc_count
    end
  end

  def test_update_game_server_deployment_rollout
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    rollout = {}
    update_mask = {}

    update_game_server_deployment_rollout_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :update_game_server_deployment_rollout, name
      assert_kind_of ::Google::Cloud::Gaming::V1::UpdateGameServerDeploymentRolloutRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Gaming::V1::GameServerDeploymentRollout), request["rollout"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, update_game_server_deployment_rollout_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.update_game_server_deployment_rollout({ rollout: rollout, update_mask: update_mask }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.update_game_server_deployment_rollout rollout: rollout, update_mask: update_mask do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.update_game_server_deployment_rollout ::Google::Cloud::Gaming::V1::UpdateGameServerDeploymentRolloutRequest.new(rollout: rollout, update_mask: update_mask) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.update_game_server_deployment_rollout({ rollout: rollout, update_mask: update_mask }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.update_game_server_deployment_rollout(::Google::Cloud::Gaming::V1::UpdateGameServerDeploymentRolloutRequest.new(rollout: rollout, update_mask: update_mask), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, update_game_server_deployment_rollout_client_stub.call_rpc_count
    end
  end

  def test_preview_game_server_deployment_rollout
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Gaming::V1::PreviewGameServerDeploymentRolloutResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    rollout = {}
    update_mask = {}
    preview_time = {}

    preview_game_server_deployment_rollout_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :preview_game_server_deployment_rollout, name
      assert_kind_of ::Google::Cloud::Gaming::V1::PreviewGameServerDeploymentRolloutRequest, request
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Gaming::V1::GameServerDeploymentRollout), request["rollout"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::FieldMask), request["update_mask"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Protobuf::Timestamp), request["preview_time"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, preview_game_server_deployment_rollout_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.preview_game_server_deployment_rollout({ rollout: rollout, update_mask: update_mask, preview_time: preview_time }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.preview_game_server_deployment_rollout rollout: rollout, update_mask: update_mask, preview_time: preview_time do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.preview_game_server_deployment_rollout ::Google::Cloud::Gaming::V1::PreviewGameServerDeploymentRolloutRequest.new(rollout: rollout, update_mask: update_mask, preview_time: preview_time) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.preview_game_server_deployment_rollout({ rollout: rollout, update_mask: update_mask, preview_time: preview_time }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.preview_game_server_deployment_rollout(::Google::Cloud::Gaming::V1::PreviewGameServerDeploymentRolloutRequest.new(rollout: rollout, update_mask: update_mask, preview_time: preview_time), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, preview_game_server_deployment_rollout_client_stub.call_rpc_count
    end
  end

  def test_fetch_deployment_state
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Gaming::V1::FetchDeploymentStateResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    fetch_deployment_state_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :fetch_deployment_state, name
      assert_kind_of ::Google::Cloud::Gaming::V1::FetchDeploymentStateRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, fetch_deployment_state_client_stub do
      # Create client
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.fetch_deployment_state({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.fetch_deployment_state name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.fetch_deployment_state ::Google::Cloud::Gaming::V1::FetchDeploymentStateRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.fetch_deployment_state({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.fetch_deployment_state(::Google::Cloud::Gaming::V1::FetchDeploymentStateRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, fetch_deployment_state_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client::Configuration, config
  end

  def test_operations_client
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    assert_kind_of ::Google::Cloud::Gaming::V1::GameServerDeploymentsService::Operations, client.operations_client
  end
end
