# frozen_string_literal: true

# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

# Require this file early so that the version constant gets defined before
# requiring "google/cloud". This is because google-cloud-core will load the
# entrypoint (gem name) file, which in turn re-requires this file (hence
# causing a require cycle) unless the version constant is already defined.
require "google/ads/ad_manager/version"

require "googleauth"

module Google
  module Ads
    module AdManager
      ##
      # Create a new client object for AdUnitService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::AdUnitService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/AdUnitService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the AdUnitService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About AdUnitService
      #
      # Provides methods for handling AdUnit objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.ad_unit_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:AdUnitService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for CompanyService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::CompanyService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/CompanyService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the CompanyService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About CompanyService
      #
      # Provides methods for handling `Company` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.company_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:CompanyService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for CustomFieldService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::CustomFieldService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/CustomFieldService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the CustomFieldService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About CustomFieldService
      #
      # Provides methods for handling `CustomField` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.custom_field_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:CustomFieldService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for CustomTargetingKeyService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::CustomTargetingKeyService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/CustomTargetingKeyService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the CustomTargetingKeyService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About CustomTargetingKeyService
      #
      # Provides methods for handling `CustomTargetingKey` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.custom_targeting_key_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:CustomTargetingKeyService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for CustomTargetingValueService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::CustomTargetingValueService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/CustomTargetingValueService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the CustomTargetingValueService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About CustomTargetingValueService
      #
      # Provides methods for handling `CustomTargetingValue` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.custom_targeting_value_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:CustomTargetingValueService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for EntitySignalsMappingService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::EntitySignalsMappingService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/EntitySignalsMappingService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the EntitySignalsMappingService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About EntitySignalsMappingService
      #
      # Provides methods for handling `EntitySignalsMapping` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.entity_signals_mapping_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:EntitySignalsMappingService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for NetworkService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::NetworkService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/NetworkService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the NetworkService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About NetworkService
      #
      # Provides methods for handling Network objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.network_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:NetworkService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for OrderService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::OrderService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/OrderService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the OrderService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About OrderService
      #
      # Provides methods for handling `Order` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.order_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:OrderService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for PlacementService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::PlacementService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/PlacementService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the PlacementService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About PlacementService
      #
      # Provides methods for handling `Placement` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.placement_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:PlacementService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for ReportService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::ReportService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/ReportService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the ReportService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About ReportService
      #
      # Provides methods for interacting with reports.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.report_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:ReportService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for RoleService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::RoleService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/RoleService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the RoleService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About RoleService
      #
      # Provides methods for handling `Role` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.role_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:RoleService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for TaxonomyCategoryService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::TaxonomyCategoryService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/TaxonomyCategoryService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the TaxonomyCategoryService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About TaxonomyCategoryService
      #
      # Provides methods for handling `TaxonomyCategory` objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.taxonomy_category_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:TaxonomyCategoryService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end

      ##
      # Create a new client object for UserService.
      #
      # By default, this returns an instance of
      # [Google::Ads::AdManager::V1::UserService::Rest::Client](https://rubydoc.info/gems/google-ads-ad_manager-v1/Google/Ads/AdManager/V1/UserService/Rest/Client)
      # for a REST client for version V1 of the API.
      # However, you can specify a different API version by passing it in the
      # `version` parameter. If the UserService service is
      # supported by that API version, and the corresponding gem is available, the
      # appropriate versioned client will be returned.
      #
      # ## About UserService
      #
      # Provides methods for handling User objects.
      #
      # @param version [::String, ::Symbol] The API version to connect to. Optional.
      #   Defaults to `:v1`.
      # @return [::Object] A client object for the specified version.
      #
      def self.user_service version: :v1, &block
        require "google/ads/ad_manager/#{version.to_s.downcase}"

        package_name = Google::Ads::AdManager
                       .constants
                       .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                       .first
        service_module = Google::Ads::AdManager.const_get(package_name).const_get(:UserService)
        service_module.const_get(:Rest).const_get(:Client).new(&block)
      end
    end
  end
end

helper_path = ::File.join __dir__, "ad_manager", "helpers.rb"
require "google/ads/ad_manager/helpers" if ::File.file? helper_path
