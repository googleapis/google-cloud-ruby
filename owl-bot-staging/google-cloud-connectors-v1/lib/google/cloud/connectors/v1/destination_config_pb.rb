# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/connectors/v1/destination_config.proto

require 'google/protobuf'


descriptor_data = "\n3google/cloud/connectors/v1/destination_config.proto\x12\x1agoogle.cloud.connectors.v1\"_\n\x11\x44\x65stinationConfig\x12\x0b\n\x03key\x18\x01 \x01(\t\x12=\n\x0c\x64\x65stinations\x18\x02 \x03(\x0b\x32\'.google.cloud.connectors.v1.Destination\"X\n\x0b\x44\x65stination\x12\x1c\n\x12service_attachment\x18\x01 \x01(\tH\x00\x12\x0e\n\x04host\x18\x02 \x01(\tH\x00\x12\x0c\n\x04port\x18\x03 \x01(\x05\x42\r\n\x0b\x64\x65stinationBBP\x01Z>cloud.google.com/go/connectors/apiv1/connectorspb;connectorspbb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module Connectors
      module V1
        DestinationConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.connectors.v1.DestinationConfig").msgclass
        Destination = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.connectors.v1.Destination").msgclass
      end
    end
  end
end
