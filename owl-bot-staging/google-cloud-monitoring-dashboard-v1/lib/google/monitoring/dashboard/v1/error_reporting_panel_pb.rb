# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/monitoring/dashboard/v1/error_reporting_panel.proto

require 'google/protobuf'


descriptor_data = "\n:google/monitoring/dashboard/v1/error_reporting_panel.proto\x12\x1egoogle.monitoring.dashboard.v1\"P\n\x13\x45rrorReportingPanel\x12\x15\n\rproject_names\x18\x01 \x03(\t\x12\x10\n\x08services\x18\x02 \x03(\t\x12\x10\n\x08versions\x18\x03 \x03(\tB\xd6\x01\n\"com.google.monitoring.dashboard.v1B\x18\x45rrorReportingPanelProtoP\x01ZFcloud.google.com/go/monitoring/dashboard/apiv1/dashboardpb;dashboardpb\xaa\x02$Google.Cloud.Monitoring.Dashboard.V1\xca\x02$Google\\Cloud\\Monitoring\\Dashboard\\V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Monitoring
    module Dashboard
      module V1
        ErrorReportingPanel = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.monitoring.dashboard.v1.ErrorReportingPanel").msgclass
      end
    end
  end
end
