# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/financialservices/v1/line_of_business.proto

require 'google/protobuf'


descriptor_data = "\n8google/cloud/financialservices/v1/line_of_business.proto\x12!google.cloud.financialservices.v1*N\n\x0eLineOfBusiness\x12 \n\x1cLINE_OF_BUSINESS_UNSPECIFIED\x10\x00\x12\x0e\n\nCOMMERCIAL\x10\x01\x12\n\n\x06RETAIL\x10\x02\x42\x82\x02\n%com.google.cloud.financialservices.v1B\x13LineOfBusinessProtoP\x01ZScloud.google.com/go/financialservices/apiv1/financialservicespb;financialservicespb\xaa\x02!Google.Cloud.FinancialServices.V1\xca\x02!Google\\Cloud\\FinancialServices\\V1\xea\x02$Google::Cloud::FinancialServices::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module FinancialServices
      module V1
        LineOfBusiness = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.financialservices.v1.LineOfBusiness").enummodule
      end
    end
  end
end
