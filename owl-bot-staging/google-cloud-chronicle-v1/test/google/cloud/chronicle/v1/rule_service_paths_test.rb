# frozen_string_literal: true

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/cloud/chronicle/v1/rule_service"

class ::Google::Cloud::Chronicle::V1::RuleService::ClientPathsTest < Minitest::Test
  class DummyStub
    def endpoint
      "endpoint.example.com"
    end
  
    def universe_domain
      "example.com"
    end

    def stub_logger
      nil
    end

    def logger
      nil
    end
  end

  def test_data_access_scope_path
    grpc_channel = ::GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    ::Gapic::ServiceStub.stub :new, DummyStub.new do
      client = ::Google::Cloud::Chronicle::V1::RuleService::Client.new do |config|
        config.credentials = grpc_channel
      end

      path = client.data_access_scope_path project: "value0", location: "value1", instance: "value2", data_access_scope: "value3"
      assert_equal "projects/value0/locations/value1/instances/value2/dataAccessScopes/value3", path
    end
  end

  def test_instance_path
    grpc_channel = ::GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    ::Gapic::ServiceStub.stub :new, DummyStub.new do
      client = ::Google::Cloud::Chronicle::V1::RuleService::Client.new do |config|
        config.credentials = grpc_channel
      end

      path = client.instance_path project: "value0", location: "value1", instance: "value2"
      assert_equal "projects/value0/locations/value1/instances/value2", path
    end
  end

  def test_reference_list_path
    grpc_channel = ::GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    ::Gapic::ServiceStub.stub :new, DummyStub.new do
      client = ::Google::Cloud::Chronicle::V1::RuleService::Client.new do |config|
        config.credentials = grpc_channel
      end

      path = client.reference_list_path project: "value0", location: "value1", instance: "value2", reference_list: "value3"
      assert_equal "projects/value0/locations/value1/instances/value2/referenceLists/value3", path
    end
  end

  def test_retrohunt_path
    grpc_channel = ::GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    ::Gapic::ServiceStub.stub :new, DummyStub.new do
      client = ::Google::Cloud::Chronicle::V1::RuleService::Client.new do |config|
        config.credentials = grpc_channel
      end

      path = client.retrohunt_path project: "value0", location: "value1", instance: "value2", rule: "value3", retrohunt: "value4"
      assert_equal "projects/value0/locations/value1/instances/value2/rules/value3/retrohunts/value4", path
    end
  end

  def test_rule_path
    grpc_channel = ::GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    ::Gapic::ServiceStub.stub :new, DummyStub.new do
      client = ::Google::Cloud::Chronicle::V1::RuleService::Client.new do |config|
        config.credentials = grpc_channel
      end

      path = client.rule_path project: "value0", location: "value1", instance: "value2", rule: "value3"
      assert_equal "projects/value0/locations/value1/instances/value2/rules/value3", path
    end
  end

  def test_rule_deployment_path
    grpc_channel = ::GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    ::Gapic::ServiceStub.stub :new, DummyStub.new do
      client = ::Google::Cloud::Chronicle::V1::RuleService::Client.new do |config|
        config.credentials = grpc_channel
      end

      path = client.rule_deployment_path project: "value0", location: "value1", instance: "value2", rule: "value3"
      assert_equal "projects/value0/locations/value1/instances/value2/rules/value3/deployment", path
    end
  end
end
