# frozen_string_literal: true

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module AIPlatform
      module V1
        module ModelService
          # Path helper methods for the ModelService API.
          module Paths
            ##
            # Create a fully-qualified Endpoint resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/endpoints/{endpoint}`
            #
            # @param project [String]
            # @param location [String]
            # @param endpoint [String]
            #
            # @return [::String]
            def endpoint_path project:, location:, endpoint:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

              "projects/#{project}/locations/#{location}/endpoints/#{endpoint}"
            end

            ##
            # Create a fully-qualified Location resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}`
            #
            # @param project [String]
            # @param location [String]
            #
            # @return [::String]
            def location_path project:, location:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"

              "projects/#{project}/locations/#{location}"
            end

            ##
            # Create a fully-qualified Model resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/models/{model}`
            #
            # @param project [String]
            # @param location [String]
            # @param model [String]
            #
            # @return [::String]
            def model_path project:, location:, model:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

              "projects/#{project}/locations/#{location}/models/#{model}"
            end

            ##
            # Create a fully-qualified ModelEvaluation resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}`
            #
            # @param project [String]
            # @param location [String]
            # @param model [String]
            # @param evaluation [String]
            #
            # @return [::String]
            def model_evaluation_path project:, location:, model:, evaluation:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"
              raise ::ArgumentError, "model cannot contain /" if model.to_s.include? "/"

              "projects/#{project}/locations/#{location}/models/#{model}/evaluations/#{evaluation}"
            end

            ##
            # Create a fully-qualified ModelEvaluationSlice resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}`
            #
            # @param project [String]
            # @param location [String]
            # @param model [String]
            # @param evaluation [String]
            # @param slice [String]
            #
            # @return [::String]
            def model_evaluation_slice_path project:, location:, model:, evaluation:, slice:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"
              raise ::ArgumentError, "model cannot contain /" if model.to_s.include? "/"
              raise ::ArgumentError, "evaluation cannot contain /" if evaluation.to_s.include? "/"

              "projects/#{project}/locations/#{location}/models/#{model}/evaluations/#{evaluation}/slices/#{slice}"
            end

            ##
            # Create a fully-qualified TrainingPipeline resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}`
            #
            # @param project [String]
            # @param location [String]
            # @param training_pipeline [String]
            #
            # @return [::String]
            def training_pipeline_path project:, location:, training_pipeline:
              raise ::ArgumentError, "project cannot contain /" if project.to_s.include? "/"
              raise ::ArgumentError, "location cannot contain /" if location.to_s.include? "/"

              "projects/#{project}/locations/#{location}/trainingPipelines/#{training_pipeline}"
            end

            extend self
          end
        end
      end
    end
  end
end
