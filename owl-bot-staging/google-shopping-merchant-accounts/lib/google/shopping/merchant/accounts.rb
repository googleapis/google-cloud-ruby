# frozen_string_literal: true

# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

# Require this file early so that the version constant gets defined before
# requiring "google/cloud". This is because google-cloud-core will load the
# entrypoint (gem name) file, which in turn re-requires this file (hence
# causing a require cycle) unless the version constant is already defined.
require "google/shopping/merchant/accounts/version"

require "googleauth"

module Google
  module Shopping
    module Merchant
      module Accounts
        ##
        # Create a new client object for AccountTaxService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::AccountTaxService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/AccountTaxService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the AccountTaxService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About AccountTaxService
        #
        # Manages account level tax setting data.
        #
        # This API defines the following resource model:
        #
        # - [AccountTax][google.shopping.merchant.accounts.v1main.AccountTax]
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.account_tax_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:AccountTaxService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for AccountIssueService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::AccountIssueService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/AccountIssueService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the AccountIssueService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About AccountIssueService
        #
        # Service to support `AccountIssueService` API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.account_issue_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:AccountIssueService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for UserService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::UserService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/UserService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the UserService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About UserService
        #
        # Service to support user API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.user_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:UserService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for AccountsService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::AccountsService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/AccountsService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the AccountsService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About AccountsService
        #
        # Service to support Accounts API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.accounts_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:AccountsService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for BusinessIdentityService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::BusinessIdentityService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/BusinessIdentityService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the BusinessIdentityService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About BusinessIdentityService
        #
        # Service to support [business
        # identity](https://support.google.com/merchants/answer/12564247) API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.business_identity_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:BusinessIdentityService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for BusinessInfoService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::BusinessInfoService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/BusinessInfoService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the BusinessInfoService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About BusinessInfoService
        #
        # Service to support business info API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.business_info_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:BusinessInfoService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for EmailPreferencesService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::EmailPreferencesService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/EmailPreferencesService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the EmailPreferencesService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About EmailPreferencesService
        #
        # Service to support the `EmailPreferences` API.
        #
        # This service only permits retrieving and updating email preferences for the
        # authenticated user.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.email_preferences_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:EmailPreferencesService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for HomepageService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::HomepageService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/HomepageService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the HomepageService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About HomepageService
        #
        # Service to support an API for a store's homepage.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.homepage_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:HomepageService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for OnlineReturnPolicyService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::OnlineReturnPolicyService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/OnlineReturnPolicyService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the OnlineReturnPolicyService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About OnlineReturnPolicyService
        #
        # The service facilitates the management of a merchant's remorse return policy
        # configuration, encompassing return policies for both ads and free listings
        # ## programs. This API defines the following resource model:
        #
        # [OnlineReturnPolicy][google.shopping.merchant.accounts.v1.OnlineReturnPolicy]
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.online_return_policy_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:OnlineReturnPolicyService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for ProgramsService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::ProgramsService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/ProgramsService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the ProgramsService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About ProgramsService
        #
        # Service for program management.
        #
        # Programs provide a mechanism for adding functionality to merchant accounts. A
        # typical example of this is the [Free product
        # listings](https://support.google.com/merchants/topic/9240261?ref_topic=7257954,7259405,&sjid=796648681813264022-EU)
        # program, which enables products from a merchant's store to be shown across
        # Google for free.
        #
        # This service exposes methods to retrieve a merchant's
        # participation in all available programs, in addition to methods for
        # explicitly enabling or disabling participation in each program.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.programs_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:ProgramsService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for RegionsService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::RegionsService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/RegionsService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the RegionsService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About RegionsService
        #
        # Manages regions configuration.
        #
        # This API defines the following resource model:
        #
        # - [Region][google.shopping.merchant.accounts.v1main.Region]
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.regions_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:RegionsService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for ShippingSettingsService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::ShippingSettingsService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/ShippingSettingsService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the ShippingSettingsService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About ShippingSettingsService
        #
        # Service to get method call shipping setting information per Merchant API
        # method.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.shipping_settings_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:ShippingSettingsService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for TermsOfServiceService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::TermsOfServiceService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/TermsOfServiceService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the TermsOfServiceService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About TermsOfServiceService
        #
        # Service to support `TermsOfService` API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.terms_of_service_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:TermsOfServiceService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Create a new client object for TermsOfServiceAgreementStateService.
        #
        # By default, this returns an instance of
        # [Google::Shopping::Merchant::Accounts::V1beta::TermsOfServiceAgreementStateService::Client](https://rubydoc.info/gems/google-shopping-merchant-accounts-v1beta/Google/Shopping/Merchant/Accounts/V1beta/TermsOfServiceAgreementStateService/Client)
        # for a gRPC client for version V1beta of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the TermsOfServiceAgreementStateService service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # ## About TermsOfServiceAgreementStateService
        #
        # Service to support `TermsOfServiceAgreementState` API.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.terms_of_service_agreement_state_service version: :v1beta, transport: :grpc, &block
          require "google/shopping/merchant/accounts/#{version.to_s.downcase}"

          package_name = Google::Shopping::Merchant::Accounts
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Shopping::Merchant::Accounts.const_get(package_name).const_get(:TermsOfServiceAgreementStateService)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end
      end
    end
  end
end

helper_path = ::File.join __dir__, "accounts", "helpers.rb"
require "google/shopping/merchant/accounts/helpers" if ::File.file? helper_path
