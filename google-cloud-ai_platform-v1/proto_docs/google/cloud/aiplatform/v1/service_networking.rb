# frozen_string_literal: true

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!


module Google
  module Cloud
    module AIPlatform
      module V1
        # Represents configuration for private service connect.
        # @!attribute [rw] enable_private_service_connect
        #   @return [::Boolean]
        #     Required. If true, expose the IndexEndpoint via private service connect.
        # @!attribute [rw] project_allowlist
        #   @return [::Array<::String>]
        #     A list of Projects from which the forwarding rule will target the service
        #     attachment.
        class PrivateServiceConnectConfig
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end

        # PscAutomatedEndpoints defines the output of the forwarding rule
        # automatically created by each PscAutomationConfig.
        # @!attribute [rw] project_id
        #   @return [::String]
        #     Corresponding project_id in pscAutomationConfigs
        # @!attribute [rw] network
        #   @return [::String]
        #     Corresponding network in pscAutomationConfigs.
        # @!attribute [rw] match_address
        #   @return [::String]
        #     Ip Address created by the automated forwarding rule.
        class PscAutomatedEndpoints
          include ::Google::Protobuf::MessageExts
          extend ::Google::Protobuf::MessageExts::ClassMethods
        end
      end
    end
  end
end
