# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"

require "gapic/grpc/service_stub"

require "google/monitoring/metricsscope/v1/metrics_scopes_pb"
require "google/monitoring/metricsscope/v1/metrics_scopes_services_pb"
require "google/cloud/monitoring/metrics_scope/v1/metrics_scopes"

class ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_rpc_count, :requests

    def initialize response, operation, &block
      @response = response
      @operation = operation
      @block = block
      @call_rpc_count = 0
      @requests = []
    end

    def call_rpc *args, **kwargs
      @call_rpc_count += 1

      @requests << @block&.call(*args, **kwargs)

      yield @response, @operation if block_given?

      @response
    end
  end

  def test_get_metrics_scope
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScope.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_metrics_scope_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :get_metrics_scope, name
      assert_kind_of ::Google::Cloud::Monitoring::MetricsScope::V1::GetMetricsScopeRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, get_metrics_scope_client_stub do
      # Create client
      client = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.get_metrics_scope({ name: name }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.get_metrics_scope name: name do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.get_metrics_scope ::Google::Cloud::Monitoring::MetricsScope::V1::GetMetricsScopeRequest.new(name: name) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.get_metrics_scope({ name: name }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.get_metrics_scope(::Google::Cloud::Monitoring::MetricsScope::V1::GetMetricsScopeRequest.new(name: name), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, get_metrics_scope_client_stub.call_rpc_count
    end
  end

  def test_list_metrics_scopes_by_monitored_project
    # Create GRPC objects.
    grpc_response = ::Google::Cloud::Monitoring::MetricsScope::V1::ListMetricsScopesByMonitoredProjectResponse.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    monitored_resource_container = "hello world"

    list_metrics_scopes_by_monitored_project_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :list_metrics_scopes_by_monitored_project, name
      assert_kind_of ::Google::Cloud::Monitoring::MetricsScope::V1::ListMetricsScopesByMonitoredProjectRequest, request
      assert_equal "hello world", request["monitored_resource_container"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, list_metrics_scopes_by_monitored_project_client_stub do
      # Create client
      client = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.list_metrics_scopes_by_monitored_project({ monitored_resource_container: monitored_resource_container }) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.list_metrics_scopes_by_monitored_project monitored_resource_container: monitored_resource_container do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.list_metrics_scopes_by_monitored_project ::Google::Cloud::Monitoring::MetricsScope::V1::ListMetricsScopesByMonitoredProjectRequest.new(monitored_resource_container: monitored_resource_container) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.list_metrics_scopes_by_monitored_project({ monitored_resource_container: monitored_resource_container }, grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.list_metrics_scopes_by_monitored_project(::Google::Cloud::Monitoring::MetricsScope::V1::ListMetricsScopesByMonitoredProjectRequest.new(monitored_resource_container: monitored_resource_container), grpc_options) do |response, operation|
        assert_equal grpc_response, response
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, list_metrics_scopes_by_monitored_project_client_stub.call_rpc_count
    end
  end

  def test_create_monitored_project
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    monitored_project = {}

    create_monitored_project_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :create_monitored_project, name
      assert_kind_of ::Google::Cloud::Monitoring::MetricsScope::V1::CreateMonitoredProjectRequest, request
      assert_equal "hello world", request["parent"]
      assert_equal Gapic::Protobuf.coerce({}, to: ::Google::Cloud::Monitoring::MetricsScope::V1::MonitoredProject), request["monitored_project"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, create_monitored_project_client_stub do
      # Create client
      client = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.create_monitored_project({ parent: parent, monitored_project: monitored_project }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.create_monitored_project parent: parent, monitored_project: monitored_project do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.create_monitored_project ::Google::Cloud::Monitoring::MetricsScope::V1::CreateMonitoredProjectRequest.new(parent: parent, monitored_project: monitored_project) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.create_monitored_project({ parent: parent, monitored_project: monitored_project }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.create_monitored_project(::Google::Cloud::Monitoring::MetricsScope::V1::CreateMonitoredProjectRequest.new(parent: parent, monitored_project: monitored_project), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, create_monitored_project_client_stub.call_rpc_count
    end
  end

  def test_delete_monitored_project
    # Create GRPC objects.
    grpc_response = ::Google::Longrunning::Operation.new
    grpc_operation = GRPC::ActiveCall::Operation.new nil
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure
    grpc_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_monitored_project_client_stub = ClientStub.new grpc_response, grpc_operation do |name, request, options:|
      assert_equal :delete_monitored_project, name
      assert_kind_of ::Google::Cloud::Monitoring::MetricsScope::V1::DeleteMonitoredProjectRequest, request
      assert_equal "hello world", request["name"]
      refute_nil options
    end

    Gapic::ServiceStub.stub :new, delete_monitored_project_client_stub do
      # Create client
      client = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client.new do |config|
        config.credentials = grpc_channel
      end

      # Use hash object
      client.delete_monitored_project({ name: name }) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use named arguments
      client.delete_monitored_project name: name do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object
      client.delete_monitored_project ::Google::Cloud::Monitoring::MetricsScope::V1::DeleteMonitoredProjectRequest.new(name: name) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use hash object with options
      client.delete_monitored_project({ name: name }, grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Use protobuf object with options
      client.delete_monitored_project(::Google::Cloud::Monitoring::MetricsScope::V1::DeleteMonitoredProjectRequest.new(name: name), grpc_options) do |response, operation|
        assert_kind_of Gapic::Operation, response
        assert_equal grpc_response, response.grpc_op
        assert_equal grpc_operation, operation
      end

      # Verify method calls
      assert_equal 5, delete_monitored_project_client_stub.call_rpc_count
    end
  end

  def test_configure
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = block_config = config = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client::Configuration, config
  end

  def test_operations_client
    grpc_channel = GRPC::Core::Channel.new "localhost:8888", nil, :this_channel_is_insecure

    client = nil
    Gapic::ServiceStub.stub :new, nil do
      client = ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Client.new do |config|
        config.credentials = grpc_channel
      end
    end

    assert_kind_of ::Google::Cloud::Monitoring::MetricsScope::V1::MetricsScopes::Operations, client.operations_client
  end
end
