# frozen_string_literal: true

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

# Require this file early so that the version constant gets defined before
# requiring "google/cloud". This is because google-cloud-core will load the
# entrypoint (gem name) file, which in turn re-requires this file (hence
# causing a require cycle) unless the version constant is already defined.
require "google/cloud/saas_platform/saas_service_mgmt/version"

require "googleauth"
gem "google-cloud-core"
require "google/cloud" unless defined? ::Google::Cloud.new
require "google/cloud/config"

# Set the default configuration
::Google::Cloud.configure.add_config! :saas_platform_saas_service_mgmt do |config|
  config.add_field! :endpoint,      nil, match: ::String
  config.add_field! :credentials,   nil, match: [::String, ::Hash, ::Google::Auth::Credentials]
  config.add_field! :scope,         nil, match: [::Array, ::String]
  config.add_field! :lib_name,      nil, match: ::String
  config.add_field! :lib_version,   nil, match: ::String
  config.add_field! :interceptors,  nil, match: ::Array
  config.add_field! :timeout,       nil, match: ::Numeric
  config.add_field! :metadata,      nil, match: ::Hash
  config.add_field! :retry_policy,  nil, match: [::Hash, ::Proc]
  config.add_field! :quota_project, nil, match: ::String
  config.add_field! :universe_domain, nil, match: ::String
end

module Google
  module Cloud
    module SaasPlatform
      module SaasServiceMgmt
        ##
        # Create a new client object for SaasDeployments.
        #
        # By default, this returns an instance of
        # [Google::Cloud::SaasPlatform::SaasServiceMgmt::V1beta1::SaasDeployments::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-saas_platform-saas_service_mgmt-v1beta1/latest/Google-Cloud-SaasPlatform-SaasServiceMgmt-V1beta1-SaasDeployments-Client)
        # for a gRPC client for version V1beta1 of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the SaasDeployments service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # Raises an exception if the currently installed versioned client gem for the
        # given API version does not support the given transport of the SaasDeployments service.
        # You can determine whether the method will succeed by calling
        # {Google::Cloud::SaasPlatform::SaasServiceMgmt.saas_deployments_available?}.
        #
        # ## About SaasDeployments
        #
        # Manages the deployment of SaaS services.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta1`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.saas_deployments version: :v1beta1, transport: :grpc, &block
          require "google/cloud/saas_platform/saas_service_mgmt/#{version.to_s.downcase}"

          package_name = Google::Cloud::SaasPlatform::SaasServiceMgmt
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Cloud::SaasPlatform::SaasServiceMgmt.const_get(package_name).const_get(:SaasDeployments)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Determines whether the SaasDeployments service is supported by the current client.
        # If true, you can retrieve a client object by calling {Google::Cloud::SaasPlatform::SaasServiceMgmt.saas_deployments}.
        # If false, that method will raise an exception. This could happen if the given
        # API version does not exist or does not support the SaasDeployments service,
        # or if the versioned client gem needs an update to support the SaasDeployments service.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta1`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [boolean] Whether the service is available.
        #
        def self.saas_deployments_available? version: :v1beta1, transport: :grpc
          require "google/cloud/saas_platform/saas_service_mgmt/#{version.to_s.downcase}"
          package_name = Google::Cloud::SaasPlatform::SaasServiceMgmt
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          return false unless package_name
          service_module = Google::Cloud::SaasPlatform::SaasServiceMgmt.const_get package_name
          return false unless service_module.const_defined? :SaasDeployments
          service_module = service_module.const_get :SaasDeployments
          if transport == :rest
            return false unless service_module.const_defined? :Rest
            service_module = service_module.const_get :Rest
          end
          service_module.const_defined? :Client
        rescue ::LoadError
          false
        end

        ##
        # Create a new client object for SaasRollouts.
        #
        # By default, this returns an instance of
        # [Google::Cloud::SaasPlatform::SaasServiceMgmt::V1beta1::SaasRollouts::Client](https://cloud.google.com/ruby/docs/reference/google-cloud-saas_platform-saas_service_mgmt-v1beta1/latest/Google-Cloud-SaasPlatform-SaasServiceMgmt-V1beta1-SaasRollouts-Client)
        # for a gRPC client for version V1beta1 of the API.
        # However, you can specify a different API version by passing it in the
        # `version` parameter. If the SaasRollouts service is
        # supported by that API version, and the corresponding gem is available, the
        # appropriate versioned client will be returned.
        # You can also specify a different transport by passing `:rest` or `:grpc` in
        # the `transport` parameter.
        #
        # Raises an exception if the currently installed versioned client gem for the
        # given API version does not support the given transport of the SaasRollouts service.
        # You can determine whether the method will succeed by calling
        # {Google::Cloud::SaasPlatform::SaasServiceMgmt.saas_rollouts_available?}.
        #
        # ## About SaasRollouts
        #
        # Manages the rollout of SaaS services.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta1`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [::Object] A client object for the specified version.
        #
        def self.saas_rollouts version: :v1beta1, transport: :grpc, &block
          require "google/cloud/saas_platform/saas_service_mgmt/#{version.to_s.downcase}"

          package_name = Google::Cloud::SaasPlatform::SaasServiceMgmt
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          service_module = Google::Cloud::SaasPlatform::SaasServiceMgmt.const_get(package_name).const_get(:SaasRollouts)
          service_module = service_module.const_get(:Rest) if transport == :rest
          service_module.const_get(:Client).new(&block)
        end

        ##
        # Determines whether the SaasRollouts service is supported by the current client.
        # If true, you can retrieve a client object by calling {Google::Cloud::SaasPlatform::SaasServiceMgmt.saas_rollouts}.
        # If false, that method will raise an exception. This could happen if the given
        # API version does not exist or does not support the SaasRollouts service,
        # or if the versioned client gem needs an update to support the SaasRollouts service.
        #
        # @param version [::String, ::Symbol] The API version to connect to. Optional.
        #   Defaults to `:v1beta1`.
        # @param transport [:grpc, :rest] The transport to use. Defaults to `:grpc`.
        # @return [boolean] Whether the service is available.
        #
        def self.saas_rollouts_available? version: :v1beta1, transport: :grpc
          require "google/cloud/saas_platform/saas_service_mgmt/#{version.to_s.downcase}"
          package_name = Google::Cloud::SaasPlatform::SaasServiceMgmt
                         .constants
                         .select { |sym| sym.to_s.downcase == version.to_s.downcase.tr("_", "") }
                         .first
          return false unless package_name
          service_module = Google::Cloud::SaasPlatform::SaasServiceMgmt.const_get package_name
          return false unless service_module.const_defined? :SaasRollouts
          service_module = service_module.const_get :SaasRollouts
          if transport == :rest
            return false unless service_module.const_defined? :Rest
            service_module = service_module.const_get :Rest
          end
          service_module.const_defined? :Client
        rescue ::LoadError
          false
        end

        ##
        # Configure the google-cloud-saas_platform-saas_service_mgmt library.
        #
        # The following configuration parameters are supported:
        #
        # * `credentials` (*type:* `String, Hash, Google::Auth::Credentials`) -
        #   The path to the keyfile as a String, the contents of the keyfile as a
        #   Hash, or a Google::Auth::Credentials object.
        # * `lib_name` (*type:* `String`) -
        #   The library name as recorded in instrumentation and logging.
        # * `lib_version` (*type:* `String`) -
        #   The library version as recorded in instrumentation and logging.
        # * `interceptors` (*type:* `Array<GRPC::ClientInterceptor>`) -
        #   An array of interceptors that are run before calls are executed.
        # * `timeout` (*type:* `Numeric`) -
        #   Default timeout in seconds.
        # * `metadata` (*type:* `Hash{Symbol=>String}`) -
        #   Additional headers to be sent with the call.
        # * `retry_policy` (*type:* `Hash`) -
        #   The retry policy. The value is a hash with the following keys:
        #     * `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
        #     * `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
        #     * `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
        #     * `:retry_codes` (*type:* `Array<String>`) -
        #       The error codes that should trigger a retry.
        #
        # @return [::Google::Cloud::Config] The default configuration used by this library
        #
        def self.configure
          yield ::Google::Cloud.configure.saas_platform_saas_service_mgmt if block_given?

          ::Google::Cloud.configure.saas_platform_saas_service_mgmt
        end
      end
    end
  end
end

helper_path = ::File.join __dir__, "saas_service_mgmt", "helpers.rb"
require "google/cloud/saas_platform/saas_service_mgmt/helpers" if ::File.file? helper_path
