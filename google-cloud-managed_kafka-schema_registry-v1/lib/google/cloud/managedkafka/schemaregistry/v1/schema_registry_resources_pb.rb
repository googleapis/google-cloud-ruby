# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/managedkafka/schemaregistry/v1/schema_registry_resources.proto

require 'google/protobuf'

require 'google/api/field_behavior_pb'
require 'google/api/resource_pb'


descriptor_data = "\nKgoogle/cloud/managedkafka/schemaregistry/v1/schema_registry_resources.proto\x12+google.cloud.managedkafka.schemaregistry.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\"\x89\x02\n\x0eSchemaRegistry\x12\x11\n\x04name\x18\x01 \x01(\tB\x03\xe0\x41\x08\x12\x43\n\x08\x63ontexts\x18\x02 \x03(\tB1\xe0\x41\x03\xfa\x41+\n)managedkafka.googleapis.com/SchemaContext:\x9e\x01\xea\x41\x9a\x01\n*managedkafka.googleapis.com/SchemaRegistry\x12Jprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}*\x10schemaRegistries2\x0eschemaRegistry\"\x85\x02\n\x07\x43ontext\x12\x11\n\x04name\x18\x01 \x01(\tB\x03\xe0\x41\x08\x12\x43\n\x08subjects\x18\x02 \x03(\tB1\xe0\x41\x01\xfa\x41+\n)managedkafka.googleapis.com/SchemaSubject:\xa1\x01\xea\x41\x9d\x01\n)managedkafka.googleapis.com/SchemaContext\x12]projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}*\x08\x63ontexts2\x07\x63ontext\"\x90\x05\n\x06Schema\x12X\n\x0bschema_type\x18\x01 \x01(\x0e\x32>.google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaTypeB\x03\xe0\x41\x01\x12\x1e\n\x0eschema_payload\x18\x02 \x01(\tR\x06schema\x12\\\n\nreferences\x18\x03 \x03(\x0b\x32\x43.google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReferenceB\x03\xe0\x41\x01\x1aP\n\x0fSchemaReference\x12\x11\n\x04name\x18\x01 \x01(\tB\x03\xe0\x41\x02\x12\x14\n\x07subject\x18\x02 \x01(\tB\x03\xe0\x41\x02\x12\x14\n\x07version\x18\x03 \x01(\x05\x42\x03\xe0\x41\x02\"K\n\nSchemaType\x12\x1b\n\x17SCHEMA_TYPE_UNSPECIFIED\x10\x00\x12\x08\n\x04\x41VRO\x10\x01\x12\x08\n\x04JSON\x10\x02\x12\x0c\n\x08PROTOBUF\x10\x03:\x8e\x02\xea\x41\x8a\x02\n\"managedkafka.googleapis.com/Schema\x12_projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/schemas/ids/{schema}\x12rprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/schemas/ids/{schema}*\x07schemas2\x06schema\"\xfd\x02\n\rSchemaSubject\x12\x11\n\x04name\x18\x01 \x01(\tB\x03\xe0\x41\x08\x12\x43\n\x08versions\x18\x03 \x03(\tB1\xe0\x41\x01\xfa\x41+\n)managedkafka.googleapis.com/SchemaVersion:\x93\x02\xea\x41\x8f\x02\n)managedkafka.googleapis.com/SchemaSubject\x12]projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}\x12pprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}*\x08subjects2\x07subject\"\x91\t\n\rSchemaVersion\x12\x14\n\x07subject\x18\x01 \x01(\tB\x03\xe0\x41\x02\x12 \n\nversion_id\x18\x02 \x01(\x05\x42\x03\xe0\x41\x02R\x07version\x12\x1a\n\tschema_id\x18\x03 \x01(\x05\x42\x03\xe0\x41\x02R\x02id\x12X\n\x0bschema_type\x18\x04 \x01(\x0e\x32>.google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaTypeB\x03\xe0\x41\x01\x12#\n\x0eschema_payload\x18\x05 \x01(\tB\x03\xe0\x41\x02R\x06schema\x12\\\n\nreferences\x18\x06 \x03(\x0b\x32\x43.google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReferenceB\x03\xe0\x41\x01:\xce\x06\xea\x41\xca\x06\n)managedkafka.googleapis.com/SchemaVersion\x12pprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/subjects/{subject}/versions/{version}\x12\x83\x01projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/subjects/{subject}/versions/{version}\x12tprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions\x12\x87\x01projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/compatibility/subjects/{subject}/versions\x12~projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}\x12\x91\x01projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/compatibility/subjects/{subject}/versions/{version}*\x08versions2\x07version\"\xa0\x06\n\x0cSchemaConfig\x12l\n\rcompatibility\x18\x01 \x01(\x0e\x32K.google.cloud.managedkafka.schemaregistry.v1.SchemaConfig.CompatibilityTypeB\x03\xe0\x41\x02H\x00\x88\x01\x01\x12\x1b\n\tnormalize\x18\x02 \x01(\x08\x42\x03\xe0\x41\x01H\x01\x88\x01\x01\x12\x12\n\x05\x61lias\x18\x03 \x01(\tB\x03\xe0\x41\x01\"\x88\x01\n\x11\x43ompatibilityType\x12\x08\n\x04NONE\x10\x00\x12\x0c\n\x08\x42\x41\x43KWARD\x10\x01\x12\x17\n\x13\x42\x41\x43KWARD_TRANSITIVE\x10\x02\x12\x0b\n\x07\x46ORWARD\x10\x03\x12\x16\n\x12\x46ORWARD_TRANSITIVE\x10\x04\x12\x08\n\x04\x46ULL\x10\x05\x12\x13\n\x0f\x46ULL_TRANSITIVE\x10\x06:\xc5\x03\xea\x41\xc1\x03\n(managedkafka.googleapis.com/SchemaConfig\x12Qprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/config\x12[projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/config/{subject}\x12\x64projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/config\x12nprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/config/{subject}*\x07\x63onfigs2\x06\x63onfigB\x10\n\x0e_compatibilityB\x0c\n\n_normalize\"\xda\x04\n\nSchemaMode\x12S\n\x04mode\x18\x01 \x01(\x0e\x32@.google.cloud.managedkafka.schemaregistry.v1.SchemaMode.ModeTypeB\x03\xe0\x41\x02\"=\n\x08ModeType\x12\x08\n\x04NONE\x10\x00\x12\x0c\n\x08READONLY\x10\x01\x12\r\n\tREADWRITE\x10\x02\x12\n\n\x06IMPORT\x10\x03:\xb7\x03\xea\x41\xb3\x03\n&managedkafka.googleapis.com/SchemaMode\x12Oprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/mode\x12Yprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/mode/{subject}\x12\x62projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/mode\x12lprojects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}/mode/{subject}*\x05modes2\x04modeB\xb8\x02\n/com.google.cloud.managedkafka.schemaregistry.v1B\x1cSchemaRegistryResourcesProtoP\x01ZWcloud.google.com/go/managedkafka/schemaregistry/apiv1/schemaregistrypb;schemaregistrypb\xaa\x02+Google.Cloud.ManagedKafka.SchemaRegistry.V1\xca\x02+Google\\Cloud\\ManagedKafka\\SchemaRegistry\\V1\xea\x02/Google::Cloud::ManagedKafka::SchemaRegistry::V1b\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module ManagedKafka
      module SchemaRegistry
        module V1
          SchemaRegistry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaRegistry").msgclass
          Context = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.Context").msgclass
          Schema = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.Schema").msgclass
          Schema::SchemaReference = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaReference").msgclass
          Schema::SchemaType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.Schema.SchemaType").enummodule
          SchemaSubject = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaSubject").msgclass
          SchemaVersion = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaVersion").msgclass
          SchemaConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaConfig").msgclass
          SchemaConfig::CompatibilityType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaConfig.CompatibilityType").enummodule
          SchemaMode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaMode").msgclass
          SchemaMode::ModeType = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.managedkafka.schemaregistry.v1.SchemaMode.ModeType").enummodule
        end
      end
    end
  end
end
