# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/spanner/admin/instance/v1/spanner_instance_admin_pb"

module Google
  module Cloud
    module Spanner
      module Admin
        module Instance
          module V1
            module InstanceAdmin
              ##
              # Client for the InstanceAdmin service.
              #
              # Cloud Spanner Instance Admin API
              #
              # The Cloud Spanner Instance Admin API can be used to create, delete,
              # modify and list instances. Instances are dedicated Cloud Spanner serving
              # and storage resources to be used by Cloud Spanner databases.
              #
              # Each instance has a "configuration", which dictates where the
              # serving resources for the Cloud Spanner instance are located (e.g.,
              # US-central, Europe). Configurations are created by Google based on
              # resource availability.
              #
              # Cloud Spanner billing is based on the instances that exist and their
              # sizes. After an instance exists, there are no additional
              # per-database or per-operation charges for use of the instance
              # (though there may be additional network bandwidth charges).
              # Instances offer isolation: problems with databases in one instance
              # will not affect other instances. However, within an instance
              # databases can affect each other. For example, if one database in an
              # instance receives a lot of requests and consumes most of the
              # instance resources, fewer resources are available for other
              # databases in that instance, and their performance may suffer.
              #
              class Client
                include Paths

                # @private
                attr_reader :instance_admin_stub

                ##
                # Configure the InstanceAdmin Client class.
                #
                # See {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client::Configuration}
                # for a description of the configuration fields.
                #
                # @example
                #
                #   # Modify the configuration for all InstanceAdmin clients
                #   ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.configure do |config|
                #     config.timeout = 10.0
                #   end
                #
                # @yield [config] Configure the Client client.
                # @yieldparam config [Client::Configuration]
                #
                # @return [Client::Configuration]
                #
                def self.configure
                  @configure ||= begin
                    namespace = ["Google", "Cloud", "Spanner", "Admin", "Instance", "V1"]
                    parent_config = while namespace.any?
                                      parent_name = namespace.join "::"
                                      parent_const = const_get parent_name
                                      break parent_const.configure if parent_const.respond_to? :configure
                                      namespace.pop
                                    end
                    default_config = Client::Configuration.new parent_config

                    default_config.rpcs.list_instance_configs.timeout = 3600.0
                    default_config.rpcs.list_instance_configs.retry_policy = {
                      initial_delay: 1.0, max_delay: 32.0, multiplier: 1.3, retry_codes: [14, 4]
                    }

                    default_config.rpcs.get_instance_config.timeout = 3600.0
                    default_config.rpcs.get_instance_config.retry_policy = {
                      initial_delay: 1.0, max_delay: 32.0, multiplier: 1.3, retry_codes: [14, 4]
                    }

                    default_config.rpcs.list_instances.timeout = 3600.0
                    default_config.rpcs.list_instances.retry_policy = {
                      initial_delay: 1.0, max_delay: 32.0, multiplier: 1.3, retry_codes: [14, 4]
                    }

                    default_config.rpcs.get_instance.timeout = 3600.0
                    default_config.rpcs.get_instance.retry_policy = {
                      initial_delay: 1.0, max_delay: 32.0, multiplier: 1.3, retry_codes: [14, 4]
                    }

                    default_config.rpcs.create_instance.timeout = 3600.0

                    default_config.rpcs.update_instance.timeout = 3600.0

                    default_config.rpcs.delete_instance.timeout = 3600.0
                    default_config.rpcs.delete_instance.retry_policy = {
                      initial_delay: 1.0, max_delay: 32.0, multiplier: 1.3, retry_codes: [14, 4]
                    }

                    default_config.rpcs.set_iam_policy.timeout = 30.0

                    default_config.rpcs.get_iam_policy.timeout = 30.0
                    default_config.rpcs.get_iam_policy.retry_policy = {
                      initial_delay: 1.0, max_delay: 32.0, multiplier: 1.3, retry_codes: [14, 4]
                    }

                    default_config.rpcs.test_iam_permissions.timeout = 30.0

                    default_config
                  end
                  yield @configure if block_given?
                  @configure
                end

                ##
                # Configure the InstanceAdmin Client instance.
                #
                # The configuration is set to the derived mode, meaning that values can be changed,
                # but structural changes (adding new fields, etc.) are not allowed. Structural changes
                # should be made on {Client.configure}.
                #
                # See {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client::Configuration}
                # for a description of the configuration fields.
                #
                # @yield [config] Configure the Client client.
                # @yieldparam config [Client::Configuration]
                #
                # @return [Client::Configuration]
                #
                def configure
                  yield @config if block_given?
                  @config
                end

                ##
                # Create a new InstanceAdmin client object.
                #
                # @example
                #
                #   # Create a client using the default configuration
                #   client = ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a client using a custom configuration
                #   client = ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new do |config|
                #     config.timeout = 10.0
                #   end
                #
                # @yield [config] Configure the InstanceAdmin client.
                # @yieldparam config [Client::Configuration]
                #
                def initialize
                  # These require statements are intentionally placed here to initialize
                  # the gRPC module only when it's required.
                  # See https://github.com/googleapis/toolkit/issues/446
                  require "gapic/grpc"
                  require "google/spanner/admin/instance/v1/spanner_instance_admin_services_pb"

                  # Create the configuration object
                  @config = Configuration.new Client.configure

                  # Yield the configuration if needed
                  yield @config if block_given?

                  # Create credentials
                  credentials = @config.credentials
                  # Use self-signed JWT if the endpoint is unchanged from default,
                  # but only if the default endpoint does not have a region prefix.
                  enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                           !@config.endpoint.split(".").first.include?("-")
                  credentials ||= Credentials.default scope: @config.scope,
                                                      enable_self_signed_jwt: enable_self_signed_jwt
                  if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                    credentials = Credentials.new credentials, scope: @config.scope
                  end
                  @quota_project_id = @config.quota_project
                  @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                  @operations_client = Operations.new do |config|
                    config.credentials = credentials
                    config.quota_project = @quota_project_id
                    config.endpoint = @config.endpoint
                  end

                  @instance_admin_stub = ::Gapic::ServiceStub.new(
                    ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Stub,
                    credentials:  credentials,
                    endpoint:     @config.endpoint,
                    channel_args: @config.channel_args,
                    interceptors: @config.interceptors
                  )
                end

                ##
                # Get the associated client for long-running operations.
                #
                # @return [::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Operations]
                #
                attr_reader :operations_client

                # Service calls

                ##
                # Lists the supported instance configurations for a given project.
                #
                # @overload list_instance_configs(request, options = nil)
                #   Pass arguments to `list_instance_configs` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigsRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigsRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload list_instance_configs(parent: nil, page_size: nil, page_token: nil)
                #   Pass arguments to `list_instance_configs` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     Required. The name of the project for which a list of supported instance
                #     configurations is requested. Values are of the form
                #     `projects/<project>`.
                #   @param page_size [::Integer]
                #     Number of instance configurations to be returned in the response. If 0 or
                #     less, defaults to the server's maximum allowed page size.
                #   @param page_token [::String]
                #     If non-empty, `page_token` should contain a
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigsResponse#next_page_token next_page_token}
                #     from a previous
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigsResponse ListInstanceConfigsResponse}.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig>]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::PagedEnumerable<::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig>]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigsRequest.new
                #
                #   # Call the list_instance_configs method.
                #   result = client.list_instance_configs request
                #
                #   # The returned object is of type Gapic::PagedEnumerable. You can
                #   # iterate over all elements by calling #each, and the enumerable
                #   # will lazily make API calls to fetch subsequent pages. Other
                #   # methods are also available for managing paging directly.
                #   result.each do |response|
                #     # Each element is of type ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig.
                #     p response
                #   end
                #
                def list_instance_configs request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigsRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.list_instance_configs.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.list_instance_configs.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.list_instance_configs.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :list_instance_configs, request, options: options do |response, operation|
                    response = ::Gapic::PagedEnumerable.new @instance_admin_stub, :list_instance_configs, request, response, operation, options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Gets information about a particular instance configuration.
                #
                # @overload get_instance_config(request, options = nil)
                #   Pass arguments to `get_instance_config` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceConfigRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceConfigRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload get_instance_config(name: nil)
                #   Pass arguments to `get_instance_config` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     Required. The name of the requested instance configuration. Values are of
                #     the form `projects/<project>/instanceConfigs/<config>`.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceConfigRequest.new
                #
                #   # Call the get_instance_config method.
                #   result = client.get_instance_config request
                #
                #   # The returned object is of type Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig.
                #   p result
                #
                def get_instance_config request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceConfigRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.get_instance_config.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.get_instance_config.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.get_instance_config.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :get_instance_config, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Creates an instance config and begins preparing it to be used. The
                # returned {::Google::Longrunning::Operation long-running operation}
                # can be used to track the progress of preparing the new
                # instance config. The instance config name is assigned by the caller. If the
                # named instance config already exists, `CreateInstanceConfig` returns
                # `ALREADY_EXISTS`.
                #
                # Immediately after the request returns:
                #
                #   * The instance config is readable via the API, with all requested
                #     attributes. The instance config's
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#reconciling reconciling}
                #     field is set to true. Its state is `CREATING`.
                #
                # While the operation is pending:
                #
                #   * Cancelling the operation renders the instance config immediately
                #     unreadable via the API.
                #   * Except for deleting the creating resource, all other attempts to modify
                #     the instance config are rejected.
                #
                # Upon completion of the returned operation:
                #
                #   * Instances can be created using the instance configuration.
                #   * The instance config's
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#reconciling reconciling}
                #   field becomes false. Its state becomes `READY`.
                #
                # The returned {::Google::Longrunning::Operation long-running operation} will
                # have a name of the format
                # `<instance_config_name>/operations/<operation_id>` and can be used to track
                # creation of the instance config. The
                # {::Google::Longrunning::Operation#metadata metadata} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigMetadata CreateInstanceConfigMetadata}.
                # The {::Google::Longrunning::Operation#response response} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig InstanceConfig}, if
                # successful.
                #
                # Authorization requires `spanner.instanceConfigs.create` permission on
                # the resource
                # {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigRequest#parent parent}.
                #
                # @overload create_instance_config(request, options = nil)
                #   Pass arguments to `create_instance_config` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload create_instance_config(parent: nil, instance_config_id: nil, instance_config: nil, validate_only: nil)
                #   Pass arguments to `create_instance_config` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     Required. The name of the project in which to create the instance config.
                #     Values are of the form `projects/<project>`.
                #   @param instance_config_id [::String]
                #     Required. The ID of the instance config to create.  Valid identifiers are
                #     of the form `custom-[-a-z0-9]*[a-z0-9]` and must be between 2 and 64
                #     characters in length. The `custom-` prefix is required to avoid name
                #     conflicts with Google managed configurations.
                #   @param instance_config [::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig, ::Hash]
                #     Required. The InstanceConfig proto of the configuration to create.
                #     instance_config.name must be
                #     `<parent>/instanceConfigs/<instance_config_id>`.
                #     instance_config.base_config must be a Google managed configuration name,
                #     e.g. <parent>/instanceConfigs/us-east1, <parent>/instanceConfigs/nam3.
                #   @param validate_only [::Boolean]
                #     An option to validate, but not actually execute, a request,
                #     and provide the same response.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigRequest.new
                #
                #   # Call the create_instance_config method.
                #   result = client.create_instance_config request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def create_instance_config request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.create_instance_config.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.create_instance_config.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.create_instance_config.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :create_instance_config, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Updates an instance config. The returned
                # {::Google::Longrunning::Operation long-running operation} can be used to track
                # the progress of updating the instance. If the named instance config does
                # not exist, returns `NOT_FOUND`.
                #
                # Only user managed configurations can be updated.
                #
                # Immediately after the request returns:
                #
                #   * The instance config's
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#reconciling reconciling}
                #     field is set to true.
                #
                # While the operation is pending:
                #
                #   * Cancelling the operation sets its metadata's
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigMetadata#cancel_time cancel_time}.
                #     The operation is guaranteed to succeed at undoing all changes, after
                #     which point it terminates with a `CANCELLED` status.
                #   * All other attempts to modify the instance config are rejected.
                #   * Reading the instance config via the API continues to give the
                #     pre-request values.
                #
                # Upon completion of the returned operation:
                #
                #   * Creating instances using the instance configuration uses the new
                #     values.
                #   * The instance config's new values are readable via the API.
                #   * The instance config's
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#reconciling reconciling}
                #   field becomes false.
                #
                # The returned {::Google::Longrunning::Operation long-running operation} will
                # have a name of the format
                # `<instance_config_name>/operations/<operation_id>` and can be used to track
                # the instance config modification.  The
                # {::Google::Longrunning::Operation#metadata metadata} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigMetadata UpdateInstanceConfigMetadata}.
                # The {::Google::Longrunning::Operation#response response} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig InstanceConfig}, if
                # successful.
                #
                # Authorization requires `spanner.instanceConfigs.update` permission on
                # the resource {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#name name}.
                #
                # @overload update_instance_config(request, options = nil)
                #   Pass arguments to `update_instance_config` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload update_instance_config(instance_config: nil, update_mask: nil, validate_only: nil)
                #   Pass arguments to `update_instance_config` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param instance_config [::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig, ::Hash]
                #     Required. The user instance config to update, which must always include the
                #     instance config name. Otherwise, only fields mentioned in
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigRequest#update_mask update_mask}
                #     need be included. To prevent conflicts of concurrent updates,
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#reconciling etag} can
                #     be used.
                #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
                #     Required. A mask specifying which fields in
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig InstanceConfig} should be
                #     updated. The field mask must always be specified; this prevents any future
                #     fields in {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig InstanceConfig}
                #     from being erased accidentally by clients that do not know about them. Only
                #     display_name and labels can be updated.
                #   @param validate_only [::Boolean]
                #     An option to validate, but not actually execute, a request,
                #     and provide the same response.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigRequest.new
                #
                #   # Call the update_instance_config method.
                #   result = client.update_instance_config request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def update_instance_config request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceConfigRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.update_instance_config.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.instance_config&.name
                    header_params["instance_config.name"] = request.instance_config.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.update_instance_config.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.update_instance_config.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :update_instance_config, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Deletes the instance config. Deletion is only allowed when no
                # instances are using the configuration. If any instances are using
                # the config, returns `FAILED_PRECONDITION`.
                #
                # Only user managed configurations can be deleted.
                #
                # Authorization requires `spanner.instanceConfigs.delete` permission on
                # the resource {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceConfig#name name}.
                #
                # @overload delete_instance_config(request, options = nil)
                #   Pass arguments to `delete_instance_config` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceConfigRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceConfigRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload delete_instance_config(name: nil, etag: nil, validate_only: nil)
                #   Pass arguments to `delete_instance_config` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     Required. The name of the instance configuration to be deleted.
                #     Values are of the form
                #     `projects/<project>/instanceConfigs/<instance_config>`
                #   @param etag [::String]
                #     Used for optimistic concurrency control as a way to help prevent
                #     simultaneous deletes of an instance config from overwriting each
                #     other. If not empty, the API
                #     only deletes the instance config when the etag provided matches the current
                #     status of the requested instance config. Otherwise, deletes the instance
                #     config without checking the current status of the requested instance
                #     config.
                #   @param validate_only [::Boolean]
                #     An option to validate, but not actually execute, a request,
                #     and provide the same response.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Protobuf::Empty]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Protobuf::Empty]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceConfigRequest.new
                #
                #   # Call the delete_instance_config method.
                #   result = client.delete_instance_config request
                #
                #   # The returned object is of type Google::Protobuf::Empty.
                #   p result
                #
                def delete_instance_config request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceConfigRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.delete_instance_config.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.delete_instance_config.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.delete_instance_config.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :delete_instance_config, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Lists the user-managed instance config [long-running
                # operations][google.longrunning.Operation] in the given project. An instance
                # config operation has a name of the form
                # `projects/<project>/instanceConfigs/<instance_config>/operations/<operation>`.
                # The long-running operation
                # {::Google::Longrunning::Operation#metadata metadata} field type
                # `metadata.type_url` describes the type of the metadata. Operations returned
                # include those that have completed/failed/canceled within the last 7 days,
                # and pending operations. Operations returned are ordered by
                # `operation.metadata.value.start_time` in descending order starting
                # from the most recently started operation.
                #
                # @overload list_instance_config_operations(request, options = nil)
                #   Pass arguments to `list_instance_config_operations` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigOperationsRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigOperationsRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload list_instance_config_operations(parent: nil, filter: nil, page_size: nil, page_token: nil)
                #   Pass arguments to `list_instance_config_operations` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     Required. The project of the instance config operations.
                #     Values are of the form `projects/<project>`.
                #   @param filter [::String]
                #     An expression that filters the list of returned operations.
                #
                #     A filter expression consists of a field name, a
                #     comparison operator, and a value for filtering.
                #     The value must be a string, a number, or a boolean. The comparison operator
                #     must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
                #     Colon `:` is the contains operator. Filter rules are not case sensitive.
                #
                #     The following fields in the {::Google::Longrunning::Operation Operation}
                #     are eligible for filtering:
                #
                #       * `name` - The name of the long-running operation
                #       * `done` - False if the operation is in progress, else true.
                #       * `metadata.@type` - the type of metadata. For example, the type string
                #          for
                #          {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigMetadata CreateInstanceConfigMetadata}
                #          is
                #          `type.googleapis.com/google.spanner.admin.instance.v1.CreateInstanceConfigMetadata`.
                #       * `metadata.<field_name>` - any field in metadata.value.
                #          `metadata.@type` must be specified first, if filtering on metadata
                #          fields.
                #       * `error` - Error associated with the long-running operation.
                #       * `response.@type` - the type of response.
                #       * `response.<field_name>` - any field in response.value.
                #
                #     You can combine multiple expressions by enclosing each expression in
                #     parentheses. By default, expressions are combined with AND logic. However,
                #     you can specify AND, OR, and NOT logic explicitly.
                #
                #     Here are a few examples:
                #
                #       * `done:true` - The operation is complete.
                #       * `(metadata.@type=` \
                #         `type.googleapis.com/google.spanner.admin.instance.v1.CreateInstanceConfigMetadata)
                #         AND` \
                #         `(metadata.instance_config.name:custom-config) AND` \
                #         `(metadata.progress.start_time < \"2021-03-28T14:50:00Z\") AND` \
                #         `(error:*)` - Return operations where:
                #         * The operation's metadata type is
                #         {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceConfigMetadata CreateInstanceConfigMetadata}.
                #         * The instance config name contains "custom-config".
                #         * The operation started before 2021-03-28T14:50:00Z.
                #         * The operation resulted in an error.
                #   @param page_size [::Integer]
                #     Number of operations to be returned in the response. If 0 or
                #     less, defaults to the server's maximum allowed page size.
                #   @param page_token [::String]
                #     If non-empty, `page_token` should contain a
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigOperationsResponse#next_page_token next_page_token}
                #     from a previous
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigOperationsResponse ListInstanceConfigOperationsResponse}
                #     to the same `parent` and with the same `filter`.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::PagedEnumerable<::Gapic::Operation>]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::PagedEnumerable<::Gapic::Operation>]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigOperationsRequest.new
                #
                #   # Call the list_instance_config_operations method.
                #   result = client.list_instance_config_operations request
                #
                #   # The returned object is of type Gapic::PagedEnumerable. You can
                #   # iterate over all elements by calling #each, and the enumerable
                #   # will lazily make API calls to fetch subsequent pages. Other
                #   # methods are also available for managing paging directly.
                #   result.each do |response|
                #     # Each element is of type ::Google::Longrunning::Operation.
                #     p response
                #   end
                #
                def list_instance_config_operations request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::ListInstanceConfigOperationsRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.list_instance_config_operations.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.list_instance_config_operations.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.list_instance_config_operations.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :list_instance_config_operations, request, options: options do |response, operation|
                    wrap_lro_operation = ->(op_response) { ::Gapic::Operation.new op_response, @operations_client }
                    response = ::Gapic::PagedEnumerable.new @instance_admin_stub, :list_instance_config_operations, request, response, operation, options, format_resource: wrap_lro_operation
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Lists all instances in the given project.
                #
                # @overload list_instances(request, options = nil)
                #   Pass arguments to `list_instances` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstancesRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::ListInstancesRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload list_instances(parent: nil, page_size: nil, page_token: nil, filter: nil)
                #   Pass arguments to `list_instances` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     Required. The name of the project for which a list of instances is
                #     requested. Values are of the form `projects/<project>`.
                #   @param page_size [::Integer]
                #     Number of instances to be returned in the response. If 0 or less, defaults
                #     to the server's maximum allowed page size.
                #   @param page_token [::String]
                #     If non-empty, `page_token` should contain a
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstancesResponse#next_page_token next_page_token}
                #     from a previous
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::ListInstancesResponse ListInstancesResponse}.
                #   @param filter [::String]
                #     An expression for filtering the results of the request. Filter rules are
                #     case insensitive. The fields eligible for filtering are:
                #
                #       * `name`
                #       * `display_name`
                #       * `labels.key` where key is the name of a label
                #
                #     Some examples of using filters are:
                #
                #       * `name:*` --> The instance has a name.
                #       * `name:Howl` --> The instance's name contains the string "howl".
                #       * `name:HOWL` --> Equivalent to above.
                #       * `NAME:howl` --> Equivalent to above.
                #       * `labels.env:*` --> The instance has the label "env".
                #       * `labels.env:dev` --> The instance has the label "env" and the value of
                #                            the label contains the string "dev".
                #       * `name:howl labels.env:dev` --> The instance's name contains "howl" and
                #                                      it has the label "env" with its value
                #                                      containing "dev".
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Spanner::Admin::Instance::V1::Instance>]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::PagedEnumerable<::Google::Cloud::Spanner::Admin::Instance::V1::Instance>]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::ListInstancesRequest.new
                #
                #   # Call the list_instances method.
                #   result = client.list_instances request
                #
                #   # The returned object is of type Gapic::PagedEnumerable. You can
                #   # iterate over all elements by calling #each, and the enumerable
                #   # will lazily make API calls to fetch subsequent pages. Other
                #   # methods are also available for managing paging directly.
                #   result.each do |response|
                #     # Each element is of type ::Google::Cloud::Spanner::Admin::Instance::V1::Instance.
                #     p response
                #   end
                #
                def list_instances request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::ListInstancesRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.list_instances.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.list_instances.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.list_instances.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :list_instances, request, options: options do |response, operation|
                    response = ::Gapic::PagedEnumerable.new @instance_admin_stub, :list_instances, request, response, operation, options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Gets information about a particular instance.
                #
                # @overload get_instance(request, options = nil)
                #   Pass arguments to `get_instance` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload get_instance(name: nil, field_mask: nil)
                #   Pass arguments to `get_instance` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     Required. The name of the requested instance. Values are of the form
                #     `projects/<project>/instances/<instance>`.
                #   @param field_mask [::Google::Protobuf::FieldMask, ::Hash]
                #     If field_mask is present, specifies the subset of
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::Instance Instance} fields that should be
                #     returned. If absent, all
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::Instance Instance} fields are returned.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Cloud::Spanner::Admin::Instance::V1::Instance]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Cloud::Spanner::Admin::Instance::V1::Instance]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceRequest.new
                #
                #   # Call the get_instance method.
                #   result = client.get_instance request
                #
                #   # The returned object is of type Google::Cloud::Spanner::Admin::Instance::V1::Instance.
                #   p result
                #
                def get_instance request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::GetInstanceRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.get_instance.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.get_instance.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.get_instance.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :get_instance, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Creates an instance and begins preparing it to begin serving. The
                # returned {::Google::Longrunning::Operation long-running operation}
                # can be used to track the progress of preparing the new
                # instance. The instance name is assigned by the caller. If the
                # named instance already exists, `CreateInstance` returns
                # `ALREADY_EXISTS`.
                #
                # Immediately upon completion of this request:
                #
                #   * The instance is readable via the API, with all requested attributes
                #     but no allocated resources. Its state is `CREATING`.
                #
                # Until completion of the returned operation:
                #
                #   * Cancelling the operation renders the instance immediately unreadable
                #     via the API.
                #   * The instance can be deleted.
                #   * All other attempts to modify the instance are rejected.
                #
                # Upon completion of the returned operation:
                #
                #   * Billing for all successfully-allocated resources begins (some types
                #     may have lower than the requested levels).
                #   * Databases can be created in the instance.
                #   * The instance's allocated resource levels are readable via the API.
                #   * The instance's state becomes `READY`.
                #
                # The returned {::Google::Longrunning::Operation long-running operation} will
                # have a name of the format `<instance_name>/operations/<operation_id>` and
                # can be used to track creation of the instance.  The
                # {::Google::Longrunning::Operation#metadata metadata} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceMetadata CreateInstanceMetadata}.
                # The {::Google::Longrunning::Operation#response response} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::Instance Instance}, if successful.
                #
                # @overload create_instance(request, options = nil)
                #   Pass arguments to `create_instance` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload create_instance(parent: nil, instance_id: nil, instance: nil)
                #   Pass arguments to `create_instance` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     Required. The name of the project in which to create the instance. Values
                #     are of the form `projects/<project>`.
                #   @param instance_id [::String]
                #     Required. The ID of the instance to create.  Valid identifiers are of the
                #     form `[a-z][-a-z0-9]*[a-z0-9]` and must be between 2 and 64 characters in
                #     length.
                #   @param instance [::Google::Cloud::Spanner::Admin::Instance::V1::Instance, ::Hash]
                #     Required. The instance to create.  The name may be omitted, but if
                #     specified must be `<parent>/instances/<instance_id>`.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceRequest.new
                #
                #   # Call the create_instance method.
                #   result = client.create_instance request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def create_instance request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::CreateInstanceRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.create_instance.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.create_instance.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.create_instance.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :create_instance, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Updates an instance, and begins allocating or releasing resources
                # as requested. The returned [long-running
                # operation][google.longrunning.Operation] can be used to track the
                # progress of updating the instance. If the named instance does not
                # exist, returns `NOT_FOUND`.
                #
                # Immediately upon completion of this request:
                #
                #   * For resource types for which a decrease in the instance's allocation
                #     has been requested, billing is based on the newly-requested level.
                #
                # Until completion of the returned operation:
                #
                #   * Cancelling the operation sets its metadata's
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceMetadata#cancel_time cancel_time},
                #     and begins restoring resources to their pre-request values. The
                #     operation is guaranteed to succeed at undoing all resource changes,
                #     after which point it terminates with a `CANCELLED` status.
                #   * All other attempts to modify the instance are rejected.
                #   * Reading the instance via the API continues to give the pre-request
                #     resource levels.
                #
                # Upon completion of the returned operation:
                #
                #   * Billing begins for all successfully-allocated resources (some types
                #     may have lower than the requested levels).
                #   * All newly-reserved resources are available for serving the instance's
                #     tables.
                #   * The instance's new resource levels are readable via the API.
                #
                # The returned {::Google::Longrunning::Operation long-running operation} will
                # have a name of the format `<instance_name>/operations/<operation_id>` and
                # can be used to track the instance modification.  The
                # {::Google::Longrunning::Operation#metadata metadata} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceMetadata UpdateInstanceMetadata}.
                # The {::Google::Longrunning::Operation#response response} field type is
                # {::Google::Cloud::Spanner::Admin::Instance::V1::Instance Instance}, if successful.
                #
                # Authorization requires `spanner.instances.update` permission on
                # the resource {::Google::Cloud::Spanner::Admin::Instance::V1::Instance#name name}.
                #
                # @overload update_instance(request, options = nil)
                #   Pass arguments to `update_instance` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload update_instance(instance: nil, field_mask: nil)
                #   Pass arguments to `update_instance` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param instance [::Google::Cloud::Spanner::Admin::Instance::V1::Instance, ::Hash]
                #     Required. The instance to update, which must always include the instance
                #     name.  Otherwise, only fields mentioned in
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceRequest#field_mask field_mask}
                #     need be included.
                #   @param field_mask [::Google::Protobuf::FieldMask, ::Hash]
                #     Required. A mask specifying which fields in
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::Instance Instance} should be updated.
                #     The field mask must always be specified; this prevents any future fields in
                #     {::Google::Cloud::Spanner::Admin::Instance::V1::Instance Instance} from being erased
                #     accidentally by clients that do not know about them.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceRequest.new
                #
                #   # Call the update_instance method.
                #   result = client.update_instance request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def update_instance request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::UpdateInstanceRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.update_instance.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.instance&.name
                    header_params["instance.name"] = request.instance.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.update_instance.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.update_instance.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :update_instance, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Deletes an instance.
                #
                # Immediately upon completion of the request:
                #
                #   * Billing ceases for all of the instance's reserved resources.
                #
                # Soon afterward:
                #
                #   * The instance and *all of its databases* immediately and
                #     irrevocably disappear from the API. All data in the databases
                #     is permanently deleted.
                #
                # @overload delete_instance(request, options = nil)
                #   Pass arguments to `delete_instance` via a request object, either of type
                #   {::Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload delete_instance(name: nil)
                #   Pass arguments to `delete_instance` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     Required. The name of the instance to be deleted. Values are of the form
                #     `projects/<project>/instances/<instance>`
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Protobuf::Empty]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Protobuf::Empty]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceRequest.new
                #
                #   # Call the delete_instance method.
                #   result = client.delete_instance request
                #
                #   # The returned object is of type Google::Protobuf::Empty.
                #   p result
                #
                def delete_instance request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Spanner::Admin::Instance::V1::DeleteInstanceRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.delete_instance.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.delete_instance.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.delete_instance.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :delete_instance, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Sets the access control policy on an instance resource. Replaces any
                # existing policy.
                #
                # Authorization requires `spanner.instances.setIamPolicy` on
                # {::Google::Iam::V1::SetIamPolicyRequest#resource resource}.
                #
                # @overload set_iam_policy(request, options = nil)
                #   Pass arguments to `set_iam_policy` via a request object, either of type
                #   {::Google::Iam::V1::SetIamPolicyRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Iam::V1::SetIamPolicyRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload set_iam_policy(resource: nil, policy: nil, update_mask: nil)
                #   Pass arguments to `set_iam_policy` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param resource [::String]
                #     REQUIRED: The resource for which the policy is being specified.
                #     See the operation documentation for the appropriate value for this field.
                #   @param policy [::Google::Iam::V1::Policy, ::Hash]
                #     REQUIRED: The complete policy to be applied to the `resource`. The size of
                #     the policy is limited to a few 10s of KB. An empty policy is a
                #     valid policy but certain Cloud Platform services (such as Projects)
                #     might reject them.
                #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
                #     OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
                #     the fields in the mask will be modified. If no mask is provided, the
                #     following default mask is used:
                #
                #     `paths: "bindings, etag"`
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Iam::V1::Policy]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Iam::V1::Policy]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Iam::V1::SetIamPolicyRequest.new
                #
                #   # Call the set_iam_policy method.
                #   result = client.set_iam_policy request
                #
                #   # The returned object is of type Google::Iam::V1::Policy.
                #   p result
                #
                def set_iam_policy request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::V1::SetIamPolicyRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.set_iam_policy.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.resource
                    header_params["resource"] = request.resource
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.set_iam_policy.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.set_iam_policy.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :set_iam_policy, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Gets the access control policy for an instance resource. Returns an empty
                # policy if an instance exists but does not have a policy set.
                #
                # Authorization requires `spanner.instances.getIamPolicy` on
                # {::Google::Iam::V1::GetIamPolicyRequest#resource resource}.
                #
                # @overload get_iam_policy(request, options = nil)
                #   Pass arguments to `get_iam_policy` via a request object, either of type
                #   {::Google::Iam::V1::GetIamPolicyRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Iam::V1::GetIamPolicyRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload get_iam_policy(resource: nil, options: nil)
                #   Pass arguments to `get_iam_policy` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param resource [::String]
                #     REQUIRED: The resource for which the policy is being requested.
                #     See the operation documentation for the appropriate value for this field.
                #   @param options [::Google::Iam::V1::GetPolicyOptions, ::Hash]
                #     OPTIONAL: A `GetPolicyOptions` object for specifying options to
                #     `GetIamPolicy`.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Iam::V1::Policy]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Iam::V1::Policy]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Iam::V1::GetIamPolicyRequest.new
                #
                #   # Call the get_iam_policy method.
                #   result = client.get_iam_policy request
                #
                #   # The returned object is of type Google::Iam::V1::Policy.
                #   p result
                #
                def get_iam_policy request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::V1::GetIamPolicyRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.get_iam_policy.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.resource
                    header_params["resource"] = request.resource
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.get_iam_policy.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.get_iam_policy.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :get_iam_policy, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Returns permissions that the caller has on the specified instance resource.
                #
                # Attempting this RPC on a non-existent Cloud Spanner instance resource will
                # result in a NOT_FOUND error if the user has `spanner.instances.list`
                # permission on the containing Google Cloud Project. Otherwise returns an
                # empty set of permissions.
                #
                # @overload test_iam_permissions(request, options = nil)
                #   Pass arguments to `test_iam_permissions` via a request object, either of type
                #   {::Google::Iam::V1::TestIamPermissionsRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Iam::V1::TestIamPermissionsRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload test_iam_permissions(resource: nil, permissions: nil)
                #   Pass arguments to `test_iam_permissions` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param resource [::String]
                #     REQUIRED: The resource for which the policy detail is being requested.
                #     See the operation documentation for the appropriate value for this field.
                #   @param permissions [::Array<::String>]
                #     The set of permissions to check for the `resource`. Permissions with
                #     wildcards (such as '*' or 'storage.*') are not allowed. For more
                #     information see
                #     [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Iam::V1::TestIamPermissionsResponse]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Iam::V1::TestIamPermissionsResponse]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/spanner/admin/instance/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Iam::V1::TestIamPermissionsRequest.new
                #
                #   # Call the test_iam_permissions method.
                #   result = client.test_iam_permissions request
                #
                #   # The returned object is of type Google::Iam::V1::TestIamPermissionsResponse.
                #   p result
                #
                def test_iam_permissions request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Iam::V1::TestIamPermissionsRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.test_iam_permissions.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Spanner::Admin::Instance::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.resource
                    header_params["resource"] = request.resource
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.test_iam_permissions.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.test_iam_permissions.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @instance_admin_stub.call_rpc :test_iam_permissions, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Configuration class for the InstanceAdmin API.
                #
                # This class represents the configuration for InstanceAdmin,
                # providing control over timeouts, retry behavior, logging, transport
                # parameters, and other low-level controls. Certain parameters can also be
                # applied individually to specific RPCs. See
                # {::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client::Configuration::Rpcs}
                # for a list of RPCs that can be configured independently.
                #
                # Configuration can be applied globally to all clients, or to a single client
                # on construction.
                #
                # @example
                #
                #   # Modify the global config, setting the timeout for
                #   # list_instance_configs to 20 seconds,
                #   # and all remaining timeouts to 10 seconds.
                #   ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.configure do |config|
                #     config.timeout = 10.0
                #     config.rpcs.list_instance_configs.timeout = 20.0
                #   end
                #
                #   # Apply the above configuration only to a new client.
                #   client = ::Google::Cloud::Spanner::Admin::Instance::V1::InstanceAdmin::Client.new do |config|
                #     config.timeout = 10.0
                #     config.rpcs.list_instance_configs.timeout = 20.0
                #   end
                #
                # @!attribute [rw] endpoint
                #   The hostname or hostname:port of the service endpoint.
                #   Defaults to `"spanner.googleapis.com"`.
                #   @return [::String]
                # @!attribute [rw] credentials
                #   Credentials to send with calls. You may provide any of the following types:
                #    *  (`String`) The path to a service account key file in JSON format
                #    *  (`Hash`) A service account key as a Hash
                #    *  (`Google::Auth::Credentials`) A googleauth credentials object
                #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
                #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
                #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
                #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
                #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
                #    *  (`nil`) indicating no credentials
                #   @return [::Object]
                # @!attribute [rw] scope
                #   The OAuth scopes
                #   @return [::Array<::String>]
                # @!attribute [rw] lib_name
                #   The library name as recorded in instrumentation and logging
                #   @return [::String]
                # @!attribute [rw] lib_version
                #   The library version as recorded in instrumentation and logging
                #   @return [::String]
                # @!attribute [rw] channel_args
                #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
                #   `GRPC::Core::Channel` object is provided as the credential.
                #   @return [::Hash]
                # @!attribute [rw] interceptors
                #   An array of interceptors that are run before calls are executed.
                #   @return [::Array<::GRPC::ClientInterceptor>]
                # @!attribute [rw] timeout
                #   The call timeout in seconds.
                #   @return [::Numeric]
                # @!attribute [rw] metadata
                #   Additional gRPC headers to be sent with the call.
                #   @return [::Hash{::Symbol=>::String}]
                # @!attribute [rw] retry_policy
                #   The retry policy. The value is a hash with the following keys:
                #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #       trigger a retry.
                #   @return [::Hash]
                # @!attribute [rw] quota_project
                #   A separate project against which to charge quota.
                #   @return [::String]
                #
                class Configuration
                  extend ::Gapic::Config

                  config_attr :endpoint,      "spanner.googleapis.com", ::String
                  config_attr :credentials,   nil do |value|
                    allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                    allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                    allowed.any? { |klass| klass === value }
                  end
                  config_attr :scope,         nil, ::String, ::Array, nil
                  config_attr :lib_name,      nil, ::String, nil
                  config_attr :lib_version,   nil, ::String, nil
                  config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                  config_attr :interceptors,  nil, ::Array, nil
                  config_attr :timeout,       nil, ::Numeric, nil
                  config_attr :metadata,      nil, ::Hash, nil
                  config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                  config_attr :quota_project, nil, ::String, nil

                  # @private
                  def initialize parent_config = nil
                    @parent_config = parent_config unless parent_config.nil?

                    yield self if block_given?
                  end

                  ##
                  # Configurations for individual RPCs
                  # @return [Rpcs]
                  #
                  def rpcs
                    @rpcs ||= begin
                      parent_rpcs = nil
                      parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                      Rpcs.new parent_rpcs
                    end
                  end

                  ##
                  # Configuration RPC class for the InstanceAdmin API.
                  #
                  # Includes fields providing the configuration for each RPC in this service.
                  # Each configuration object is of type `Gapic::Config::Method` and includes
                  # the following configuration fields:
                  #
                  #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                  #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                  #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                  #     include the following keys:
                  #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                  #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                  #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                  #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                  #         trigger a retry.
                  #
                  class Rpcs
                    ##
                    # RPC-specific configuration for `list_instance_configs`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :list_instance_configs
                    ##
                    # RPC-specific configuration for `get_instance_config`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :get_instance_config
                    ##
                    # RPC-specific configuration for `create_instance_config`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :create_instance_config
                    ##
                    # RPC-specific configuration for `update_instance_config`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :update_instance_config
                    ##
                    # RPC-specific configuration for `delete_instance_config`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :delete_instance_config
                    ##
                    # RPC-specific configuration for `list_instance_config_operations`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :list_instance_config_operations
                    ##
                    # RPC-specific configuration for `list_instances`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :list_instances
                    ##
                    # RPC-specific configuration for `get_instance`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :get_instance
                    ##
                    # RPC-specific configuration for `create_instance`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :create_instance
                    ##
                    # RPC-specific configuration for `update_instance`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :update_instance
                    ##
                    # RPC-specific configuration for `delete_instance`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :delete_instance
                    ##
                    # RPC-specific configuration for `set_iam_policy`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :set_iam_policy
                    ##
                    # RPC-specific configuration for `get_iam_policy`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :get_iam_policy
                    ##
                    # RPC-specific configuration for `test_iam_permissions`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :test_iam_permissions

                    # @private
                    def initialize parent_rpcs = nil
                      list_instance_configs_config = parent_rpcs.list_instance_configs if parent_rpcs.respond_to? :list_instance_configs
                      @list_instance_configs = ::Gapic::Config::Method.new list_instance_configs_config
                      get_instance_config_config = parent_rpcs.get_instance_config if parent_rpcs.respond_to? :get_instance_config
                      @get_instance_config = ::Gapic::Config::Method.new get_instance_config_config
                      create_instance_config_config = parent_rpcs.create_instance_config if parent_rpcs.respond_to? :create_instance_config
                      @create_instance_config = ::Gapic::Config::Method.new create_instance_config_config
                      update_instance_config_config = parent_rpcs.update_instance_config if parent_rpcs.respond_to? :update_instance_config
                      @update_instance_config = ::Gapic::Config::Method.new update_instance_config_config
                      delete_instance_config_config = parent_rpcs.delete_instance_config if parent_rpcs.respond_to? :delete_instance_config
                      @delete_instance_config = ::Gapic::Config::Method.new delete_instance_config_config
                      list_instance_config_operations_config = parent_rpcs.list_instance_config_operations if parent_rpcs.respond_to? :list_instance_config_operations
                      @list_instance_config_operations = ::Gapic::Config::Method.new list_instance_config_operations_config
                      list_instances_config = parent_rpcs.list_instances if parent_rpcs.respond_to? :list_instances
                      @list_instances = ::Gapic::Config::Method.new list_instances_config
                      get_instance_config = parent_rpcs.get_instance if parent_rpcs.respond_to? :get_instance
                      @get_instance = ::Gapic::Config::Method.new get_instance_config
                      create_instance_config = parent_rpcs.create_instance if parent_rpcs.respond_to? :create_instance
                      @create_instance = ::Gapic::Config::Method.new create_instance_config
                      update_instance_config = parent_rpcs.update_instance if parent_rpcs.respond_to? :update_instance
                      @update_instance = ::Gapic::Config::Method.new update_instance_config
                      delete_instance_config = parent_rpcs.delete_instance if parent_rpcs.respond_to? :delete_instance
                      @delete_instance = ::Gapic::Config::Method.new delete_instance_config
                      set_iam_policy_config = parent_rpcs.set_iam_policy if parent_rpcs.respond_to? :set_iam_policy
                      @set_iam_policy = ::Gapic::Config::Method.new set_iam_policy_config
                      get_iam_policy_config = parent_rpcs.get_iam_policy if parent_rpcs.respond_to? :get_iam_policy
                      @get_iam_policy = ::Gapic::Config::Method.new get_iam_policy_config
                      test_iam_permissions_config = parent_rpcs.test_iam_permissions if parent_rpcs.respond_to? :test_iam_permissions
                      @test_iam_permissions = ::Gapic::Config::Method.new test_iam_permissions_config

                      yield self if block_given?
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
