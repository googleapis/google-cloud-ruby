# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/orchestration/airflow/service/v1/environments_pb"

module Google
  module Cloud
    module Orchestration
      module Airflow
        module Service
          module V1
            module Environments
              ##
              # Client for the Environments service.
              #
              # Managed Apache Airflow Environments.
              #
              class Client
                include Paths

                # @private
                attr_reader :environments_stub

                ##
                # Configure the Environments Client class.
                #
                # See {::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client::Configuration}
                # for a description of the configuration fields.
                #
                # @example
                #
                #   # Modify the configuration for all Environments clients
                #   ::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.configure do |config|
                #     config.timeout = 10.0
                #   end
                #
                # @yield [config] Configure the Client client.
                # @yieldparam config [Client::Configuration]
                #
                # @return [Client::Configuration]
                #
                def self.configure
                  @configure ||= begin
                    namespace = ["Google", "Cloud", "Orchestration", "Airflow", "Service", "V1"]
                    parent_config = while namespace.any?
                                      parent_name = namespace.join "::"
                                      parent_const = const_get parent_name
                                      break parent_const.configure if parent_const.respond_to? :configure
                                      namespace.pop
                                    end
                    default_config = Client::Configuration.new parent_config

                    default_config
                  end
                  yield @configure if block_given?
                  @configure
                end

                ##
                # Configure the Environments Client instance.
                #
                # The configuration is set to the derived mode, meaning that values can be changed,
                # but structural changes (adding new fields, etc.) are not allowed. Structural changes
                # should be made on {Client.configure}.
                #
                # See {::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client::Configuration}
                # for a description of the configuration fields.
                #
                # @yield [config] Configure the Client client.
                # @yieldparam config [Client::Configuration]
                #
                # @return [Client::Configuration]
                #
                def configure
                  yield @config if block_given?
                  @config
                end

                ##
                # Create a new Environments client object.
                #
                # @example
                #
                #   # Create a client using the default configuration
                #   client = ::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new
                #
                #   # Create a client using a custom configuration
                #   client = ::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new do |config|
                #     config.timeout = 10.0
                #   end
                #
                # @yield [config] Configure the Environments client.
                # @yieldparam config [Client::Configuration]
                #
                def initialize
                  # These require statements are intentionally placed here to initialize
                  # the gRPC module only when it's required.
                  # See https://github.com/googleapis/toolkit/issues/446
                  require "gapic/grpc"
                  require "google/cloud/orchestration/airflow/service/v1/environments_services_pb"

                  # Create the configuration object
                  @config = Configuration.new Client.configure

                  # Yield the configuration if needed
                  yield @config if block_given?

                  # Create credentials
                  credentials = @config.credentials
                  # Use self-signed JWT if the endpoint is unchanged from default,
                  # but only if the default endpoint does not have a region prefix.
                  enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                           !@config.endpoint.split(".").first.include?("-")
                  credentials ||= Credentials.default scope: @config.scope,
                                                      enable_self_signed_jwt: enable_self_signed_jwt
                  if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                    credentials = Credentials.new credentials, scope: @config.scope
                  end
                  @quota_project_id = @config.quota_project
                  @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                  @operations_client = Operations.new do |config|
                    config.credentials = credentials
                    config.quota_project = @quota_project_id
                    config.endpoint = @config.endpoint
                  end

                  @environments_stub = ::Gapic::ServiceStub.new(
                    ::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Stub,
                    credentials:  credentials,
                    endpoint:     @config.endpoint,
                    channel_args: @config.channel_args,
                    interceptors: @config.interceptors
                  )
                end

                ##
                # Get the associated client for long-running operations.
                #
                # @return [::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Operations]
                #
                attr_reader :operations_client

                # Service calls

                ##
                # Create a new environment.
                #
                # @overload create_environment(request, options = nil)
                #   Pass arguments to `create_environment` via a request object, either of type
                #   {::Google::Cloud::Orchestration::Airflow::Service::V1::CreateEnvironmentRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Orchestration::Airflow::Service::V1::CreateEnvironmentRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload create_environment(parent: nil, environment: nil)
                #   Pass arguments to `create_environment` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     The parent must be of the form
                #     "projects/\\{projectId}/locations/\\{locationId}".
                #   @param environment [::Google::Cloud::Orchestration::Airflow::Service::V1::Environment, ::Hash]
                #     The environment to create.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/orchestration/airflow/service/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Orchestration::Airflow::Service::V1::CreateEnvironmentRequest.new
                #
                #   # Call the create_environment method.
                #   result = client.create_environment request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def create_environment request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Orchestration::Airflow::Service::V1::CreateEnvironmentRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.create_environment.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Orchestration::Airflow::Service::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.create_environment.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.create_environment.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @environments_stub.call_rpc :create_environment, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Get an existing environment.
                #
                # @overload get_environment(request, options = nil)
                #   Pass arguments to `get_environment` via a request object, either of type
                #   {::Google::Cloud::Orchestration::Airflow::Service::V1::GetEnvironmentRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Orchestration::Airflow::Service::V1::GetEnvironmentRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload get_environment(name: nil)
                #   Pass arguments to `get_environment` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     The resource name of the environment to get, in the form:
                #     "projects/\\{projectId}/locations/\\{locationId}/environments/\\{environmentId}"
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Google::Cloud::Orchestration::Airflow::Service::V1::Environment]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Google::Cloud::Orchestration::Airflow::Service::V1::Environment]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/orchestration/airflow/service/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Orchestration::Airflow::Service::V1::GetEnvironmentRequest.new
                #
                #   # Call the get_environment method.
                #   result = client.get_environment request
                #
                #   # The returned object is of type Google::Cloud::Orchestration::Airflow::Service::V1::Environment.
                #   p result
                #
                def get_environment request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Orchestration::Airflow::Service::V1::GetEnvironmentRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.get_environment.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Orchestration::Airflow::Service::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.get_environment.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.get_environment.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @environments_stub.call_rpc :get_environment, request, options: options do |response, operation|
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # List environments.
                #
                # @overload list_environments(request, options = nil)
                #   Pass arguments to `list_environments` via a request object, either of type
                #   {::Google::Cloud::Orchestration::Airflow::Service::V1::ListEnvironmentsRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Orchestration::Airflow::Service::V1::ListEnvironmentsRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload list_environments(parent: nil, page_size: nil, page_token: nil)
                #   Pass arguments to `list_environments` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param parent [::String]
                #     List environments in the given project and location, in the form:
                #     "projects/\\{projectId}/locations/\\{locationId}"
                #   @param page_size [::Integer]
                #     The maximum number of environments to return.
                #   @param page_token [::String]
                #     The next_page_token value returned from a previous List request, if any.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Orchestration::Airflow::Service::V1::Environment>]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::PagedEnumerable<::Google::Cloud::Orchestration::Airflow::Service::V1::Environment>]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/orchestration/airflow/service/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Orchestration::Airflow::Service::V1::ListEnvironmentsRequest.new
                #
                #   # Call the list_environments method.
                #   result = client.list_environments request
                #
                #   # The returned object is of type Gapic::PagedEnumerable. You can
                #   # iterate over all elements by calling #each, and the enumerable
                #   # will lazily make API calls to fetch subsequent pages. Other
                #   # methods are also available for managing paging directly.
                #   result.each do |response|
                #     # Each element is of type ::Google::Cloud::Orchestration::Airflow::Service::V1::Environment.
                #     p response
                #   end
                #
                def list_environments request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Orchestration::Airflow::Service::V1::ListEnvironmentsRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.list_environments.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Orchestration::Airflow::Service::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.parent
                    header_params["parent"] = request.parent
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.list_environments.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.list_environments.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @environments_stub.call_rpc :list_environments, request, options: options do |response, operation|
                    response = ::Gapic::PagedEnumerable.new @environments_stub, :list_environments, request, response, operation, options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Update an environment.
                #
                # @overload update_environment(request, options = nil)
                #   Pass arguments to `update_environment` via a request object, either of type
                #   {::Google::Cloud::Orchestration::Airflow::Service::V1::UpdateEnvironmentRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Orchestration::Airflow::Service::V1::UpdateEnvironmentRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload update_environment(name: nil, environment: nil, update_mask: nil)
                #   Pass arguments to `update_environment` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     The relative resource name of the environment to update, in the form:
                #     "projects/\\{projectId}/locations/\\{locationId}/environments/\\{environmentId}"
                #   @param environment [::Google::Cloud::Orchestration::Airflow::Service::V1::Environment, ::Hash]
                #     A patch environment. Fields specified by the `updateMask` will be copied
                #     from the patch environment into the environment under update.
                #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
                #     Required. A comma-separated list of paths, relative to `Environment`, of
                #     fields to update.
                #     For example, to set the version of scikit-learn to install in the
                #     environment to 0.19.0 and to remove an existing installation of
                #     numpy, the `updateMask` parameter would include the following two
                #     `paths` values: "config.softwareConfig.pypiPackages.scikit-learn" and
                #     "config.softwareConfig.pypiPackages.numpy". The included patch
                #     environment would specify the scikit-learn version as follows:
                #
                #         {
                #           "config":{
                #             "softwareConfig":{
                #               "pypiPackages":{
                #                 "scikit-learn":"==0.19.0"
                #               }
                #             }
                #           }
                #         }
                #
                #     Note that in the above example, any existing PyPI packages
                #     other than scikit-learn and numpy will be unaffected.
                #
                #     Only one update type may be included in a single request's `updateMask`.
                #     For example, one cannot update both the PyPI packages and
                #     labels in the same request. However, it is possible to update multiple
                #     members of a map field simultaneously in the same request. For example,
                #     to set the labels "label1" and "label2" while clearing "label3" (assuming
                #     it already exists), one can
                #     provide the paths "labels.label1", "labels.label2", and "labels.label3"
                #     and populate the patch environment as follows:
                #
                #         {
                #           "labels":{
                #             "label1":"new-label1-value"
                #             "label2":"new-label2-value"
                #           }
                #         }
                #
                #     Note that in the above example, any existing labels that are not
                #     included in the `updateMask` will be unaffected.
                #
                #     It is also possible to replace an entire map field by providing the
                #     map field's path in the `updateMask`. The new value of the field will
                #     be that which is provided in the patch environment. For example, to
                #     delete all pre-existing user-specified PyPI packages and
                #     install botocore at version 1.7.14, the `updateMask` would contain
                #     the path "config.softwareConfig.pypiPackages", and
                #     the patch environment would be the following:
                #
                #         {
                #           "config":{
                #             "softwareConfig":{
                #               "pypiPackages":{
                #                 "botocore":"==1.7.14"
                #               }
                #             }
                #           }
                #         }
                #
                #     **Note:** Only the following fields can be updated:
                #
                #     * `config.softwareConfig.pypiPackages`
                #         * Replace all custom custom PyPI packages. If a replacement
                #           package map is not included in `environment`, all custom
                #           PyPI packages are cleared. It is an error to provide both
                #           this mask and a mask specifying an individual package.
                #     * `config.softwareConfig.pypiPackages.`packagename
                #         * Update the custom PyPI package *packagename*,
                #           preserving other packages. To delete the package, include it in
                #           `updateMask`, and omit the mapping for it in
                #           `environment.config.softwareConfig.pypiPackages`. It is an error
                #           to provide both a mask of this form and the
                #           `config.softwareConfig.pypiPackages` mask.
                #     * `labels`
                #         * Replace all environment labels. If a replacement labels map is not
                #           included in `environment`, all labels are cleared. It is an error to
                #           provide both this mask and a mask specifying one or more individual
                #           labels.
                #     * `labels.`labelName
                #         * Set the label named *labelName*, while preserving other
                #           labels. To delete the label, include it in `updateMask` and omit its
                #           mapping in `environment.labels`. It is an error to provide both a
                #           mask of this form and the `labels` mask.
                #     * `config.nodeCount`
                #         * Horizontally scale the number of nodes in the environment. An integer
                #           greater than or equal to 3 must be provided in the `config.nodeCount`
                #           field.
                #     * `config.webServerNetworkAccessControl`
                #         * Replace the environment's current `WebServerNetworkAccessControl`.
                #     * `config.databaseConfig`
                #         * Replace the environment's current `DatabaseConfig`.
                #     * `config.webServerConfig`
                #         * Replace the environment's current `WebServerConfig`.
                #     * `config.softwareConfig.airflowConfigOverrides`
                #         * Replace all Apache Airflow config overrides. If a replacement config
                #           overrides map is not included in `environment`, all config overrides
                #           are cleared.
                #           It is an error to provide both this mask and a mask specifying one or
                #           more individual config overrides.
                #     * `config.softwareConfig.airflowConfigOverrides.`section-name
                #         * Override the Apache Airflow config property *name* in the
                #           section named *section*, preserving other properties. To
                #           delete the property override, include it in `updateMask` and omit its
                #           mapping in
                #           `environment.config.softwareConfig.airflowConfigOverrides`.
                #           It is an error to provide both a mask of this form and the
                #           `config.softwareConfig.airflowConfigOverrides` mask.
                #     * `config.softwareConfig.envVariables`
                #         * Replace all environment variables. If a replacement environment
                #           variable map is not included in `environment`, all custom environment
                #           variables  are cleared.
                #           It is an error to provide both this mask and a mask specifying one or
                #           more individual environment variables.
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/orchestration/airflow/service/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Orchestration::Airflow::Service::V1::UpdateEnvironmentRequest.new
                #
                #   # Call the update_environment method.
                #   result = client.update_environment request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def update_environment request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Orchestration::Airflow::Service::V1::UpdateEnvironmentRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.update_environment.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Orchestration::Airflow::Service::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.update_environment.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.update_environment.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @environments_stub.call_rpc :update_environment, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Delete an environment.
                #
                # @overload delete_environment(request, options = nil)
                #   Pass arguments to `delete_environment` via a request object, either of type
                #   {::Google::Cloud::Orchestration::Airflow::Service::V1::DeleteEnvironmentRequest} or an equivalent Hash.
                #
                #   @param request [::Google::Cloud::Orchestration::Airflow::Service::V1::DeleteEnvironmentRequest, ::Hash]
                #     A request object representing the call parameters. Required. To specify no
                #     parameters, or to keep all the default parameter values, pass an empty Hash.
                #   @param options [::Gapic::CallOptions, ::Hash]
                #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
                #
                # @overload delete_environment(name: nil)
                #   Pass arguments to `delete_environment` via keyword arguments. Note that at
                #   least one keyword argument is required. To specify no parameters, or to keep all
                #   the default parameter values, pass an empty Hash as a request object (see above).
                #
                #   @param name [::String]
                #     The environment to delete, in the form:
                #     "projects/\\{projectId}/locations/\\{locationId}/environments/\\{environmentId}"
                #
                # @yield [response, operation] Access the result along with the RPC operation
                # @yieldparam response [::Gapic::Operation]
                # @yieldparam operation [::GRPC::ActiveCall::Operation]
                #
                # @return [::Gapic::Operation]
                #
                # @raise [::Google::Cloud::Error] if the RPC is aborted.
                #
                # @example Basic example
                #   require "google/cloud/orchestration/airflow/service/v1"
                #
                #   # Create a client object. The client can be reused for multiple calls.
                #   client = Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new
                #
                #   # Create a request. To set request fields, pass in keyword arguments.
                #   request = Google::Cloud::Orchestration::Airflow::Service::V1::DeleteEnvironmentRequest.new
                #
                #   # Call the delete_environment method.
                #   result = client.delete_environment request
                #
                #   # The returned object is of type Gapic::Operation. You can use this
                #   # object to check the status of an operation, cancel it, or wait
                #   # for results. Here is how to block until completion:
                #   result.wait_until_done! timeout: 60
                #   if result.response?
                #     p result.response
                #   else
                #     puts "Error!"
                #   end
                #
                def delete_environment request, options = nil
                  raise ::ArgumentError, "request must be provided" if request.nil?

                  request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Orchestration::Airflow::Service::V1::DeleteEnvironmentRequest

                  # Converts hash and nil to an options object
                  options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                  # Customize the options with defaults
                  metadata = @config.rpcs.delete_environment.metadata.to_h

                  # Set x-goog-api-client and x-goog-user-project headers
                  metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                    lib_name: @config.lib_name, lib_version: @config.lib_version,
                    gapic_version: ::Google::Cloud::Orchestration::Airflow::Service::V1::VERSION
                  metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                  header_params = {}
                  if request.name
                    header_params["name"] = request.name
                  end

                  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                  metadata[:"x-goog-request-params"] ||= request_params_header

                  options.apply_defaults timeout:      @config.rpcs.delete_environment.timeout,
                                         metadata:     metadata,
                                         retry_policy: @config.rpcs.delete_environment.retry_policy

                  options.apply_defaults timeout:      @config.timeout,
                                         metadata:     @config.metadata,
                                         retry_policy: @config.retry_policy

                  @environments_stub.call_rpc :delete_environment, request, options: options do |response, operation|
                    response = ::Gapic::Operation.new response, @operations_client, options: options
                    yield response, operation if block_given?
                    return response
                  end
                rescue ::GRPC::BadStatus => e
                  raise ::Google::Cloud::Error.from_error(e)
                end

                ##
                # Configuration class for the Environments API.
                #
                # This class represents the configuration for Environments,
                # providing control over timeouts, retry behavior, logging, transport
                # parameters, and other low-level controls. Certain parameters can also be
                # applied individually to specific RPCs. See
                # {::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client::Configuration::Rpcs}
                # for a list of RPCs that can be configured independently.
                #
                # Configuration can be applied globally to all clients, or to a single client
                # on construction.
                #
                # @example
                #
                #   # Modify the global config, setting the timeout for
                #   # create_environment to 20 seconds,
                #   # and all remaining timeouts to 10 seconds.
                #   ::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.configure do |config|
                #     config.timeout = 10.0
                #     config.rpcs.create_environment.timeout = 20.0
                #   end
                #
                #   # Apply the above configuration only to a new client.
                #   client = ::Google::Cloud::Orchestration::Airflow::Service::V1::Environments::Client.new do |config|
                #     config.timeout = 10.0
                #     config.rpcs.create_environment.timeout = 20.0
                #   end
                #
                # @!attribute [rw] endpoint
                #   The hostname or hostname:port of the service endpoint.
                #   Defaults to `"composer.googleapis.com"`.
                #   @return [::String]
                # @!attribute [rw] credentials
                #   Credentials to send with calls. You may provide any of the following types:
                #    *  (`String`) The path to a service account key file in JSON format
                #    *  (`Hash`) A service account key as a Hash
                #    *  (`Google::Auth::Credentials`) A googleauth credentials object
                #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
                #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
                #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
                #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
                #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
                #    *  (`nil`) indicating no credentials
                #   @return [::Object]
                # @!attribute [rw] scope
                #   The OAuth scopes
                #   @return [::Array<::String>]
                # @!attribute [rw] lib_name
                #   The library name as recorded in instrumentation and logging
                #   @return [::String]
                # @!attribute [rw] lib_version
                #   The library version as recorded in instrumentation and logging
                #   @return [::String]
                # @!attribute [rw] channel_args
                #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
                #   `GRPC::Core::Channel` object is provided as the credential.
                #   @return [::Hash]
                # @!attribute [rw] interceptors
                #   An array of interceptors that are run before calls are executed.
                #   @return [::Array<::GRPC::ClientInterceptor>]
                # @!attribute [rw] timeout
                #   The call timeout in seconds.
                #   @return [::Numeric]
                # @!attribute [rw] metadata
                #   Additional gRPC headers to be sent with the call.
                #   @return [::Hash{::Symbol=>::String}]
                # @!attribute [rw] retry_policy
                #   The retry policy. The value is a hash with the following keys:
                #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #       trigger a retry.
                #   @return [::Hash]
                # @!attribute [rw] quota_project
                #   A separate project against which to charge quota.
                #   @return [::String]
                #
                class Configuration
                  extend ::Gapic::Config

                  config_attr :endpoint,      "composer.googleapis.com", ::String
                  config_attr :credentials,   nil do |value|
                    allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                    allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                    allowed.any? { |klass| klass === value }
                  end
                  config_attr :scope,         nil, ::String, ::Array, nil
                  config_attr :lib_name,      nil, ::String, nil
                  config_attr :lib_version,   nil, ::String, nil
                  config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                  config_attr :interceptors,  nil, ::Array, nil
                  config_attr :timeout,       nil, ::Numeric, nil
                  config_attr :metadata,      nil, ::Hash, nil
                  config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                  config_attr :quota_project, nil, ::String, nil

                  # @private
                  def initialize parent_config = nil
                    @parent_config = parent_config unless parent_config.nil?

                    yield self if block_given?
                  end

                  ##
                  # Configurations for individual RPCs
                  # @return [Rpcs]
                  #
                  def rpcs
                    @rpcs ||= begin
                      parent_rpcs = nil
                      parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                      Rpcs.new parent_rpcs
                    end
                  end

                  ##
                  # Configuration RPC class for the Environments API.
                  #
                  # Includes fields providing the configuration for each RPC in this service.
                  # Each configuration object is of type `Gapic::Config::Method` and includes
                  # the following configuration fields:
                  #
                  #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                  #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                  #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                  #     include the following keys:
                  #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                  #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                  #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                  #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                  #         trigger a retry.
                  #
                  class Rpcs
                    ##
                    # RPC-specific configuration for `create_environment`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :create_environment
                    ##
                    # RPC-specific configuration for `get_environment`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :get_environment
                    ##
                    # RPC-specific configuration for `list_environments`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :list_environments
                    ##
                    # RPC-specific configuration for `update_environment`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :update_environment
                    ##
                    # RPC-specific configuration for `delete_environment`
                    # @return [::Gapic::Config::Method]
                    #
                    attr_reader :delete_environment

                    # @private
                    def initialize parent_rpcs = nil
                      create_environment_config = parent_rpcs.create_environment if parent_rpcs.respond_to? :create_environment
                      @create_environment = ::Gapic::Config::Method.new create_environment_config
                      get_environment_config = parent_rpcs.get_environment if parent_rpcs.respond_to? :get_environment
                      @get_environment = ::Gapic::Config::Method.new get_environment_config
                      list_environments_config = parent_rpcs.list_environments if parent_rpcs.respond_to? :list_environments
                      @list_environments = ::Gapic::Config::Method.new list_environments_config
                      update_environment_config = parent_rpcs.update_environment if parent_rpcs.respond_to? :update_environment
                      @update_environment = ::Gapic::Config::Method.new update_environment_config
                      delete_environment_config = parent_rpcs.delete_environment if parent_rpcs.respond_to? :delete_environment
                      @delete_environment = ::Gapic::Config::Method.new delete_environment_config

                      yield self if block_given?
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
