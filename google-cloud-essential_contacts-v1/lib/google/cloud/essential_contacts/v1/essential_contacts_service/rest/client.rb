# frozen_string_literal: true

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/essentialcontacts/v1/service_pb"
require "google/cloud/essential_contacts/v1/essential_contacts_service/rest/service_stub"

module Google
  module Cloud
    module EssentialContacts
      module V1
        module EssentialContactsService
          module Rest
            ##
            # REST client for the EssentialContactsService service.
            #
            # Manages contacts for important Google Cloud notifications.
            #
            class Client
              include Paths

              # @private
              attr_reader :essential_contacts_service_stub

              ##
              # Configure the EssentialContactsService Client class.
              #
              # See {::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all EssentialContactsService clients
              #   ::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Cloud", "EssentialContacts", "V1"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config.rpcs.create_contact.timeout = 60.0

                  default_config.rpcs.update_contact.timeout = 60.0

                  default_config.rpcs.list_contacts.timeout = 60.0
                  default_config.rpcs.list_contacts.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.get_contact.timeout = 60.0
                  default_config.rpcs.get_contact.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config.rpcs.delete_contact.timeout = 60.0

                  default_config.rpcs.compute_contacts.timeout = 60.0

                  default_config.rpcs.send_test_message.timeout = 60.0

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the EssentialContactsService Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # Create a new EssentialContactsService REST client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the EssentialContactsService client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                                         !@config.endpoint.split(".").first.include?("-")
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end

                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @essential_contacts_service_stub = ::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::ServiceStub.new endpoint: @config.endpoint, credentials: credentials
              end

              # Service calls

              ##
              # Adds a new contact for a resource.
              #
              # @overload create_contact(request, options = nil)
              #   Pass arguments to `create_contact` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::CreateContactRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::CreateContactRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload create_contact(parent: nil, contact: nil)
              #   Pass arguments to `create_contact` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The resource to save this contact for.
              #     Format: organizations/\\{organization_id}, folders/\\{folder_id} or
              #     projects/\\{project_id}
              #   @param contact [::Google::Cloud::EssentialContacts::V1::Contact, ::Hash]
              #     Required. The contact to create. Must specify an email address and language
              #     tag.
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Google::Cloud::EssentialContacts::V1::Contact]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Google::Cloud::EssentialContacts::V1::Contact]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def create_contact request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::CreateContactRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.create_contact.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.create_contact.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.create_contact.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.create_contact request, options do |result, operation|
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Updates a contact.
              # Note: A contact's email address cannot be changed.
              #
              # @overload update_contact(request, options = nil)
              #   Pass arguments to `update_contact` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::UpdateContactRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::UpdateContactRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload update_contact(contact: nil, update_mask: nil)
              #   Pass arguments to `update_contact` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param contact [::Google::Cloud::EssentialContacts::V1::Contact, ::Hash]
              #     Required. The contact resource to replace the existing saved contact. Note:
              #     the email address of the contact cannot be modified.
              #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
              #     Optional. The update mask applied to the resource. For the `FieldMask`
              #     definition, see
              #     https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Google::Cloud::EssentialContacts::V1::Contact]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Google::Cloud::EssentialContacts::V1::Contact]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def update_contact request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::UpdateContactRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.update_contact.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.update_contact.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.update_contact.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.update_contact request, options do |result, operation|
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lists the contacts that have been set on a resource.
              #
              # @overload list_contacts(request, options = nil)
              #   Pass arguments to `list_contacts` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::ListContactsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::ListContactsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload list_contacts(parent: nil, page_size: nil, page_token: nil)
              #   Pass arguments to `list_contacts` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The parent resource name.
              #     Format: organizations/\\{organization_id}, folders/\\{folder_id} or
              #     projects/\\{project_id}
              #   @param page_size [::Integer]
              #     Optional. The maximum number of results to return from this request.
              #     Non-positive values are ignored. The presence of `next_page_token` in the
              #     response indicates that more results might be available.
              #     If not specified, the default page_size is 100.
              #   @param page_token [::String]
              #     Optional. If present, retrieves the next batch of results from the
              #     preceding call to this method. `page_token` must be the value of
              #     `next_page_token` from the previous response. The values of other method
              #     parameters should be identical to those in the previous call.
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::EssentialContacts::V1::Contact>]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::EssentialContacts::V1::Contact>]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def list_contacts request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::ListContactsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.list_contacts.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.list_contacts.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.list_contacts.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.list_contacts request, options do |result, operation|
                  result = ::Gapic::Rest::PagedEnumerable.new @essential_contacts_service_stub, :list_contacts, "contacts", request, result, options
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Gets a single contact.
              #
              # @overload get_contact(request, options = nil)
              #   Pass arguments to `get_contact` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::GetContactRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::GetContactRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload get_contact(name: nil)
              #   Pass arguments to `get_contact` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The name of the contact to retrieve.
              #     Format: organizations/\\{organization_id}/contacts/\\{contact_id},
              #     folders/\\{folder_id}/contacts/\\{contact_id} or
              #     projects/\\{project_id}/contacts/\\{contact_id}
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Google::Cloud::EssentialContacts::V1::Contact]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Google::Cloud::EssentialContacts::V1::Contact]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def get_contact request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::GetContactRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.get_contact.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.get_contact.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.get_contact.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.get_contact request, options do |result, operation|
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Deletes a contact.
              #
              # @overload delete_contact(request, options = nil)
              #   Pass arguments to `delete_contact` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::DeleteContactRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::DeleteContactRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload delete_contact(name: nil)
              #   Pass arguments to `delete_contact` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The name of the contact to delete.
              #     Format: organizations/\\{organization_id}/contacts/\\{contact_id},
              #     folders/\\{folder_id}/contacts/\\{contact_id} or
              #     projects/\\{project_id}/contacts/\\{contact_id}
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Google::Protobuf::Empty]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Google::Protobuf::Empty]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def delete_contact request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::DeleteContactRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.delete_contact.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.delete_contact.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.delete_contact.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.delete_contact request, options do |result, operation|
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Lists all contacts for the resource that are subscribed to the
              # specified notification categories, including contacts inherited from
              # any parent resources.
              #
              # @overload compute_contacts(request, options = nil)
              #   Pass arguments to `compute_contacts` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::ComputeContactsRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::ComputeContactsRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload compute_contacts(parent: nil, notification_categories: nil, page_size: nil, page_token: nil)
              #   Pass arguments to `compute_contacts` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param parent [::String]
              #     Required. The name of the resource to compute contacts for.
              #     Format: organizations/\\{organization_id},
              #     folders/\\{folder_id} or projects/\\{project_id}
              #   @param notification_categories [::Array<::Google::Cloud::EssentialContacts::V1::NotificationCategory>]
              #     The categories of notifications to compute contacts for. If ALL is included
              #     in this list, contacts subscribed to any notification category will be
              #     returned.
              #   @param page_size [::Integer]
              #     Optional. The maximum number of results to return from this request.
              #     Non-positive values are ignored. The presence of `next_page_token` in the
              #     response indicates that more results might be available.
              #     If not specified, the default page_size is 100.
              #   @param page_token [::String]
              #     Optional. If present, retrieves the next batch of results from the
              #     preceding call to this method. `page_token` must be the value of
              #     `next_page_token` from the previous response. The values of other method
              #     parameters should be identical to those in the previous call.
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Gapic::Rest::PagedEnumerable<::Google::Cloud::EssentialContacts::V1::Contact>]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Gapic::Rest::PagedEnumerable<::Google::Cloud::EssentialContacts::V1::Contact>]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def compute_contacts request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::ComputeContactsRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.compute_contacts.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.compute_contacts.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.compute_contacts.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.compute_contacts request, options do |result, operation|
                  result = ::Gapic::Rest::PagedEnumerable.new @essential_contacts_service_stub, :compute_contacts, "contacts", request, result, options
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Allows a contact admin to send a test message to contact to verify that it
              # has been configured correctly.
              #
              # @overload send_test_message(request, options = nil)
              #   Pass arguments to `send_test_message` via a request object, either of type
              #   {::Google::Cloud::EssentialContacts::V1::SendTestMessageRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Cloud::EssentialContacts::V1::SendTestMessageRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries etc. Optional.
              #
              # @overload send_test_message(contacts: nil, resource: nil, notification_category: nil)
              #   Pass arguments to `send_test_message` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param contacts [::Array<::String>]
              #     Required. The list of names of the contacts to send a test message to.
              #     Format: organizations/\\{organization_id}/contacts/\\{contact_id},
              #     folders/\\{folder_id}/contacts/\\{contact_id} or
              #     projects/\\{project_id}/contacts/\\{contact_id}
              #   @param resource [::String]
              #     Required. The name of the resource to send the test message for. All
              #     contacts must either be set directly on this resource or inherited from
              #     another resource that is an ancestor of this one. Format:
              #     organizations/\\{organization_id}, folders/\\{folder_id} or
              #     projects/\\{project_id}
              #   @param notification_category [::Google::Cloud::EssentialContacts::V1::NotificationCategory]
              #     Required. The notification category to send the test message for. All
              #     contacts must be subscribed to this category.
              # @yield [result, operation] Access the result along with the TransportOperation object
              # @yieldparam result [::Google::Protobuf::Empty]
              # @yieldparam operation [::Gapic::Rest::TransportOperation]
              #
              # @return [::Google::Protobuf::Empty]
              #
              # @raise [::Google::Cloud::Error] if the REST call is aborted.
              def send_test_message request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::EssentialContacts::V1::SendTestMessageRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                call_metadata = @config.rpcs.send_test_message.metadata.to_h

                # Set x-goog-api-client and x-goog-user-project headers
                call_metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::EssentialContacts::V1::VERSION,
                  transports_version_send: [:rest]

                call_metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                options.apply_defaults timeout:      @config.rpcs.send_test_message.timeout,
                                       metadata:     call_metadata,
                                       retry_policy: @config.rpcs.send_test_message.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @essential_contacts_service_stub.send_test_message request, options do |result, operation|
                  yield result, operation if block_given?
                  return result
                end
              rescue ::Gapic::Rest::Error => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the EssentialContactsService REST API.
              #
              # This class represents the configuration for EssentialContactsService REST,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # create_contact to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.create_contact.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Cloud::EssentialContacts::V1::EssentialContactsService::Rest::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.create_contact.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   The hostname or hostname:port of the service endpoint.
              #   Defaults to `"essentialcontacts.googleapis.com"`.
              #   @return [::String]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
              #    *  (`nil`) indicating no credentials
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              #
              class Configuration
                extend ::Gapic::Config

                DEFAULT_ENDPOINT = "essentialcontacts.googleapis.com"

                config_attr :endpoint,      DEFAULT_ENDPOINT, ::String
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration RPC class for the EssentialContactsService API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `create_contact`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :create_contact
                  ##
                  # RPC-specific configuration for `update_contact`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :update_contact
                  ##
                  # RPC-specific configuration for `list_contacts`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :list_contacts
                  ##
                  # RPC-specific configuration for `get_contact`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :get_contact
                  ##
                  # RPC-specific configuration for `delete_contact`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :delete_contact
                  ##
                  # RPC-specific configuration for `compute_contacts`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :compute_contacts
                  ##
                  # RPC-specific configuration for `send_test_message`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :send_test_message

                  # @private
                  def initialize parent_rpcs = nil
                    create_contact_config = parent_rpcs.create_contact if parent_rpcs.respond_to? :create_contact
                    @create_contact = ::Gapic::Config::Method.new create_contact_config
                    update_contact_config = parent_rpcs.update_contact if parent_rpcs.respond_to? :update_contact
                    @update_contact = ::Gapic::Config::Method.new update_contact_config
                    list_contacts_config = parent_rpcs.list_contacts if parent_rpcs.respond_to? :list_contacts
                    @list_contacts = ::Gapic::Config::Method.new list_contacts_config
                    get_contact_config = parent_rpcs.get_contact if parent_rpcs.respond_to? :get_contact
                    @get_contact = ::Gapic::Config::Method.new get_contact_config
                    delete_contact_config = parent_rpcs.delete_contact if parent_rpcs.respond_to? :delete_contact
                    @delete_contact = ::Gapic::Config::Method.new delete_contact_config
                    compute_contacts_config = parent_rpcs.compute_contacts if parent_rpcs.respond_to? :compute_contacts
                    @compute_contacts = ::Gapic::Config::Method.new compute_contacts_config
                    send_test_message_config = parent_rpcs.send_test_message if parent_rpcs.respond_to? :send_test_message
                    @send_test_message = ::Gapic::Config::Method.new send_test_message_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
