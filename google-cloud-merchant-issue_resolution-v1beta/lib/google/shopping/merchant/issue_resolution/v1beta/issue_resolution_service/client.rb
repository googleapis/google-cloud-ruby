# frozen_string_literal: true

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/shopping/merchant/issueresolution/v1beta/issueresolution_pb"

module Google
  module Shopping
    module Merchant
      module IssueResolution
        module V1beta
          module IssueResolutionService
            ##
            # Client for the IssueResolutionService service.
            #
            # Service to provide an issue resolution content for account issues and product
            # issues.
            #
            class Client
              # @private
              API_VERSION = ""

              # @private
              DEFAULT_ENDPOINT_TEMPLATE = "merchantapi.$UNIVERSE_DOMAIN$"

              include Paths

              # @private
              attr_reader :issue_resolution_service_stub

              ##
              # Configure the IssueResolutionService Client class.
              #
              # See {::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @example
              #
              #   # Modify the configuration for all IssueResolutionService clients
              #   ::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.configure do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def self.configure
                @configure ||= begin
                  namespace = ["Google", "Shopping", "Merchant", "IssueResolution", "V1beta"]
                  parent_config = while namespace.any?
                                    parent_name = namespace.join "::"
                                    parent_const = const_get parent_name
                                    break parent_const.configure if parent_const.respond_to? :configure
                                    namespace.pop
                                  end
                  default_config = Client::Configuration.new parent_config

                  default_config.timeout = 60.0
                  default_config.retry_policy = {
                    initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                  }

                  default_config
                end
                yield @configure if block_given?
                @configure
              end

              ##
              # Configure the IssueResolutionService Client instance.
              #
              # The configuration is set to the derived mode, meaning that values can be changed,
              # but structural changes (adding new fields, etc.) are not allowed. Structural changes
              # should be made on {Client.configure}.
              #
              # See {::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client::Configuration}
              # for a description of the configuration fields.
              #
              # @yield [config] Configure the Client client.
              # @yieldparam config [Client::Configuration]
              #
              # @return [Client::Configuration]
              #
              def configure
                yield @config if block_given?
                @config
              end

              ##
              # The effective universe domain
              #
              # @return [String]
              #
              def universe_domain
                @issue_resolution_service_stub.universe_domain
              end

              ##
              # Create a new IssueResolutionService client object.
              #
              # @example
              #
              #   # Create a client using the default configuration
              #   client = ::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.new
              #
              #   # Create a client using a custom configuration
              #   client = ::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.new do |config|
              #     config.timeout = 10.0
              #   end
              #
              # @yield [config] Configure the IssueResolutionService client.
              # @yieldparam config [Client::Configuration]
              #
              def initialize
                # These require statements are intentionally placed here to initialize
                # the gRPC module only when it's required.
                # See https://github.com/googleapis/toolkit/issues/446
                require "gapic/grpc"
                require "google/shopping/merchant/issueresolution/v1beta/issueresolution_services_pb"

                # Create the configuration object
                @config = Configuration.new Client.configure

                # Yield the configuration if needed
                yield @config if block_given?

                # Create credentials
                credentials = @config.credentials
                # Use self-signed JWT if the endpoint is unchanged from default,
                # but only if the default endpoint does not have a region prefix.
                enable_self_signed_jwt = @config.endpoint.nil? ||
                                         (@config.endpoint == Configuration::DEFAULT_ENDPOINT &&
                                         !@config.endpoint.split(".").first.include?("-"))
                credentials ||= Credentials.default scope: @config.scope,
                                                    enable_self_signed_jwt: enable_self_signed_jwt
                if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                  credentials = Credentials.new credentials, scope: @config.scope
                end
                @quota_project_id = @config.quota_project
                @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

                @issue_resolution_service_stub = ::Gapic::ServiceStub.new(
                  ::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Stub,
                  credentials: credentials,
                  endpoint: @config.endpoint,
                  endpoint_template: DEFAULT_ENDPOINT_TEMPLATE,
                  universe_domain: @config.universe_domain,
                  channel_args: @config.channel_args,
                  interceptors: @config.interceptors,
                  channel_pool_config: @config.channel_pool,
                  logger: @config.logger
                )

                @issue_resolution_service_stub.stub_logger&.info do |entry|
                  entry.set_system_name
                  entry.set_service
                  entry.message = "Created client for #{entry.service}"
                  entry.set_credentials_fields credentials
                  entry.set "customEndpoint", @config.endpoint if @config.endpoint
                  entry.set "defaultTimeout", @config.timeout if @config.timeout
                  entry.set "quotaProject", @quota_project_id if @quota_project_id
                end
              end

              ##
              # The logger used for request/response debug logging.
              #
              # @return [Logger]
              #
              def logger
                @issue_resolution_service_stub.logger
              end

              # Service calls

              ##
              # Provide a list of business's account issues with an issue resolution
              # content and available actions. This content and actions are meant to be
              # rendered and shown in third-party applications.
              #
              # @overload render_account_issues(request, options = nil)
              #   Pass arguments to `render_account_issues` via a request object, either of type
              #   {::Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload render_account_issues(name: nil, language_code: nil, time_zone: nil, payload: nil)
              #   Pass arguments to `render_account_issues` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The account to fetch issues for.
              #     Format: `accounts/{account}`
              #   @param language_code [::String]
              #     Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language
              #     code used to localize issue resolution content. If not set, the result will
              #     be in default language `en-US`.
              #   @param time_zone [::String]
              #     Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
              #     localize times in an issue resolution content. For example
              #     'America/Los_Angeles'. If not set, results will use as a default UTC.
              #   @param payload [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderIssuesRequestPayload, ::Hash]
              #     Optional. The payload for configuring how the content should be rendered.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/shopping/merchant/issue_resolution/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesRequest.new
              #
              #   # Call the render_account_issues method.
              #   result = client.render_account_issues request
              #
              #   # The returned object is of type Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesResponse.
              #   p result
              #
              def render_account_issues request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Shopping::Merchant::IssueResolution::V1beta::RenderAccountIssuesRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.render_account_issues.metadata.to_h

                # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Merchant::IssueResolution::V1beta::VERSION
                metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.render_account_issues.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.render_account_issues.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @issue_resolution_service_stub.call_rpc :render_account_issues, request, options: options do |response, operation|
                  yield response, operation if block_given?
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Provide a list of issues for business's product with an issue resolution
              # content and available actions. This content and actions are meant to be
              # rendered and shown in third-party applications.
              #
              # @overload render_product_issues(request, options = nil)
              #   Pass arguments to `render_product_issues` via a request object, either of type
              #   {::Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload render_product_issues(name: nil, language_code: nil, time_zone: nil, payload: nil)
              #   Pass arguments to `render_product_issues` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The name of the product to fetch issues for.
              #     Format: `accounts/{account}/products/{product}`
              #   @param language_code [::String]
              #     Optional. The [IETF BCP-47](https://tools.ietf.org/html/bcp47) language
              #     code used to localize an issue resolution content. If not set, the result
              #     will be in default language `en-US`.
              #   @param time_zone [::String]
              #     Optional. The [IANA](https://www.iana.org/time-zones) timezone used to
              #     localize times in an issue resolution content. For example
              #     'America/Los_Angeles'. If not set, results will use as a default UTC.
              #   @param payload [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderIssuesRequestPayload, ::Hash]
              #     Optional. The payload for configuring how the content should be rendered.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/shopping/merchant/issue_resolution/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesRequest.new
              #
              #   # Call the render_product_issues method.
              #   result = client.render_product_issues request
              #
              #   # The returned object is of type Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesResponse.
              #   p result
              #
              def render_product_issues request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Shopping::Merchant::IssueResolution::V1beta::RenderProductIssuesRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.render_product_issues.metadata.to_h

                # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Merchant::IssueResolution::V1beta::VERSION
                metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.render_product_issues.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.render_product_issues.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @issue_resolution_service_stub.call_rpc :render_product_issues, request, options: options do |response, operation|
                  yield response, operation if block_given?
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Start an action. The action can be requested by a business in
              # third-party application. Before the business can request the action, the
              # third-party application needs to show them action specific content and
              # display a user input form.
              #
              # The action can be successfully started only once all `required` inputs are
              # provided. If any `required` input is missing, or invalid value was
              # provided, the service will return 400 error. Validation errors will contain
              # {::Google::Shopping::Merchant::IssueResolution::V1beta::InputField#id Ids} for
              # all problematic field together with translated, human readable error
              # messages that can be shown to the user.
              #
              # @overload trigger_action(request, options = nil)
              #   Pass arguments to `trigger_action` via a request object, either of type
              #   {::Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionRequest} or an equivalent Hash.
              #
              #   @param request [::Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionRequest, ::Hash]
              #     A request object representing the call parameters. Required. To specify no
              #     parameters, or to keep all the default parameter values, pass an empty Hash.
              #   @param options [::Gapic::CallOptions, ::Hash]
              #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
              #
              # @overload trigger_action(name: nil, payload: nil, language_code: nil)
              #   Pass arguments to `trigger_action` via keyword arguments. Note that at
              #   least one keyword argument is required. To specify no parameters, or to keep all
              #   the default parameter values, pass an empty Hash as a request object (see above).
              #
              #   @param name [::String]
              #     Required. The business's account that is triggering the action.
              #     Format: `accounts/{account}`
              #   @param payload [::Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionPayload, ::Hash]
              #     Required. The payload for the triggered action.
              #   @param language_code [::String]
              #     Optional. Language code [IETF BCP 47
              #     syntax](https://tools.ietf.org/html/bcp47) used to localize the response.
              #     If not set, the result will be in default language `en-US`.
              #
              # @yield [response, operation] Access the result along with the RPC operation
              # @yieldparam response [::Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionResponse]
              # @yieldparam operation [::GRPC::ActiveCall::Operation]
              #
              # @return [::Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionResponse]
              #
              # @raise [::Google::Cloud::Error] if the RPC is aborted.
              #
              # @example Basic example
              #   require "google/shopping/merchant/issue_resolution/v1beta"
              #
              #   # Create a client object. The client can be reused for multiple calls.
              #   client = Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.new
              #
              #   # Create a request. To set request fields, pass in keyword arguments.
              #   request = Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionRequest.new
              #
              #   # Call the trigger_action method.
              #   result = client.trigger_action request
              #
              #   # The returned object is of type Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionResponse.
              #   p result
              #
              def trigger_action request, options = nil
                raise ::ArgumentError, "request must be provided" if request.nil?

                request = ::Gapic::Protobuf.coerce request, to: ::Google::Shopping::Merchant::IssueResolution::V1beta::TriggerActionRequest

                # Converts hash and nil to an options object
                options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

                # Customize the options with defaults
                metadata = @config.rpcs.trigger_action.metadata.to_h

                # Set x-goog-api-client, x-goog-user-project and x-goog-api-version headers
                metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                  lib_name: @config.lib_name, lib_version: @config.lib_version,
                  gapic_version: ::Google::Cloud::Merchant::IssueResolution::V1beta::VERSION
                metadata[:"x-goog-api-version"] = API_VERSION unless API_VERSION.empty?
                metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

                header_params = {}
                if request.name
                  header_params["name"] = request.name
                end

                request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
                metadata[:"x-goog-request-params"] ||= request_params_header

                options.apply_defaults timeout:      @config.rpcs.trigger_action.timeout,
                                       metadata:     metadata,
                                       retry_policy: @config.rpcs.trigger_action.retry_policy

                options.apply_defaults timeout:      @config.timeout,
                                       metadata:     @config.metadata,
                                       retry_policy: @config.retry_policy

                @issue_resolution_service_stub.call_rpc :trigger_action, request, options: options do |response, operation|
                  yield response, operation if block_given?
                end
              rescue ::GRPC::BadStatus => e
                raise ::Google::Cloud::Error.from_error(e)
              end

              ##
              # Configuration class for the IssueResolutionService API.
              #
              # This class represents the configuration for IssueResolutionService,
              # providing control over timeouts, retry behavior, logging, transport
              # parameters, and other low-level controls. Certain parameters can also be
              # applied individually to specific RPCs. See
              # {::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client::Configuration::Rpcs}
              # for a list of RPCs that can be configured independently.
              #
              # Configuration can be applied globally to all clients, or to a single client
              # on construction.
              #
              # @example
              #
              #   # Modify the global config, setting the timeout for
              #   # render_account_issues to 20 seconds,
              #   # and all remaining timeouts to 10 seconds.
              #   ::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.configure do |config|
              #     config.timeout = 10.0
              #     config.rpcs.render_account_issues.timeout = 20.0
              #   end
              #
              #   # Apply the above configuration only to a new client.
              #   client = ::Google::Shopping::Merchant::IssueResolution::V1beta::IssueResolutionService::Client.new do |config|
              #     config.timeout = 10.0
              #     config.rpcs.render_account_issues.timeout = 20.0
              #   end
              #
              # @!attribute [rw] endpoint
              #   A custom service endpoint, as a hostname or hostname:port. The default is
              #   nil, indicating to use the default endpoint in the current universe domain.
              #   @return [::String,nil]
              # @!attribute [rw] credentials
              #   Credentials to send with calls. You may provide any of the following types:
              #    *  (`String`) The path to a service account key file in JSON format
              #    *  (`Hash`) A service account key as a Hash
              #    *  (`Google::Auth::Credentials`) A googleauth credentials object
              #       (see the [googleauth docs](https://rubydoc.info/gems/googleauth/Google/Auth/Credentials))
              #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
              #       (see the [signet docs](https://rubydoc.info/gems/signet/Signet/OAuth2/Client))
              #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
              #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
              #    *  (`nil`) indicating no credentials
              #
              #   Warning: If you accept a credential configuration (JSON file or Hash) from an
              #   external source for authentication to Google Cloud, you must validate it before
              #   providing it to a Google API client library. Providing an unvalidated credential
              #   configuration to Google APIs can compromise the security of your systems and data.
              #   For more information, refer to [Validate credential configurations from external
              #   sources](https://cloud.google.com/docs/authentication/external/externally-sourced-credentials).
              #   @return [::Object]
              # @!attribute [rw] scope
              #   The OAuth scopes
              #   @return [::Array<::String>]
              # @!attribute [rw] lib_name
              #   The library name as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] lib_version
              #   The library version as recorded in instrumentation and logging
              #   @return [::String]
              # @!attribute [rw] channel_args
              #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
              #   `GRPC::Core::Channel` object is provided as the credential.
              #   @return [::Hash]
              # @!attribute [rw] interceptors
              #   An array of interceptors that are run before calls are executed.
              #   @return [::Array<::GRPC::ClientInterceptor>]
              # @!attribute [rw] timeout
              #   The call timeout in seconds.
              #   @return [::Numeric]
              # @!attribute [rw] metadata
              #   Additional gRPC headers to be sent with the call.
              #   @return [::Hash{::Symbol=>::String}]
              # @!attribute [rw] retry_policy
              #   The retry policy. The value is a hash with the following keys:
              #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #       trigger a retry.
              #   @return [::Hash]
              # @!attribute [rw] quota_project
              #   A separate project against which to charge quota.
              #   @return [::String]
              # @!attribute [rw] universe_domain
              #   The universe domain within which to make requests. This determines the
              #   default endpoint URL. The default value of nil uses the environment
              #   universe (usually the default "googleapis.com" universe).
              #   @return [::String,nil]
              # @!attribute [rw] logger
              #   A custom logger to use for request/response debug logging, or the value
              #   `:default` (the default) to construct a default logger, or `nil` to
              #   explicitly disable logging.
              #   @return [::Logger,:default,nil]
              #
              class Configuration
                extend ::Gapic::Config

                # @private
                # The endpoint specific to the default "googleapis.com" universe. Deprecated.
                DEFAULT_ENDPOINT = "merchantapi.googleapis.com"

                config_attr :endpoint,      nil, ::String, nil
                config_attr :credentials,   nil do |value|
                  allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Google::Auth::BaseClient, ::Signet::OAuth2::Client, nil]
                  allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC::Core::Channel
                  allowed.any? { |klass| klass === value }
                end
                config_attr :scope,         nil, ::String, ::Array, nil
                config_attr :lib_name,      nil, ::String, nil
                config_attr :lib_version,   nil, ::String, nil
                config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
                config_attr :interceptors,  nil, ::Array, nil
                config_attr :timeout,       nil, ::Numeric, nil
                config_attr :metadata,      nil, ::Hash, nil
                config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
                config_attr :quota_project, nil, ::String, nil
                config_attr :universe_domain, nil, ::String, nil
                config_attr :logger, :default, ::Logger, nil, :default

                # @private
                def initialize parent_config = nil
                  @parent_config = parent_config unless parent_config.nil?

                  yield self if block_given?
                end

                ##
                # Configurations for individual RPCs
                # @return [Rpcs]
                #
                def rpcs
                  @rpcs ||= begin
                    parent_rpcs = nil
                    parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                    Rpcs.new parent_rpcs
                  end
                end

                ##
                # Configuration for the channel pool
                # @return [::Gapic::ServiceStub::ChannelPool::Configuration]
                #
                def channel_pool
                  @channel_pool ||= ::Gapic::ServiceStub::ChannelPool::Configuration.new
                end

                ##
                # Configuration RPC class for the IssueResolutionService API.
                #
                # Includes fields providing the configuration for each RPC in this service.
                # Each configuration object is of type `Gapic::Config::Method` and includes
                # the following configuration fields:
                #
                #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
                #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
                #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
                #     include the following keys:
                #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
                #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
                #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
                #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
                #         trigger a retry.
                #
                class Rpcs
                  ##
                  # RPC-specific configuration for `render_account_issues`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :render_account_issues
                  ##
                  # RPC-specific configuration for `render_product_issues`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :render_product_issues
                  ##
                  # RPC-specific configuration for `trigger_action`
                  # @return [::Gapic::Config::Method]
                  #
                  attr_reader :trigger_action

                  # @private
                  def initialize parent_rpcs = nil
                    render_account_issues_config = parent_rpcs.render_account_issues if parent_rpcs.respond_to? :render_account_issues
                    @render_account_issues = ::Gapic::Config::Method.new render_account_issues_config
                    render_product_issues_config = parent_rpcs.render_product_issues if parent_rpcs.respond_to? :render_product_issues
                    @render_product_issues = ::Gapic::Config::Method.new render_product_issues_config
                    trigger_action_config = parent_rpcs.trigger_action if parent_rpcs.respond_to? :trigger_action
                    @trigger_action = ::Gapic::Config::Method.new trigger_action_config

                    yield self if block_given?
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end
