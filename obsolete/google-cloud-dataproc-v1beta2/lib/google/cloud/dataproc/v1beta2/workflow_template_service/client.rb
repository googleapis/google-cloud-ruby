# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/dataproc/v1beta2/workflow_templates_pb"

module Google
  module Cloud
    module Dataproc
      module V1beta2
        module WorkflowTemplateService
          ##
          # Client for the WorkflowTemplateService service.
          #
          # The API interface for managing Workflow Templates in the
          # Dataproc API.
          #
          class Client
            include Paths

            # @private
            attr_reader :workflow_template_service_stub

            ##
            # Configure the WorkflowTemplateService Client class.
            #
            # See {::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all WorkflowTemplateService clients
            #   ::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Dataproc", "V1beta2"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.rpcs.create_workflow_template.timeout = 600.0
                default_config.rpcs.create_workflow_template.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.get_workflow_template.timeout = 600.0
                default_config.rpcs.get_workflow_template.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [4, 13, 14]
                }

                default_config.rpcs.instantiate_workflow_template.timeout = 600.0
                default_config.rpcs.instantiate_workflow_template.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.instantiate_inline_workflow_template.timeout = 600.0
                default_config.rpcs.instantiate_inline_workflow_template.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.update_workflow_template.timeout = 600.0
                default_config.rpcs.update_workflow_template.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.list_workflow_templates.timeout = 600.0
                default_config.rpcs.list_workflow_templates.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [4, 13, 14]
                }

                default_config.rpcs.delete_workflow_template.timeout = 600.0
                default_config.rpcs.delete_workflow_template.retry_policy = {
                  initial_delay: 0.1, max_delay: 60.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the WorkflowTemplateService Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new WorkflowTemplateService client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the WorkflowTemplateService client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/dataproc/v1beta2/workflow_templates_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @operations_client = Operations.new do |config|
                config.credentials = credentials
                config.endpoint = @config.endpoint
              end

              @workflow_template_service_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            ##
            # Get the associated client for long-running operations.
            #
            # @return [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Operations]
            #
            attr_reader :operations_client

            # Service calls

            ##
            # Creates new workflow template.
            #
            # @overload create_workflow_template(request, options = nil)
            #   Pass arguments to `create_workflow_template` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::CreateWorkflowTemplateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::CreateWorkflowTemplateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_workflow_template(parent: nil, template: nil)
            #   Pass arguments to `create_workflow_template` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The resource name of the region or location, as described
            #     in https://cloud.google.com/apis/design/resource_names.
            #
            #     * For `projects.regions.workflowTemplates,create`, the resource name of the
            #       region has the following format:
            #       `projects/{project_id}/regions/{region}`
            #
            #     * For `projects.locations.workflowTemplates.create`, the resource name of
            #       the location has the following format:
            #       `projects/{project_id}/locations/{location}`
            #   @param template [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate, ::Hash]
            #     Required. The Dataproc workflow template to create.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def create_workflow_template request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::CreateWorkflowTemplateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_workflow_template.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_workflow_template.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_workflow_template.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :create_workflow_template, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Retrieves the latest workflow template.
            #
            # Can retrieve previously instantiated template by specifying optional
            # version parameter.
            #
            # @overload get_workflow_template(request, options = nil)
            #   Pass arguments to `get_workflow_template` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::GetWorkflowTemplateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::GetWorkflowTemplateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_workflow_template(name: nil, version: nil)
            #   Pass arguments to `get_workflow_template` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the workflow template, as described
            #     in https://cloud.google.com/apis/design/resource_names.
            #
            #     * For `projects.regions.workflowTemplates.get`, the resource name of the
            #       template has the following format:
            #       `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}`
            #
            #     * For `projects.locations.workflowTemplates.get`, the resource name of the
            #       template has the following format:
            #       `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
            #   @param version [::Integer]
            #     Optional. The version of workflow template to retrieve. Only previously
            #     instantiated versions can be retrieved.
            #
            #     If unspecified, retrieves the current version.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_workflow_template request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::GetWorkflowTemplateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_workflow_template.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_workflow_template.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_workflow_template.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :get_workflow_template, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Instantiates a template and begins execution.
            #
            # The returned Operation can be used to track execution of
            # workflow by polling
            # operations.get.
            # The Operation will complete when entire workflow is finished.
            #
            # The running workflow can be aborted via
            # operations.cancel.
            # This will cause any inflight jobs to be cancelled and workflow-owned
            # clusters to be deleted.
            #
            # The {::Google::Longrunning::Operation#metadata Operation.metadata} will be
            # WorkflowMetadata.
            # Also see [Using
            # WorkflowMetadata](https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
            #
            # On successful completion,
            # {::Google::Longrunning::Operation#response Operation.response} will be
            # {::Google::Protobuf::Empty Empty}.
            #
            # @overload instantiate_workflow_template(request, options = nil)
            #   Pass arguments to `instantiate_workflow_template` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::InstantiateWorkflowTemplateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::InstantiateWorkflowTemplateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload instantiate_workflow_template(name: nil, version: nil, instance_id: nil, request_id: nil, parameters: nil)
            #   Pass arguments to `instantiate_workflow_template` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the workflow template, as described
            #     in https://cloud.google.com/apis/design/resource_names.
            #
            #     * For `projects.regions.workflowTemplates.instantiate`, the resource name
            #     of the template has the following format:
            #       `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}`
            #
            #     * For `projects.locations.workflowTemplates.instantiate`, the resource name
            #       of the template has the following format:
            #       `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
            #   @param version [::Integer]
            #     Optional. The version of workflow template to instantiate. If specified,
            #     the workflow will be instantiated only if the current version of
            #     the workflow template has the supplied version.
            #
            #     This option cannot be used to instantiate a previous version of
            #     workflow template.
            #   @param instance_id [::String]
            #     Deprecated. Please use `request_id` field instead.
            #   @param request_id [::String]
            #     Optional. A tag that prevents multiple concurrent workflow
            #     instances with the same tag from running. This mitigates risk of
            #     concurrent instances started due to retries.
            #
            #     It is recommended to always set this value to a
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
            #
            #     The tag must contain only letters (a-z, A-Z), numbers (0-9),
            #     underscores (_), and hyphens (-). The maximum length is 40 characters.
            #   @param parameters [::Hash{::String => ::String}]
            #     Optional. Map from parameter names to values that should be used for those
            #     parameters. Values may not exceed 100 characters.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def instantiate_workflow_template request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::InstantiateWorkflowTemplateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.instantiate_workflow_template.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.instantiate_workflow_template.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.instantiate_workflow_template.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :instantiate_workflow_template, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Instantiates a template and begins execution.
            #
            # This method is equivalent to executing the sequence
            # {::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client#create_workflow_template CreateWorkflowTemplate},
            # {::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client#instantiate_workflow_template InstantiateWorkflowTemplate},
            # {::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client#delete_workflow_template DeleteWorkflowTemplate}.
            #
            # The returned Operation can be used to track execution of
            # workflow by polling
            # operations.get.
            # The Operation will complete when entire workflow is finished.
            #
            # The running workflow can be aborted via
            # operations.cancel.
            # This will cause any inflight jobs to be cancelled and workflow-owned
            # clusters to be deleted.
            #
            # The {::Google::Longrunning::Operation#metadata Operation.metadata} will be
            # [WorkflowMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata).
            # Also see [Using
            # WorkflowMetadata](https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).
            #
            # On successful completion,
            # {::Google::Longrunning::Operation#response Operation.response} will be
            # {::Google::Protobuf::Empty Empty}.
            #
            # @overload instantiate_inline_workflow_template(request, options = nil)
            #   Pass arguments to `instantiate_inline_workflow_template` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::InstantiateInlineWorkflowTemplateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::InstantiateInlineWorkflowTemplateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload instantiate_inline_workflow_template(parent: nil, template: nil, instance_id: nil, request_id: nil)
            #   Pass arguments to `instantiate_inline_workflow_template` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The resource name of the region or location, as described
            #     in https://cloud.google.com/apis/design/resource_names.
            #
            #     * For `projects.regions.workflowTemplates,instantiateinline`, the resource
            #       name of the region has the following format:
            #       `projects/{project_id}/regions/{region}`
            #
            #     * For `projects.locations.workflowTemplates.instantiateinline`, the
            #       resource name of the location has the following format:
            #       `projects/{project_id}/locations/{location}`
            #   @param template [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate, ::Hash]
            #     Required. The workflow template to instantiate.
            #   @param instance_id [::String]
            #     Deprecated. Please use `request_id` field instead.
            #   @param request_id [::String]
            #     Optional. A tag that prevents multiple concurrent workflow
            #     instances with the same tag from running. This mitigates risk of
            #     concurrent instances started due to retries.
            #
            #     It is recommended to always set this value to a
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
            #
            #     The tag must contain only letters (a-z, A-Z), numbers (0-9),
            #     underscores (_), and hyphens (-). The maximum length is 40 characters.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def instantiate_inline_workflow_template request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::InstantiateInlineWorkflowTemplateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.instantiate_inline_workflow_template.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.instantiate_inline_workflow_template.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.instantiate_inline_workflow_template.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :instantiate_inline_workflow_template, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates (replaces) workflow template. The updated template
            # must contain version that matches the current server version.
            #
            # @overload update_workflow_template(request, options = nil)
            #   Pass arguments to `update_workflow_template` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::UpdateWorkflowTemplateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::UpdateWorkflowTemplateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_workflow_template(template: nil)
            #   Pass arguments to `update_workflow_template` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param template [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate, ::Hash]
            #     Required. The updated workflow template.
            #
            #     The `template.version` field must match the current version.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def update_workflow_template request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::UpdateWorkflowTemplateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_workflow_template.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "template.name" => request.template.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_workflow_template.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_workflow_template.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :update_workflow_template, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists workflows that match the specified filter in the request.
            #
            # @overload list_workflow_templates(request, options = nil)
            #   Pass arguments to `list_workflow_templates` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::ListWorkflowTemplatesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::ListWorkflowTemplatesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_workflow_templates(parent: nil, page_size: nil, page_token: nil)
            #   Pass arguments to `list_workflow_templates` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The resource name of the region or location, as described
            #     in https://cloud.google.com/apis/design/resource_names.
            #
            #     * For `projects.regions.workflowTemplates,list`, the resource
            #       name of the region has the following format:
            #       `projects/{project_id}/regions/{region}`
            #
            #     * For `projects.locations.workflowTemplates.list`, the
            #       resource name of the location has the following format:
            #       `projects/{project_id}/locations/{location}`
            #   @param page_size [::Integer]
            #     Optional. The maximum number of results to return in each response.
            #   @param page_token [::String]
            #     Optional. The page token, returned by a previous call, to request the
            #     next page of results.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Dataproc::V1beta2::WorkflowTemplate>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def list_workflow_templates request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::ListWorkflowTemplatesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_workflow_templates.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "parent" => request.parent
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_workflow_templates.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_workflow_templates.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :list_workflow_templates, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @workflow_template_service_stub, :list_workflow_templates, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a workflow template. It does not cancel in-progress workflows.
            #
            # @overload delete_workflow_template(request, options = nil)
            #   Pass arguments to `delete_workflow_template` via a request object, either of type
            #   {::Google::Cloud::Dataproc::V1beta2::DeleteWorkflowTemplateRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Dataproc::V1beta2::DeleteWorkflowTemplateRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_workflow_template(name: nil, version: nil)
            #   Pass arguments to `delete_workflow_template` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the workflow template, as described
            #     in https://cloud.google.com/apis/design/resource_names.
            #
            #     * For `projects.regions.workflowTemplates.delete`, the resource name
            #     of the template has the following format:
            #       `projects/{project_id}/regions/{region}/workflowTemplates/{template_id}`
            #
            #     * For `projects.locations.workflowTemplates.instantiate`, the resource name
            #       of the template has the following format:
            #       `projects/{project_id}/locations/{location}/workflowTemplates/{template_id}`
            #   @param version [::Integer]
            #     Optional. The version of workflow template to delete. If specified,
            #     will only delete the template if the current server version matches
            #     specified version.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Protobuf::Empty]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Protobuf::Empty]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def delete_workflow_template request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Dataproc::V1beta2::DeleteWorkflowTemplateRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_workflow_template.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Dataproc::V1beta2::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_workflow_template.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_workflow_template.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @workflow_template_service_stub.call_rpc :delete_workflow_template, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the WorkflowTemplateService API.
            #
            # This class represents the configuration for WorkflowTemplateService,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # create_workflow_template to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_workflow_template.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Dataproc::V1beta2::WorkflowTemplateService::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.create_workflow_template.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"dataproc.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "dataproc.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the WorkflowTemplateService API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `create_workflow_template`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_workflow_template
                ##
                # RPC-specific configuration for `get_workflow_template`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_workflow_template
                ##
                # RPC-specific configuration for `instantiate_workflow_template`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :instantiate_workflow_template
                ##
                # RPC-specific configuration for `instantiate_inline_workflow_template`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :instantiate_inline_workflow_template
                ##
                # RPC-specific configuration for `update_workflow_template`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_workflow_template
                ##
                # RPC-specific configuration for `list_workflow_templates`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_workflow_templates
                ##
                # RPC-specific configuration for `delete_workflow_template`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_workflow_template

                # @private
                def initialize parent_rpcs = nil
                  create_workflow_template_config = parent_rpcs.create_workflow_template if parent_rpcs.respond_to? :create_workflow_template
                  @create_workflow_template = ::Gapic::Config::Method.new create_workflow_template_config
                  get_workflow_template_config = parent_rpcs.get_workflow_template if parent_rpcs.respond_to? :get_workflow_template
                  @get_workflow_template = ::Gapic::Config::Method.new get_workflow_template_config
                  instantiate_workflow_template_config = parent_rpcs.instantiate_workflow_template if parent_rpcs.respond_to? :instantiate_workflow_template
                  @instantiate_workflow_template = ::Gapic::Config::Method.new instantiate_workflow_template_config
                  instantiate_inline_workflow_template_config = parent_rpcs.instantiate_inline_workflow_template if parent_rpcs.respond_to? :instantiate_inline_workflow_template
                  @instantiate_inline_workflow_template = ::Gapic::Config::Method.new instantiate_inline_workflow_template_config
                  update_workflow_template_config = parent_rpcs.update_workflow_template if parent_rpcs.respond_to? :update_workflow_template
                  @update_workflow_template = ::Gapic::Config::Method.new update_workflow_template_config
                  list_workflow_templates_config = parent_rpcs.list_workflow_templates if parent_rpcs.respond_to? :list_workflow_templates
                  @list_workflow_templates = ::Gapic::Config::Method.new list_workflow_templates_config
                  delete_workflow_template_config = parent_rpcs.delete_workflow_template if parent_rpcs.respond_to? :delete_workflow_template
                  @delete_workflow_template = ::Gapic::Config::Method.new delete_workflow_template_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
