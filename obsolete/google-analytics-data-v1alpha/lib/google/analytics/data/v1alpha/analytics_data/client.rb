# frozen_string_literal: true

# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/analytics/data/v1alpha/analytics_data_api_pb"

module Google
  module Analytics
    module Data
      module V1alpha
        module AnalyticsData
          ##
          # Client for the AnalyticsData service.
          #
          # Google Analytics reporting data service.
          #
          class Client
            include Paths

            # @private
            attr_reader :analytics_data_stub

            ##
            # Configure the AnalyticsData Client class.
            #
            # See {::Google::Analytics::Data::V1alpha::AnalyticsData::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all AnalyticsData clients
            #   ::Google::Analytics::Data::V1alpha::AnalyticsData::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Analytics", "Data", "V1alpha"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0
                default_config.retry_policy = {
                  initial_delay: 1.0, max_delay: 60.0, multiplier: 1.3, retry_codes: [2]
                }

                default_config.rpcs.run_report.timeout = 60.0

                default_config.rpcs.run_pivot_report.timeout = 60.0

                default_config.rpcs.batch_run_reports.timeout = 60.0

                default_config.rpcs.batch_run_pivot_reports.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the AnalyticsData Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Analytics::Data::V1alpha::AnalyticsData::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new AnalyticsData client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Analytics::Data::V1alpha::AnalyticsData::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Analytics::Data::V1alpha::AnalyticsData::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the AnalyticsData client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/analytics/data/v1alpha/analytics_data_api_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @analytics_data_stub = ::Gapic::ServiceStub.new(
                ::Google::Analytics::Data::V1alpha::AlphaAnalyticsData::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            # Service calls

            ##
            # Returns a customized report of your Google Analytics event data. Reports
            # contain statistics derived from data collected by the Google Analytics
            # tracking code. The data returned from the API is as a table with columns
            # for the requested dimensions and metrics. Metrics are individual
            # measurements of user activity on your property, such as active users or
            # event count. Dimensions break down metrics across some common criteria,
            # such as country or event name.
            #
            # @overload run_report(request, options = nil)
            #   Pass arguments to `run_report` via a request object, either of type
            #   {::Google::Analytics::Data::V1alpha::RunReportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Analytics::Data::V1alpha::RunReportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload run_report(entity: nil, dimensions: nil, metrics: nil, date_ranges: nil, offset: nil, limit: nil, metric_aggregations: nil, dimension_filter: nil, metric_filter: nil, order_bys: nil, currency_code: nil, cohort_spec: nil, keep_empty_rows: nil, return_property_quota: nil)
            #   Pass arguments to `run_report` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param entity [::Google::Analytics::Data::V1alpha::Entity, ::Hash]
            #     A property whose events are tracked. Within a batch request, this entity
            #     should either be unspecified or consistent with the batch-level entity.
            #   @param dimensions [::Array<::Google::Analytics::Data::V1alpha::Dimension, ::Hash>]
            #     The dimensions requested and displayed.
            #   @param metrics [::Array<::Google::Analytics::Data::V1alpha::Metric, ::Hash>]
            #     The metrics requested and displayed.
            #   @param date_ranges [::Array<::Google::Analytics::Data::V1alpha::DateRange, ::Hash>]
            #     Date ranges of data to read. If multiple date ranges are requested, each
            #     response row will contain a zero based date range index. If two date
            #     ranges overlap, the event data for the overlapping days is included in the
            #     response rows for both date ranges. In a cohort request, this `dateRanges`
            #     must be unspecified.
            #   @param offset [::Integer]
            #     The row count of the start row. The first row is counted as row 0.
            #
            #     To learn more about this pagination parameter, see
            #     [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
            #   @param limit [::Integer]
            #     The number of rows to return. If unspecified, 10 rows are returned. If
            #     -1, all rows are returned.
            #
            #     To learn more about this pagination parameter, see
            #     [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
            #   @param metric_aggregations [::Array<::Google::Analytics::Data::V1alpha::MetricAggregation>]
            #     Aggregation of metrics. Aggregated metric values will be shown in rows
            #     where the dimension_values are set to "RESERVED_(MetricAggregation)".
            #   @param dimension_filter [::Google::Analytics::Data::V1alpha::FilterExpression, ::Hash]
            #     The filter clause of dimensions. Dimensions must be requested to be used in
            #     this filter. Metrics cannot be used in this filter.
            #   @param metric_filter [::Google::Analytics::Data::V1alpha::FilterExpression, ::Hash]
            #     The filter clause of metrics. Applied at post aggregation phase, similar to
            #     SQL having-clause. Metrics must be requested to be used in this filter.
            #     Dimensions cannot be used in this filter.
            #   @param order_bys [::Array<::Google::Analytics::Data::V1alpha::OrderBy, ::Hash>]
            #     Specifies how rows are ordered in the response.
            #   @param currency_code [::String]
            #     A currency code in ISO4217 format, such as "AED", "USD", "JPY".
            #     If the field is empty, the report uses the entity's default currency.
            #   @param cohort_spec [::Google::Analytics::Data::V1alpha::CohortSpec, ::Hash]
            #     Cohort group associated with this request. If there is a cohort group
            #     in the request the 'cohort' dimension must be present.
            #   @param keep_empty_rows [::Boolean]
            #     If false or unspecified, each row with all metrics equal to 0 will not be
            #     returned. If true, these rows will be returned if they are not separately
            #     removed by a filter.
            #   @param return_property_quota [::Boolean]
            #     Toggles whether to return the current state of this Analytics Property's
            #     quota. Quota is returned in [PropertyQuota](#PropertyQuota).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Analytics::Data::V1alpha::RunReportResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Analytics::Data::V1alpha::RunReportResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def run_report request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Analytics::Data::V1alpha::RunReportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.run_report.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Analytics::Data::V1alpha::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.run_report.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.run_report.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @analytics_data_stub.call_rpc :run_report, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns a customized pivot report of your Google Analytics event data.
            # Pivot reports are more advanced and expressive formats than regular
            # reports. In a pivot report, dimensions are only visible if they are
            # included in a pivot. Multiple pivots can be specified to further dissect
            # your data.
            #
            # @overload run_pivot_report(request, options = nil)
            #   Pass arguments to `run_pivot_report` via a request object, either of type
            #   {::Google::Analytics::Data::V1alpha::RunPivotReportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Analytics::Data::V1alpha::RunPivotReportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload run_pivot_report(entity: nil, dimensions: nil, metrics: nil, dimension_filter: nil, metric_filter: nil, pivots: nil, date_ranges: nil, currency_code: nil, cohort_spec: nil, keep_empty_rows: nil, return_property_quota: nil)
            #   Pass arguments to `run_pivot_report` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param entity [::Google::Analytics::Data::V1alpha::Entity, ::Hash]
            #     A property whose events are tracked. Within a batch request, this entity
            #     should either be unspecified or consistent with the batch-level entity.
            #   @param dimensions [::Array<::Google::Analytics::Data::V1alpha::Dimension, ::Hash>]
            #     The dimensions requested. All defined dimensions must be used by one of the
            #     following: dimension_expression, dimension_filter, pivots, order_bys.
            #   @param metrics [::Array<::Google::Analytics::Data::V1alpha::Metric, ::Hash>]
            #     The metrics requested, at least one metric needs to be specified. All
            #     defined metrics must be used by one of the following: metric_expression,
            #     metric_filter, order_bys.
            #   @param dimension_filter [::Google::Analytics::Data::V1alpha::FilterExpression, ::Hash]
            #     The filter clause of dimensions. Dimensions must be requested to be used in
            #     this filter. Metrics cannot be used in this filter.
            #   @param metric_filter [::Google::Analytics::Data::V1alpha::FilterExpression, ::Hash]
            #     The filter clause of metrics. Applied at post aggregation phase, similar to
            #     SQL having-clause. Metrics must be requested to be used in this filter.
            #     Dimensions cannot be used in this filter.
            #   @param pivots [::Array<::Google::Analytics::Data::V1alpha::Pivot, ::Hash>]
            #     Describes the visual format of the report's dimensions in columns or rows.
            #     The union of the fieldNames (dimension names) in all pivots must be a
            #     subset of dimension names defined in Dimensions. No two pivots can share a
            #     dimension. A dimension is only visible if it appears in a pivot.
            #   @param date_ranges [::Array<::Google::Analytics::Data::V1alpha::DateRange, ::Hash>]
            #     The date range to retrieve event data for the report. If multiple date
            #     ranges are specified, event data from each date range is used in the
            #     report. A special dimension with field name "dateRange" can be included in
            #     a Pivot's field names; if included, the report compares between date
            #     ranges. In a cohort request, this `dateRanges` must be unspecified.
            #   @param currency_code [::String]
            #     A currency code in ISO4217 format, such as "AED", "USD", "JPY".
            #     If the field is empty, the report uses the entity's default currency.
            #   @param cohort_spec [::Google::Analytics::Data::V1alpha::CohortSpec, ::Hash]
            #     Cohort group associated with this request. If there is a cohort group
            #     in the request the 'cohort' dimension must be present.
            #   @param keep_empty_rows [::Boolean]
            #     If false or unspecified, each row with all metrics equal to 0 will not be
            #     returned. If true, these rows will be returned if they are not separately
            #     removed by a filter.
            #   @param return_property_quota [::Boolean]
            #     Toggles whether to return the current state of this Analytics Property's
            #     quota. Quota is returned in [PropertyQuota](#PropertyQuota).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Analytics::Data::V1alpha::RunPivotReportResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Analytics::Data::V1alpha::RunPivotReportResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def run_pivot_report request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Analytics::Data::V1alpha::RunPivotReportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.run_pivot_report.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Analytics::Data::V1alpha::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.run_pivot_report.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.run_pivot_report.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @analytics_data_stub.call_rpc :run_pivot_report, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns multiple reports in a batch. All reports must be for the same
            # Entity.
            #
            # @overload batch_run_reports(request, options = nil)
            #   Pass arguments to `batch_run_reports` via a request object, either of type
            #   {::Google::Analytics::Data::V1alpha::BatchRunReportsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Analytics::Data::V1alpha::BatchRunReportsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_run_reports(entity: nil, requests: nil)
            #   Pass arguments to `batch_run_reports` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param entity [::Google::Analytics::Data::V1alpha::Entity, ::Hash]
            #     A property whose events are tracked. This entity must be specified for the
            #     batch. The entity within RunReportRequest may either be unspecified or
            #     consistent with this entity.
            #   @param requests [::Array<::Google::Analytics::Data::V1alpha::RunReportRequest, ::Hash>]
            #     Individual requests. Each request has a separate report response. Each
            #     batch request is allowed up to 5 requests.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Analytics::Data::V1alpha::BatchRunReportsResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Analytics::Data::V1alpha::BatchRunReportsResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_run_reports request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Analytics::Data::V1alpha::BatchRunReportsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_run_reports.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Analytics::Data::V1alpha::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_run_reports.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_run_reports.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @analytics_data_stub.call_rpc :batch_run_reports, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns multiple pivot reports in a batch. All reports must be for the same
            # Entity.
            #
            # @overload batch_run_pivot_reports(request, options = nil)
            #   Pass arguments to `batch_run_pivot_reports` via a request object, either of type
            #   {::Google::Analytics::Data::V1alpha::BatchRunPivotReportsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Analytics::Data::V1alpha::BatchRunPivotReportsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload batch_run_pivot_reports(entity: nil, requests: nil)
            #   Pass arguments to `batch_run_pivot_reports` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param entity [::Google::Analytics::Data::V1alpha::Entity, ::Hash]
            #     A property whose events are tracked. This entity must be specified for the
            #     batch. The entity within RunPivotReportRequest may either be unspecified or
            #     consistent with this entity.
            #   @param requests [::Array<::Google::Analytics::Data::V1alpha::RunPivotReportRequest, ::Hash>]
            #     Individual requests. Each request has a separate pivot report response.
            #     Each batch request is allowed up to 5 requests.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Analytics::Data::V1alpha::BatchRunPivotReportsResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Analytics::Data::V1alpha::BatchRunPivotReportsResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def batch_run_pivot_reports request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Analytics::Data::V1alpha::BatchRunPivotReportsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.batch_run_pivot_reports.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Analytics::Data::V1alpha::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              options.apply_defaults timeout:      @config.rpcs.batch_run_pivot_reports.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.batch_run_pivot_reports.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @analytics_data_stub.call_rpc :batch_run_pivot_reports, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Returns metadata for dimensions and metrics available in reporting methods.
            # Used to explore the dimensions and metrics. In this method, a Google
            # Analytics GA4 Property Identifier is specified in the request, and
            # the metadata response includes Custom dimensions and metrics as well as
            # Universal metadata.
            #
            # For example if a custom metric with parameter name `levels_unlocked` is
            # registered to a property, the Metadata response will contain
            # `customEvent:levels_unlocked`. Universal metadata are dimensions and
            # metrics applicable to any property such as `country` and `totalUsers`.
            #
            # @overload get_metadata(request, options = nil)
            #   Pass arguments to `get_metadata` via a request object, either of type
            #   {::Google::Analytics::Data::V1alpha::GetMetadataRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Analytics::Data::V1alpha::GetMetadataRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_metadata(name: nil)
            #   Pass arguments to `get_metadata` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The resource name of the metadata to retrieve. This name field is
            #     specified in the URL path and not URL parameters. Property is a numeric
            #     Google Analytics GA4 Property identifier. To learn more, see [where to find
            #     your Property
            #     ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
            #
            #     Example: properties/1234/metadata
            #
            #     Set the Property ID to 0 for dimensions and metrics common to all
            #     properties. In this special mode, this method will not return custom
            #     dimensions and metrics.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Analytics::Data::V1alpha::Metadata]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Analytics::Data::V1alpha::Metadata]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def get_metadata request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Analytics::Data::V1alpha::GetMetadataRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_metadata.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Analytics::Data::V1alpha::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "name" => request.name
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_metadata.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_metadata.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @analytics_data_stub.call_rpc :get_metadata, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # The Google Analytics Realtime API returns a customized report of realtime
            # event data for your property. These reports show events and usage from the
            # last 30 minutes.
            #
            # @overload run_realtime_report(request, options = nil)
            #   Pass arguments to `run_realtime_report` via a request object, either of type
            #   {::Google::Analytics::Data::V1alpha::RunRealtimeReportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Analytics::Data::V1alpha::RunRealtimeReportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload run_realtime_report(property: nil, dimensions: nil, metrics: nil, limit: nil, dimension_filter: nil, metric_filter: nil, metric_aggregations: nil, order_bys: nil, return_property_quota: nil)
            #   Pass arguments to `run_realtime_report` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param property [::String]
            #     A Google Analytics GA4 property identifier whose events are tracked.
            #     Specified in the URL path and not the body. To learn more, see [where to
            #     find your Property
            #     ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
            #
            #     Example: properties/1234
            #   @param dimensions [::Array<::Google::Analytics::Data::V1alpha::Dimension, ::Hash>]
            #     The dimensions requested and displayed.
            #   @param metrics [::Array<::Google::Analytics::Data::V1alpha::Metric, ::Hash>]
            #     The metrics requested and displayed.
            #   @param limit [::Integer]
            #     The number of rows to return. If unspecified, 10 rows are returned. If
            #     -1, all rows are returned.
            #   @param dimension_filter [::Google::Analytics::Data::V1alpha::FilterExpression, ::Hash]
            #     The filter clause of dimensions. Dimensions must be requested to be used in
            #     this filter. Metrics cannot be used in this filter.
            #   @param metric_filter [::Google::Analytics::Data::V1alpha::FilterExpression, ::Hash]
            #     The filter clause of metrics. Applied at post aggregation phase, similar to
            #     SQL having-clause. Metrics must be requested to be used in this filter.
            #     Dimensions cannot be used in this filter.
            #   @param metric_aggregations [::Array<::Google::Analytics::Data::V1alpha::MetricAggregation>]
            #     Aggregation of metrics. Aggregated metric values will be shown in rows
            #     where the dimension_values are set to "RESERVED_(MetricAggregation)".
            #   @param order_bys [::Array<::Google::Analytics::Data::V1alpha::OrderBy, ::Hash>]
            #     Specifies how rows are ordered in the response.
            #   @param return_property_quota [::Boolean]
            #     Toggles whether to return the current state of this Analytics Property's
            #     Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Analytics::Data::V1alpha::RunRealtimeReportResponse]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Analytics::Data::V1alpha::RunRealtimeReportResponse]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            def run_realtime_report request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Analytics::Data::V1alpha::RunRealtimeReportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.run_realtime_report.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Analytics::Data::V1alpha::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {
                "property" => request.property
              }
              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.run_realtime_report.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.run_realtime_report.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @analytics_data_stub.call_rpc :run_realtime_report, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the AnalyticsData API.
            #
            # This class represents the configuration for AnalyticsData,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Analytics::Data::V1alpha::AnalyticsData::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # run_report to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Analytics::Data::V1alpha::AnalyticsData::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.run_report.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Analytics::Data::V1alpha::AnalyticsData::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.run_report.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"analyticsdata.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "analyticsdata.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the AnalyticsData API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `run_report`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :run_report
                ##
                # RPC-specific configuration for `run_pivot_report`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :run_pivot_report
                ##
                # RPC-specific configuration for `batch_run_reports`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_run_reports
                ##
                # RPC-specific configuration for `batch_run_pivot_reports`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :batch_run_pivot_reports
                ##
                # RPC-specific configuration for `get_metadata`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_metadata
                ##
                # RPC-specific configuration for `run_realtime_report`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :run_realtime_report

                # @private
                def initialize parent_rpcs = nil
                  run_report_config = parent_rpcs.run_report if parent_rpcs.respond_to? :run_report
                  @run_report = ::Gapic::Config::Method.new run_report_config
                  run_pivot_report_config = parent_rpcs.run_pivot_report if parent_rpcs.respond_to? :run_pivot_report
                  @run_pivot_report = ::Gapic::Config::Method.new run_pivot_report_config
                  batch_run_reports_config = parent_rpcs.batch_run_reports if parent_rpcs.respond_to? :batch_run_reports
                  @batch_run_reports = ::Gapic::Config::Method.new batch_run_reports_config
                  batch_run_pivot_reports_config = parent_rpcs.batch_run_pivot_reports if parent_rpcs.respond_to? :batch_run_pivot_reports
                  @batch_run_pivot_reports = ::Gapic::Config::Method.new batch_run_pivot_reports_config
                  get_metadata_config = parent_rpcs.get_metadata if parent_rpcs.respond_to? :get_metadata
                  @get_metadata = ::Gapic::Config::Method.new get_metadata_config
                  run_realtime_report_config = parent_rpcs.run_realtime_report if parent_rpcs.respond_to? :run_realtime_report
                  @run_realtime_report = ::Gapic::Config::Method.new run_realtime_report_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
