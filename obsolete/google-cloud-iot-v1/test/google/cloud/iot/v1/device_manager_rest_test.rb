# frozen_string_literal: true

# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "helper"
require "gapic/rest"
require "google/cloud/iot/v1/device_manager_pb"
require "google/cloud/iot/v1/device_manager/rest"


class ::Google::Cloud::Iot::V1::DeviceManager::Rest::ClientTest < Minitest::Test
  class ClientStub
    attr_accessor :call_count, :requests

    def initialize response, &block
      @response = response
      @block = block
      @call_count = 0
      @requests = []
    end

    def make_get_request uri:, params: {}, options: {}
      make_http_request :get, uri: uri, body: nil, params: params, options: options
    end

    def make_delete_request uri:, params: {}, options: {}
      make_http_request :delete, uri: uri, body: nil, params: params, options: options
    end

    def make_post_request uri:, body: nil, params: {}, options: {}
      make_http_request :post, uri: uri, body: body, params: params, options: options
    end

    def make_patch_request uri:, body:, params: {}, options: {}
      make_http_request :patch, uri: uri, body: body, params: params, options: options
    end

    def make_put_request uri:, body:, params: {}, options: {}
      make_http_request :put, uri: uri, body: body, params: params, options: options
    end

    def make_http_request *args, **kwargs
      @call_count += 1

      @requests << @block&.call(*args, **kwargs)

      @response
    end

    def endpoint
      "endpoint.example.com"
    end

    def universe_domain
      "example.com"
    end
  end

  def test_create_device_registry
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::DeviceRegistry.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    device_registry = {}

    create_device_registry_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_create_device_registry_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, create_device_registry_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.create_device_registry({ parent: parent, device_registry: device_registry }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.create_device_registry parent: parent, device_registry: device_registry do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.create_device_registry ::Google::Cloud::Iot::V1::CreateDeviceRegistryRequest.new(parent: parent, device_registry: device_registry) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.create_device_registry({ parent: parent, device_registry: device_registry }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.create_device_registry(::Google::Cloud::Iot::V1::CreateDeviceRegistryRequest.new(parent: parent, device_registry: device_registry), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, create_device_registry_client_stub.call_count
      end
    end
  end

  def test_get_device_registry
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::DeviceRegistry.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    get_device_registry_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_get_device_registry_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, get_device_registry_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.get_device_registry({ name: name }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.get_device_registry name: name do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.get_device_registry ::Google::Cloud::Iot::V1::GetDeviceRegistryRequest.new(name: name) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.get_device_registry({ name: name }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.get_device_registry(::Google::Cloud::Iot::V1::GetDeviceRegistryRequest.new(name: name), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, get_device_registry_client_stub.call_count
      end
    end
  end

  def test_update_device_registry
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::DeviceRegistry.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    device_registry = {}
    update_mask = {}

    update_device_registry_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_update_device_registry_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, update_device_registry_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.update_device_registry({ device_registry: device_registry, update_mask: update_mask }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.update_device_registry device_registry: device_registry, update_mask: update_mask do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.update_device_registry ::Google::Cloud::Iot::V1::UpdateDeviceRegistryRequest.new(device_registry: device_registry, update_mask: update_mask) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.update_device_registry({ device_registry: device_registry, update_mask: update_mask }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.update_device_registry(::Google::Cloud::Iot::V1::UpdateDeviceRegistryRequest.new(device_registry: device_registry, update_mask: update_mask), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, update_device_registry_client_stub.call_count
      end
    end
  end

  def test_delete_device_registry
    # Create test objects.
    client_result = ::Google::Protobuf::Empty.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_device_registry_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_delete_device_registry_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, delete_device_registry_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.delete_device_registry({ name: name }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.delete_device_registry name: name do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.delete_device_registry ::Google::Cloud::Iot::V1::DeleteDeviceRegistryRequest.new(name: name) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.delete_device_registry({ name: name }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.delete_device_registry(::Google::Cloud::Iot::V1::DeleteDeviceRegistryRequest.new(name: name), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, delete_device_registry_client_stub.call_count
      end
    end
  end

  def test_list_device_registries
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::ListDeviceRegistriesResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    page_size = 42
    page_token = "hello world"

    list_device_registries_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_list_device_registries_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_device_registries_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list_device_registries({ parent: parent, page_size: page_size, page_token: page_token }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list_device_registries parent: parent, page_size: page_size, page_token: page_token do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list_device_registries ::Google::Cloud::Iot::V1::ListDeviceRegistriesRequest.new(parent: parent, page_size: page_size, page_token: page_token) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list_device_registries({ parent: parent, page_size: page_size, page_token: page_token }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list_device_registries(::Google::Cloud::Iot::V1::ListDeviceRegistriesRequest.new(parent: parent, page_size: page_size, page_token: page_token), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_device_registries_client_stub.call_count
      end
    end
  end

  def test_create_device
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::Device.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    device = {}

    create_device_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_create_device_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, create_device_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.create_device({ parent: parent, device: device }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.create_device parent: parent, device: device do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.create_device ::Google::Cloud::Iot::V1::CreateDeviceRequest.new(parent: parent, device: device) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.create_device({ parent: parent, device: device }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.create_device(::Google::Cloud::Iot::V1::CreateDeviceRequest.new(parent: parent, device: device), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, create_device_client_stub.call_count
      end
    end
  end

  def test_get_device
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::Device.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    field_mask = {}

    get_device_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_get_device_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, get_device_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.get_device({ name: name, field_mask: field_mask }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.get_device name: name, field_mask: field_mask do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.get_device ::Google::Cloud::Iot::V1::GetDeviceRequest.new(name: name, field_mask: field_mask) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.get_device({ name: name, field_mask: field_mask }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.get_device(::Google::Cloud::Iot::V1::GetDeviceRequest.new(name: name, field_mask: field_mask), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, get_device_client_stub.call_count
      end
    end
  end

  def test_update_device
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::Device.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    device = {}
    update_mask = {}

    update_device_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_update_device_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, update_device_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.update_device({ device: device, update_mask: update_mask }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.update_device device: device, update_mask: update_mask do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.update_device ::Google::Cloud::Iot::V1::UpdateDeviceRequest.new(device: device, update_mask: update_mask) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.update_device({ device: device, update_mask: update_mask }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.update_device(::Google::Cloud::Iot::V1::UpdateDeviceRequest.new(device: device, update_mask: update_mask), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, update_device_client_stub.call_count
      end
    end
  end

  def test_delete_device
    # Create test objects.
    client_result = ::Google::Protobuf::Empty.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"

    delete_device_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_delete_device_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, delete_device_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.delete_device({ name: name }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.delete_device name: name do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.delete_device ::Google::Cloud::Iot::V1::DeleteDeviceRequest.new(name: name) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.delete_device({ name: name }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.delete_device(::Google::Cloud::Iot::V1::DeleteDeviceRequest.new(name: name), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, delete_device_client_stub.call_count
      end
    end
  end

  def test_list_devices
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::ListDevicesResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    device_num_ids = [42]
    device_ids = ["hello world"]
    field_mask = {}
    gateway_list_options = {}
    page_size = 42
    page_token = "hello world"

    list_devices_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_list_devices_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_devices_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list_devices({ parent: parent, device_num_ids: device_num_ids, device_ids: device_ids, field_mask: field_mask, gateway_list_options: gateway_list_options, page_size: page_size, page_token: page_token }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list_devices parent: parent, device_num_ids: device_num_ids, device_ids: device_ids, field_mask: field_mask, gateway_list_options: gateway_list_options, page_size: page_size, page_token: page_token do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list_devices ::Google::Cloud::Iot::V1::ListDevicesRequest.new(parent: parent, device_num_ids: device_num_ids, device_ids: device_ids, field_mask: field_mask, gateway_list_options: gateway_list_options, page_size: page_size, page_token: page_token) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list_devices({ parent: parent, device_num_ids: device_num_ids, device_ids: device_ids, field_mask: field_mask, gateway_list_options: gateway_list_options, page_size: page_size, page_token: page_token }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list_devices(::Google::Cloud::Iot::V1::ListDevicesRequest.new(parent: parent, device_num_ids: device_num_ids, device_ids: device_ids, field_mask: field_mask, gateway_list_options: gateway_list_options, page_size: page_size, page_token: page_token), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_devices_client_stub.call_count
      end
    end
  end

  def test_modify_cloud_to_device_config
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::DeviceConfig.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    version_to_update = 42
    binary_data = "hello world"

    modify_cloud_to_device_config_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_modify_cloud_to_device_config_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, modify_cloud_to_device_config_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.modify_cloud_to_device_config({ name: name, version_to_update: version_to_update, binary_data: binary_data }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.modify_cloud_to_device_config name: name, version_to_update: version_to_update, binary_data: binary_data do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.modify_cloud_to_device_config ::Google::Cloud::Iot::V1::ModifyCloudToDeviceConfigRequest.new(name: name, version_to_update: version_to_update, binary_data: binary_data) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.modify_cloud_to_device_config({ name: name, version_to_update: version_to_update, binary_data: binary_data }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.modify_cloud_to_device_config(::Google::Cloud::Iot::V1::ModifyCloudToDeviceConfigRequest.new(name: name, version_to_update: version_to_update, binary_data: binary_data), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, modify_cloud_to_device_config_client_stub.call_count
      end
    end
  end

  def test_list_device_config_versions
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::ListDeviceConfigVersionsResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    num_versions = 42

    list_device_config_versions_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_list_device_config_versions_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_device_config_versions_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list_device_config_versions({ name: name, num_versions: num_versions }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list_device_config_versions name: name, num_versions: num_versions do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list_device_config_versions ::Google::Cloud::Iot::V1::ListDeviceConfigVersionsRequest.new(name: name, num_versions: num_versions) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list_device_config_versions({ name: name, num_versions: num_versions }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list_device_config_versions(::Google::Cloud::Iot::V1::ListDeviceConfigVersionsRequest.new(name: name, num_versions: num_versions), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_device_config_versions_client_stub.call_count
      end
    end
  end

  def test_list_device_states
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::ListDeviceStatesResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    num_states = 42

    list_device_states_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_list_device_states_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, list_device_states_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.list_device_states({ name: name, num_states: num_states }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.list_device_states name: name, num_states: num_states do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.list_device_states ::Google::Cloud::Iot::V1::ListDeviceStatesRequest.new(name: name, num_states: num_states) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.list_device_states({ name: name, num_states: num_states }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.list_device_states(::Google::Cloud::Iot::V1::ListDeviceStatesRequest.new(name: name, num_states: num_states), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, list_device_states_client_stub.call_count
      end
    end
  end

  def test_set_iam_policy
    # Create test objects.
    client_result = ::Google::Iam::V1::Policy.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    resource = "hello world"
    policy = {}
    update_mask = {}

    set_iam_policy_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_set_iam_policy_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, set_iam_policy_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.set_iam_policy({ resource: resource, policy: policy, update_mask: update_mask }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.set_iam_policy resource: resource, policy: policy, update_mask: update_mask do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.set_iam_policy ::Google::Iam::V1::SetIamPolicyRequest.new(resource: resource, policy: policy, update_mask: update_mask) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.set_iam_policy({ resource: resource, policy: policy, update_mask: update_mask }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.set_iam_policy(::Google::Iam::V1::SetIamPolicyRequest.new(resource: resource, policy: policy, update_mask: update_mask), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, set_iam_policy_client_stub.call_count
      end
    end
  end

  def test_get_iam_policy
    # Create test objects.
    client_result = ::Google::Iam::V1::Policy.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    resource = "hello world"
    options = {}

    get_iam_policy_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_get_iam_policy_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, get_iam_policy_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.get_iam_policy({ resource: resource, options: options }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.get_iam_policy resource: resource, options: options do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.get_iam_policy ::Google::Iam::V1::GetIamPolicyRequest.new(resource: resource, options: options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.get_iam_policy({ resource: resource, options: options }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.get_iam_policy(::Google::Iam::V1::GetIamPolicyRequest.new(resource: resource, options: options), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, get_iam_policy_client_stub.call_count
      end
    end
  end

  def test_test_iam_permissions
    # Create test objects.
    client_result = ::Google::Iam::V1::TestIamPermissionsResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    resource = "hello world"
    permissions = ["hello world"]

    test_iam_permissions_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_test_iam_permissions_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, test_iam_permissions_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.test_iam_permissions({ resource: resource, permissions: permissions }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.test_iam_permissions resource: resource, permissions: permissions do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.test_iam_permissions ::Google::Iam::V1::TestIamPermissionsRequest.new(resource: resource, permissions: permissions) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.test_iam_permissions({ resource: resource, permissions: permissions }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.test_iam_permissions(::Google::Iam::V1::TestIamPermissionsRequest.new(resource: resource, permissions: permissions), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, test_iam_permissions_client_stub.call_count
      end
    end
  end

  def test_send_command_to_device
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::SendCommandToDeviceResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    name = "hello world"
    binary_data = "hello world"
    subfolder = "hello world"

    send_command_to_device_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_send_command_to_device_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, send_command_to_device_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.send_command_to_device({ name: name, binary_data: binary_data, subfolder: subfolder }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.send_command_to_device name: name, binary_data: binary_data, subfolder: subfolder do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.send_command_to_device ::Google::Cloud::Iot::V1::SendCommandToDeviceRequest.new(name: name, binary_data: binary_data, subfolder: subfolder) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.send_command_to_device({ name: name, binary_data: binary_data, subfolder: subfolder }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.send_command_to_device(::Google::Cloud::Iot::V1::SendCommandToDeviceRequest.new(name: name, binary_data: binary_data, subfolder: subfolder), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, send_command_to_device_client_stub.call_count
      end
    end
  end

  def test_bind_device_to_gateway
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::BindDeviceToGatewayResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    gateway_id = "hello world"
    device_id = "hello world"

    bind_device_to_gateway_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_bind_device_to_gateway_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, bind_device_to_gateway_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.bind_device_to_gateway({ parent: parent, gateway_id: gateway_id, device_id: device_id }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.bind_device_to_gateway parent: parent, gateway_id: gateway_id, device_id: device_id do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.bind_device_to_gateway ::Google::Cloud::Iot::V1::BindDeviceToGatewayRequest.new(parent: parent, gateway_id: gateway_id, device_id: device_id) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.bind_device_to_gateway({ parent: parent, gateway_id: gateway_id, device_id: device_id }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.bind_device_to_gateway(::Google::Cloud::Iot::V1::BindDeviceToGatewayRequest.new(parent: parent, gateway_id: gateway_id, device_id: device_id), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, bind_device_to_gateway_client_stub.call_count
      end
    end
  end

  def test_unbind_device_from_gateway
    # Create test objects.
    client_result = ::Google::Cloud::Iot::V1::UnbindDeviceFromGatewayResponse.new
    http_response = OpenStruct.new body: client_result.to_json

    call_options = {}

    # Create request parameters for a unary method.
    parent = "hello world"
    gateway_id = "hello world"
    device_id = "hello world"

    unbind_device_from_gateway_client_stub = ClientStub.new http_response do |_verb, uri:, body:, params:, options:|
      assert options.metadata.key? :"x-goog-api-client"
      assert options.metadata[:"x-goog-api-client"].include? "rest"
      refute options.metadata[:"x-goog-api-client"].include? "grpc"
    end

    ::Google::Cloud::Iot::V1::DeviceManager::Rest::ServiceStub.stub :transcode_unbind_device_from_gateway_request, ["", "", {}] do
      Gapic::Rest::ClientStub.stub :new, unbind_device_from_gateway_client_stub do
        # Create client
        client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
          config.credentials = :dummy_value
        end

        # Use hash object
        client.unbind_device_from_gateway({ parent: parent, gateway_id: gateway_id, device_id: device_id }) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use named arguments
        client.unbind_device_from_gateway parent: parent, gateway_id: gateway_id, device_id: device_id do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object
        client.unbind_device_from_gateway ::Google::Cloud::Iot::V1::UnbindDeviceFromGatewayRequest.new(parent: parent, gateway_id: gateway_id, device_id: device_id) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use hash object with options
        client.unbind_device_from_gateway({ parent: parent, gateway_id: gateway_id, device_id: device_id }, call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Use protobuf object with options
        client.unbind_device_from_gateway(::Google::Cloud::Iot::V1::UnbindDeviceFromGatewayRequest.new(parent: parent, gateway_id: gateway_id, device_id: device_id), call_options) do |_result, response|
          assert_equal http_response, response.underlying_op
        end

        # Verify method calls
        assert_equal 5, unbind_device_from_gateway_client_stub.call_count
      end
    end
  end

  def test_configure
    credentials_token = :dummy_value

    client = block_config = config = nil
    dummy_stub = ClientStub.new nil
    Gapic::Rest::ClientStub.stub :new, dummy_stub do
      client = ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client.new do |config|
        config.credentials = credentials_token
      end
    end

    config = client.configure do |c|
      block_config = c
    end

    assert_same block_config, config
    assert_kind_of ::Google::Cloud::Iot::V1::DeviceManager::Rest::Client::Configuration, config
  end
end
