# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dataqna/v1alpha/question_service.proto

require 'google/protobuf'

require 'google/api/annotations_pb'
require 'google/api/client_pb'
require 'google/api/field_behavior_pb'
require 'google/api/resource_pb'
require 'google/cloud/dataqna/v1alpha/question_pb'
require 'google/cloud/dataqna/v1alpha/user_feedback_pb'
require 'google/protobuf/field_mask_pb'


descriptor_data = "\n3google/cloud/dataqna/v1alpha/question_service.proto\x12\x1cgoogle.cloud.dataqna.v1alpha\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a+google/cloud/dataqna/v1alpha/question.proto\x1a\x30google/cloud/dataqna/v1alpha/user_feedback.proto\x1a google/protobuf/field_mask.proto\"z\n\x12GetQuestionRequest\x12\x35\n\x04name\x18\x01 \x01(\tB\'\xe0\x41\x02\xfa\x41!\n\x1f\x64\x61taqna.googleapis.com/Question\x12-\n\tread_mask\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.FieldMask\"\x91\x01\n\x15\x43reateQuestionRequest\x12\x39\n\x06parent\x18\x01 \x01(\tB)\xe0\x41\x02\xfa\x41#\n!locations.googleapis.com/Location\x12=\n\x08question\x18\x02 \x01(\x0b\x32&.google.cloud.dataqna.v1alpha.QuestionB\x03\xe0\x41\x02\"N\n\x16\x45xecuteQuestionRequest\x12\x11\n\x04name\x18\x01 \x01(\tB\x03\xe0\x41\x02\x12!\n\x14interpretation_index\x18\x02 \x01(\x05\x42\x03\xe0\x41\x02\"S\n\x16GetUserFeedbackRequest\x12\x39\n\x04name\x18\x01 \x01(\tB+\xe0\x41\x02\xfa\x41%\n#dataqna.googleapis.com/UserFeedback\"\x94\x01\n\x19UpdateUserFeedbackRequest\x12\x46\n\ruser_feedback\x18\x01 \x01(\x0b\x32*.google.cloud.dataqna.v1alpha.UserFeedbackB\x03\xe0\x41\x02\x12/\n\x0bupdate_mask\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.FieldMask2\xec\x08\n\x0fQuestionService\x12\xaa\x01\n\x0bGetQuestion\x12\x30.google.cloud.dataqna.v1alpha.GetQuestionRequest\x1a&.google.cloud.dataqna.v1alpha.Question\"A\x82\xd3\xe4\x93\x02\x34\x12\x32/v1alpha/{name=projects/*/locations/*/questions/*}\xda\x41\x04name\x12\xc5\x01\n\x0e\x43reateQuestion\x12\x33.google.cloud.dataqna.v1alpha.CreateQuestionRequest\x1a&.google.cloud.dataqna.v1alpha.Question\"V\x82\xd3\xe4\x93\x02>\"2/v1alpha/{parent=projects/*/locations/*}/questions:\x08question\xda\x41\x0fparent,question\x12\xd2\x01\n\x0f\x45xecuteQuestion\x12\x34.google.cloud.dataqna.v1alpha.ExecuteQuestionRequest\x1a&.google.cloud.dataqna.v1alpha.Question\"a\x82\xd3\xe4\x93\x02?\":/v1alpha/{name=projects/*/locations/*/questions/*}:execute:\x01*\xda\x41\x19name,interpretation_index\x12\xc3\x01\n\x0fGetUserFeedback\x12\x34.google.cloud.dataqna.v1alpha.GetUserFeedbackRequest\x1a*.google.cloud.dataqna.v1alpha.UserFeedback\"N\x82\xd3\xe4\x93\x02\x41\x12?/v1alpha/{name=projects/*/locations/*/questions/*/userFeedback}\xda\x41\x04name\x12\xfc\x01\n\x12UpdateUserFeedback\x12\x37.google.cloud.dataqna.v1alpha.UpdateUserFeedbackRequest\x1a*.google.cloud.dataqna.v1alpha.UserFeedback\"\x80\x01\x82\xd3\xe4\x93\x02^2M/v1alpha/{user_feedback.name=projects/*/locations/*/questions/*/userFeedback}:\ruser_feedback\xda\x41\x19user_feedback,update_mask\x1aJ\xca\x41\x16\x64\x61taqna.googleapis.com\xd2\x41.https://www.googleapis.com/auth/cloud-platformB\xd6\x01\n com.google.cloud.dataqna.v1alphaB\x14QuestionServiceProtoP\x01Z:cloud.google.com/go/dataqna/apiv1alpha/dataqnapb;dataqnapb\xaa\x02\x1cGoogle.Cloud.DataQnA.V1Alpha\xca\x02\x1cGoogle\\Cloud\\DataQnA\\V1alpha\xea\x02\x1fGoogle::Cloud::DataQnA::V1alphab\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.FieldMask", "google/protobuf/field_mask.proto"],
    ["google.cloud.dataqna.v1alpha.Question", "google/cloud/dataqna/v1alpha/question.proto"],
    ["google.cloud.dataqna.v1alpha.UserFeedback", "google/cloud/dataqna/v1alpha/user_feedback.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Google
  module Cloud
    module DataQnA
      module V1alpha
        GetQuestionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.dataqna.v1alpha.GetQuestionRequest").msgclass
        CreateQuestionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.dataqna.v1alpha.CreateQuestionRequest").msgclass
        ExecuteQuestionRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.dataqna.v1alpha.ExecuteQuestionRequest").msgclass
        GetUserFeedbackRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.dataqna.v1alpha.GetUserFeedbackRequest").msgclass
        UpdateUserFeedbackRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.cloud.dataqna.v1alpha.UpdateUserFeedbackRequest").msgclass
      end
    end
  end
end
