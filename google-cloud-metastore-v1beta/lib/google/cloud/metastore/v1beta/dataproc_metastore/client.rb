# frozen_string_literal: true

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Auto-generated by gapic-generator-ruby. DO NOT EDIT!

require "google/cloud/errors"
require "google/cloud/metastore/v1beta/metastore_pb"

module Google
  module Cloud
    module Metastore
      module V1beta
        module DataprocMetastore
          ##
          # Client for the DataprocMetastore service.
          #
          # Configures and manages metastore services.
          # Metastore services are fully managed, highly available, auto-scaled,
          # auto-healing, OSS-native deployments of technical metadata management
          # software. Each metastore service exposes a network endpoint through which
          # metadata queries are served. Metadata queries can originate from a variety
          # of sources, including Apache Hive, Apache Presto, and Apache Spark.
          #
          # The Dataproc Metastore API defines the following resource model:
          #
          # * The service works with a collection of Google Cloud projects, named:
          # `/projects/*`
          # * Each project has a collection of available locations, named: `/locations/*`
          #   (a location must refer to a Google Cloud `region`)
          # * Each location has a collection of services, named: `/services/*`
          # * Dataproc Metastore services are resources with names of the form:
          #
          #   `/projects/{project_number}/locations/{location_id}/services/{service_id}`.
          #
          class Client
            include Paths

            # @private
            attr_reader :dataproc_metastore_stub

            ##
            # Configure the DataprocMetastore Client class.
            #
            # See {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @example
            #
            #   # Modify the configuration for all DataprocMetastore clients
            #   ::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.configure do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def self.configure
              @configure ||= begin
                namespace = ["Google", "Cloud", "Metastore", "V1beta"]
                parent_config = while namespace.any?
                                  parent_name = namespace.join "::"
                                  parent_const = const_get parent_name
                                  break parent_const.configure if parent_const.respond_to? :configure
                                  namespace.pop
                                end
                default_config = Client::Configuration.new parent_config

                default_config.timeout = 60.0
                default_config.retry_policy = {
                  initial_delay: 1.0, max_delay: 10.0, multiplier: 1.3, retry_codes: [14]
                }

                default_config.rpcs.create_service.timeout = 60.0

                default_config.rpcs.update_service.timeout = 60.0

                default_config.rpcs.delete_service.timeout = 60.0

                default_config.rpcs.create_metadata_import.timeout = 60.0

                default_config.rpcs.update_metadata_import.timeout = 60.0

                default_config.rpcs.export_metadata.timeout = 60.0

                default_config.rpcs.restore_service.timeout = 60.0

                default_config.rpcs.create_backup.timeout = 60.0

                default_config.rpcs.delete_backup.timeout = 60.0

                default_config
              end
              yield @configure if block_given?
              @configure
            end

            ##
            # Configure the DataprocMetastore Client instance.
            #
            # The configuration is set to the derived mode, meaning that values can be changed,
            # but structural changes (adding new fields, etc.) are not allowed. Structural changes
            # should be made on {Client.configure}.
            #
            # See {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client::Configuration}
            # for a description of the configuration fields.
            #
            # @yield [config] Configure the Client client.
            # @yieldparam config [Client::Configuration]
            #
            # @return [Client::Configuration]
            #
            def configure
              yield @config if block_given?
              @config
            end

            ##
            # Create a new DataprocMetastore client object.
            #
            # @example
            #
            #   # Create a client using the default configuration
            #   client = ::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a client using a custom configuration
            #   client = ::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new do |config|
            #     config.timeout = 10.0
            #   end
            #
            # @yield [config] Configure the DataprocMetastore client.
            # @yieldparam config [Client::Configuration]
            #
            def initialize
              # These require statements are intentionally placed here to initialize
              # the gRPC module only when it's required.
              # See https://github.com/googleapis/toolkit/issues/446
              require "gapic/grpc"
              require "google/cloud/metastore/v1beta/metastore_services_pb"

              # Create the configuration object
              @config = Configuration.new Client.configure

              # Yield the configuration if needed
              yield @config if block_given?

              # Create credentials
              credentials = @config.credentials
              # Use self-signed JWT if the endpoint is unchanged from default,
              # but only if the default endpoint does not have a region prefix.
              enable_self_signed_jwt = @config.endpoint == Client.configure.endpoint &&
                                       !@config.endpoint.split(".").first.include?("-")
              credentials ||= Credentials.default scope: @config.scope,
                                                  enable_self_signed_jwt: enable_self_signed_jwt
              if credentials.is_a?(::String) || credentials.is_a?(::Hash)
                credentials = Credentials.new credentials, scope: @config.scope
              end
              @quota_project_id = @config.quota_project
              @quota_project_id ||= credentials.quota_project_id if credentials.respond_to? :quota_project_id

              @operations_client = Operations.new do |config|
                config.credentials = credentials
                config.quota_project = @quota_project_id
                config.endpoint = @config.endpoint
              end

              @dataproc_metastore_stub = ::Gapic::ServiceStub.new(
                ::Google::Cloud::Metastore::V1beta::DataprocMetastore::Stub,
                credentials:  credentials,
                endpoint:     @config.endpoint,
                channel_args: @config.channel_args,
                interceptors: @config.interceptors
              )
            end

            ##
            # Get the associated client for long-running operations.
            #
            # @return [::Google::Cloud::Metastore::V1beta::DataprocMetastore::Operations]
            #
            attr_reader :operations_client

            # Service calls

            ##
            # Lists services in a project and location.
            #
            # @overload list_services(request, options = nil)
            #   Pass arguments to `list_services` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::ListServicesRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::ListServicesRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_services(parent: nil, page_size: nil, page_token: nil, filter: nil, order_by: nil)
            #   Pass arguments to `list_services` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The relative resource name of the location of metastore services
            #     to list, in the following form:
            #
            #     `projects/{project_number}/locations/{location_id}`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of services to return. The response may
            #     contain less than the maximum number. If unspecified, no more than 500
            #     services are returned. The maximum value is 1000; values above 1000 are
            #     changed to 1000.
            #   @param page_token [::String]
            #     Optional. A page token, received from a previous
            #     {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client#list_services DataprocMetastore.ListServices}
            #     call. Provide this token to retrieve the subsequent page.
            #
            #     To retrieve the first page, supply an empty page token.
            #
            #     When paginating, other parameters provided to
            #     {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client#list_services DataprocMetastore.ListServices}
            #     must match the call that provided the page token.
            #   @param filter [::String]
            #     Optional. The filter to apply to list results.
            #   @param order_by [::String]
            #     Optional. Specify the ordering of results as described in [Sorting
            #     Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
            #     If not specified, the results will be sorted in the default order.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Metastore::V1beta::Service>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Metastore::V1beta::Service>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::ListServicesRequest.new
            #
            #   # Call the list_services method.
            #   result = client.list_services request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Metastore::V1beta::Service.
            #     p response
            #   end
            #
            def list_services request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::ListServicesRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_services.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_services.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_services.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :list_services, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @dataproc_metastore_stub, :list_services, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets the details of a single service.
            #
            # @overload get_service(request, options = nil)
            #   Pass arguments to `get_service` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::GetServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::GetServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_service(name: nil)
            #   Pass arguments to `get_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The relative resource name of the metastore service to retrieve,
            #     in the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Metastore::V1beta::Service]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Metastore::V1beta::Service]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::GetServiceRequest.new
            #
            #   # Call the get_service method.
            #   result = client.get_service request
            #
            #   # The returned object is of type Google::Cloud::Metastore::V1beta::Service.
            #   p result
            #
            def get_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::GetServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :get_service, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a metastore service in a project and location.
            #
            # @overload create_service(request, options = nil)
            #   Pass arguments to `create_service` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::CreateServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::CreateServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_service(parent: nil, service_id: nil, service: nil, request_id: nil)
            #   Pass arguments to `create_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The relative resource name of the location in which to create a
            #     metastore service, in the following form:
            #
            #     `projects/{project_number}/locations/{location_id}`.
            #   @param service_id [::String]
            #     Required. The ID of the metastore service, which is used as the final
            #     component of the metastore service's name.
            #
            #     This value must be between 2 and 63 characters long inclusive, begin with a
            #     letter, end with a letter or number, and consist of alpha-numeric
            #     ASCII characters or hyphens.
            #   @param service [::Google::Cloud::Metastore::V1beta::Service, ::Hash]
            #     Required. The Metastore service to create. The `name` field is
            #     ignored. The ID of the created metastore service must be provided in
            #     the request's `service_id` field.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::CreateServiceRequest.new
            #
            #   # Call the create_service method.
            #   result = client.create_service request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def create_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::CreateServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :create_service, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates the parameters of a single service.
            #
            # @overload update_service(request, options = nil)
            #   Pass arguments to `update_service` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::UpdateServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::UpdateServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_service(update_mask: nil, service: nil, request_id: nil)
            #   Pass arguments to `update_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Required. A field mask used to specify the fields to be overwritten in the
            #     metastore service resource by the update.
            #     Fields specified in the `update_mask` are relative to the resource (not
            #     to the full request). A field is overwritten if it is in the mask.
            #   @param service [::Google::Cloud::Metastore::V1beta::Service, ::Hash]
            #     Required. The metastore service to update. The server only merges fields
            #     in the service if they are specified in `update_mask`.
            #
            #     The metastore service's `name` field is used to identify the metastore
            #     service to be updated.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::UpdateServiceRequest.new
            #
            #   # Call the update_service method.
            #   result = client.update_service request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def update_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::UpdateServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.service&.name
                header_params["service.name"] = request.service.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :update_service, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a single service.
            #
            # @overload delete_service(request, options = nil)
            #   Pass arguments to `delete_service` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::DeleteServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::DeleteServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_service(name: nil, request_id: nil)
            #   Pass arguments to `delete_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The relative resource name of the metastore service to delete, in
            #     the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}`.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::DeleteServiceRequest.new
            #
            #   # Call the delete_service method.
            #   result = client.delete_service request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def delete_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::DeleteServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :delete_service, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists imports in a service.
            #
            # @overload list_metadata_imports(request, options = nil)
            #   Pass arguments to `list_metadata_imports` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::ListMetadataImportsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::ListMetadataImportsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_metadata_imports(parent: nil, page_size: nil, page_token: nil, filter: nil, order_by: nil)
            #   Pass arguments to `list_metadata_imports` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The relative resource name of the service whose metadata imports
            #     to list, in the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of imports to return. The response may contain
            #     less than the maximum number. If unspecified, no more than 500 imports are
            #     returned. The maximum value is 1000; values above 1000 are changed to 1000.
            #   @param page_token [::String]
            #     Optional. A page token, received from a previous
            #     {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client#list_services DataprocMetastore.ListServices}
            #     call. Provide this token to retrieve the subsequent page.
            #
            #     To retrieve the first page, supply an empty page token.
            #
            #     When paginating, other parameters provided to
            #     {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client#list_services DataprocMetastore.ListServices}
            #     must match the call that provided the page token.
            #   @param filter [::String]
            #     Optional. The filter to apply to list results.
            #   @param order_by [::String]
            #     Optional. Specify the ordering of results as described in [Sorting
            #     Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
            #     If not specified, the results will be sorted in the default order.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Metastore::V1beta::MetadataImport>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Metastore::V1beta::MetadataImport>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::ListMetadataImportsRequest.new
            #
            #   # Call the list_metadata_imports method.
            #   result = client.list_metadata_imports request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Metastore::V1beta::MetadataImport.
            #     p response
            #   end
            #
            def list_metadata_imports request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::ListMetadataImportsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_metadata_imports.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_metadata_imports.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_metadata_imports.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :list_metadata_imports, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @dataproc_metastore_stub, :list_metadata_imports, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets details of a single import.
            #
            # @overload get_metadata_import(request, options = nil)
            #   Pass arguments to `get_metadata_import` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::GetMetadataImportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::GetMetadataImportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_metadata_import(name: nil)
            #   Pass arguments to `get_metadata_import` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The relative resource name of the metadata import to retrieve, in
            #     the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}/metadataImports/{import_id}`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Metastore::V1beta::MetadataImport]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Metastore::V1beta::MetadataImport]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::GetMetadataImportRequest.new
            #
            #   # Call the get_metadata_import method.
            #   result = client.get_metadata_import request
            #
            #   # The returned object is of type Google::Cloud::Metastore::V1beta::MetadataImport.
            #   p result
            #
            def get_metadata_import request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::GetMetadataImportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_metadata_import.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_metadata_import.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_metadata_import.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :get_metadata_import, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a new MetadataImport in a given project and location.
            #
            # @overload create_metadata_import(request, options = nil)
            #   Pass arguments to `create_metadata_import` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::CreateMetadataImportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::CreateMetadataImportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_metadata_import(parent: nil, metadata_import_id: nil, metadata_import: nil, request_id: nil)
            #   Pass arguments to `create_metadata_import` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The relative resource name of the service in which to create a
            #     metastore import, in the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}`
            #   @param metadata_import_id [::String]
            #     Required. The ID of the metadata import, which is used as the final
            #     component of the metadata import's name.
            #
            #     This value must be between 1 and 64 characters long, begin with a letter,
            #     end with a letter or number, and consist of alpha-numeric ASCII characters
            #     or hyphens.
            #   @param metadata_import [::Google::Cloud::Metastore::V1beta::MetadataImport, ::Hash]
            #     Required. The metadata import to create. The `name` field is ignored. The
            #     ID of the created metadata import must be provided in the request's
            #     `metadata_import_id` field.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::CreateMetadataImportRequest.new
            #
            #   # Call the create_metadata_import method.
            #   result = client.create_metadata_import request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def create_metadata_import request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::CreateMetadataImportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_metadata_import.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_metadata_import.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_metadata_import.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :create_metadata_import, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Updates a single import.
            # Only the description field of MetadataImport is supported to be updated.
            #
            # @overload update_metadata_import(request, options = nil)
            #   Pass arguments to `update_metadata_import` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::UpdateMetadataImportRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::UpdateMetadataImportRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload update_metadata_import(update_mask: nil, metadata_import: nil, request_id: nil)
            #   Pass arguments to `update_metadata_import` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param update_mask [::Google::Protobuf::FieldMask, ::Hash]
            #     Required. A field mask used to specify the fields to be overwritten in the
            #     metadata import resource by the update.
            #     Fields specified in the `update_mask` are relative to the resource (not
            #     to the full request). A field is overwritten if it is in the mask.
            #   @param metadata_import [::Google::Cloud::Metastore::V1beta::MetadataImport, ::Hash]
            #     Required. The metadata import to update. The server only merges fields
            #     in the import if they are specified in `update_mask`.
            #
            #     The metadata import's `name` field is used to identify the metastore
            #     import to be updated.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::UpdateMetadataImportRequest.new
            #
            #   # Call the update_metadata_import method.
            #   result = client.update_metadata_import request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def update_metadata_import request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::UpdateMetadataImportRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.update_metadata_import.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.metadata_import&.name
                header_params["metadata_import.name"] = request.metadata_import.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.update_metadata_import.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.update_metadata_import.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :update_metadata_import, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Exports metadata from a service.
            #
            # @overload export_metadata(request, options = nil)
            #   Pass arguments to `export_metadata` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::ExportMetadataRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::ExportMetadataRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload export_metadata(destination_gcs_folder: nil, service: nil, request_id: nil, database_dump_type: nil)
            #   Pass arguments to `export_metadata` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param destination_gcs_folder [::String]
            #     A Cloud Storage URI of a folder, in the format
            #     `gs://<bucket_name>/<path_inside_bucket>`. A sub-folder
            #     `<export_folder>` containing exported files will be created below it.
            #   @param service [::String]
            #     Required. The relative resource name of the metastore service to run
            #     export, in the following form:
            #
            #     `projects/{project_id}/locations/{location_id}/services/{service_id}`
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #   @param database_dump_type [::Google::Cloud::Metastore::V1beta::DatabaseDumpSpec::Type]
            #     Optional. The type of the database dump. If unspecified, defaults to
            #     `MYSQL`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::ExportMetadataRequest.new
            #
            #   # Call the export_metadata method.
            #   result = client.export_metadata request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def export_metadata request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::ExportMetadataRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.export_metadata.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.service
                header_params["service"] = request.service
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.export_metadata.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.export_metadata.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :export_metadata, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Restores a service from a backup.
            #
            # @overload restore_service(request, options = nil)
            #   Pass arguments to `restore_service` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::RestoreServiceRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::RestoreServiceRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload restore_service(service: nil, backup: nil, restore_type: nil, request_id: nil)
            #   Pass arguments to `restore_service` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param service [::String]
            #     Required. The relative resource name of the metastore service to run
            #     restore, in the following form:
            #
            #     `projects/{project_id}/locations/{location_id}/services/{service_id}`
            #   @param backup [::String]
            #     Required. The relative resource name of the metastore service backup to
            #     restore from, in the following form:
            #
            #     `projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}`
            #   @param restore_type [::Google::Cloud::Metastore::V1beta::Restore::RestoreType]
            #     Optional. The type of restore. If unspecified, defaults to `METADATA_ONLY`.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format).
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::RestoreServiceRequest.new
            #
            #   # Call the restore_service method.
            #   result = client.restore_service request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def restore_service request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::RestoreServiceRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.restore_service.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.service
                header_params["service"] = request.service
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.restore_service.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.restore_service.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :restore_service, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Lists backups in a service.
            #
            # @overload list_backups(request, options = nil)
            #   Pass arguments to `list_backups` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::ListBackupsRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::ListBackupsRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload list_backups(parent: nil, page_size: nil, page_token: nil, filter: nil, order_by: nil)
            #   Pass arguments to `list_backups` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The relative resource name of the service whose backups to
            #     list, in the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}/backups`.
            #   @param page_size [::Integer]
            #     Optional. The maximum number of backups to return. The response may contain
            #     less than the maximum number. If unspecified, no more than 500 backups are
            #     returned. The maximum value is 1000; values above 1000 are changed to 1000.
            #   @param page_token [::String]
            #     Optional. A page token, received from a previous
            #     {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client#list_backups DataprocMetastore.ListBackups}
            #     call. Provide this token to retrieve the subsequent page.
            #
            #     To retrieve the first page, supply an empty page token.
            #
            #     When paginating, other parameters provided to
            #     {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client#list_backups DataprocMetastore.ListBackups}
            #     must match the call that provided the page token.
            #   @param filter [::String]
            #     Optional. The filter to apply to list results.
            #   @param order_by [::String]
            #     Optional. Specify the ordering of results as described in [Sorting
            #     Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
            #     If not specified, the results will be sorted in the default order.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::PagedEnumerable<::Google::Cloud::Metastore::V1beta::Backup>]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::PagedEnumerable<::Google::Cloud::Metastore::V1beta::Backup>]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::ListBackupsRequest.new
            #
            #   # Call the list_backups method.
            #   result = client.list_backups request
            #
            #   # The returned object is of type Gapic::PagedEnumerable. You can
            #   # iterate over all elements by calling #each, and the enumerable
            #   # will lazily make API calls to fetch subsequent pages. Other
            #   # methods are also available for managing paging directly.
            #   result.each do |response|
            #     # Each element is of type ::Google::Cloud::Metastore::V1beta::Backup.
            #     p response
            #   end
            #
            def list_backups request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::ListBackupsRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.list_backups.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.list_backups.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.list_backups.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :list_backups, request, options: options do |response, operation|
                response = ::Gapic::PagedEnumerable.new @dataproc_metastore_stub, :list_backups, request, response, operation, options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Gets details of a single backup.
            #
            # @overload get_backup(request, options = nil)
            #   Pass arguments to `get_backup` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::GetBackupRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::GetBackupRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload get_backup(name: nil)
            #   Pass arguments to `get_backup` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The relative resource name of the backup to retrieve, in the
            #     following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Google::Cloud::Metastore::V1beta::Backup]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Google::Cloud::Metastore::V1beta::Backup]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::GetBackupRequest.new
            #
            #   # Call the get_backup method.
            #   result = client.get_backup request
            #
            #   # The returned object is of type Google::Cloud::Metastore::V1beta::Backup.
            #   p result
            #
            def get_backup request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::GetBackupRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.get_backup.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.get_backup.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.get_backup.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :get_backup, request, options: options do |response, operation|
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Creates a new Backup in a given project and location.
            #
            # @overload create_backup(request, options = nil)
            #   Pass arguments to `create_backup` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::CreateBackupRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::CreateBackupRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload create_backup(parent: nil, backup_id: nil, backup: nil, request_id: nil)
            #   Pass arguments to `create_backup` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param parent [::String]
            #     Required. The relative resource name of the service in which to create a
            #     backup of the following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}`
            #   @param backup_id [::String]
            #     Required. The ID of the backup, which is used as the final component of the
            #     backup's name.
            #
            #     This value must be between 1 and 64 characters long, begin with a letter,
            #     end with a letter or number, and consist of alpha-numeric ASCII characters
            #     or hyphens.
            #   @param backup [::Google::Cloud::Metastore::V1beta::Backup, ::Hash]
            #     Required. The backup to create. The `name` field is ignored. The ID of the
            #     created backup must be provided in the request's `backup_id` field.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::CreateBackupRequest.new
            #
            #   # Call the create_backup method.
            #   result = client.create_backup request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def create_backup request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::CreateBackupRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.create_backup.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.parent
                header_params["parent"] = request.parent
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.create_backup.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.create_backup.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :create_backup, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Deletes a single backup.
            #
            # @overload delete_backup(request, options = nil)
            #   Pass arguments to `delete_backup` via a request object, either of type
            #   {::Google::Cloud::Metastore::V1beta::DeleteBackupRequest} or an equivalent Hash.
            #
            #   @param request [::Google::Cloud::Metastore::V1beta::DeleteBackupRequest, ::Hash]
            #     A request object representing the call parameters. Required. To specify no
            #     parameters, or to keep all the default parameter values, pass an empty Hash.
            #   @param options [::Gapic::CallOptions, ::Hash]
            #     Overrides the default settings for this call, e.g, timeout, retries, etc. Optional.
            #
            # @overload delete_backup(name: nil, request_id: nil)
            #   Pass arguments to `delete_backup` via keyword arguments. Note that at
            #   least one keyword argument is required. To specify no parameters, or to keep all
            #   the default parameter values, pass an empty Hash as a request object (see above).
            #
            #   @param name [::String]
            #     Required. The relative resource name of the backup to delete, in the
            #     following form:
            #
            #     `projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}`.
            #   @param request_id [::String]
            #     Optional. A request ID. Specify a unique request ID to allow the server to
            #     ignore the request if it has completed. The server will ignore subsequent
            #     requests that provide a duplicate request ID for at least 60 minutes after
            #     the first request.
            #
            #     For example, if an initial request times out, followed by another request
            #     with the same request ID, the server ignores the second request to prevent
            #     the creation of duplicate commitments.
            #
            #     The request ID must be a valid
            #     [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Format)
            #     A zero UUID (00000000-0000-0000-0000-000000000000) is not supported.
            #
            # @yield [response, operation] Access the result along with the RPC operation
            # @yieldparam response [::Gapic::Operation]
            # @yieldparam operation [::GRPC::ActiveCall::Operation]
            #
            # @return [::Gapic::Operation]
            #
            # @raise [::Google::Cloud::Error] if the RPC is aborted.
            #
            # @example Basic example
            #   require "google/cloud/metastore/v1beta"
            #
            #   # Create a client object. The client can be reused for multiple calls.
            #   client = Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new
            #
            #   # Create a request. To set request fields, pass in keyword arguments.
            #   request = Google::Cloud::Metastore::V1beta::DeleteBackupRequest.new
            #
            #   # Call the delete_backup method.
            #   result = client.delete_backup request
            #
            #   # The returned object is of type Gapic::Operation. You can use this
            #   # object to check the status of an operation, cancel it, or wait
            #   # for results. Here is how to block until completion:
            #   result.wait_until_done! timeout: 60
            #   if result.response?
            #     p result.response
            #   else
            #     puts "Error!"
            #   end
            #
            def delete_backup request, options = nil
              raise ::ArgumentError, "request must be provided" if request.nil?

              request = ::Gapic::Protobuf.coerce request, to: ::Google::Cloud::Metastore::V1beta::DeleteBackupRequest

              # Converts hash and nil to an options object
              options = ::Gapic::CallOptions.new(**options.to_h) if options.respond_to? :to_h

              # Customize the options with defaults
              metadata = @config.rpcs.delete_backup.metadata.to_h

              # Set x-goog-api-client and x-goog-user-project headers
              metadata[:"x-goog-api-client"] ||= ::Gapic::Headers.x_goog_api_client \
                lib_name: @config.lib_name, lib_version: @config.lib_version,
                gapic_version: ::Google::Cloud::Metastore::V1beta::VERSION
              metadata[:"x-goog-user-project"] = @quota_project_id if @quota_project_id

              header_params = {}
              if request.name
                header_params["name"] = request.name
              end

              request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
              metadata[:"x-goog-request-params"] ||= request_params_header

              options.apply_defaults timeout:      @config.rpcs.delete_backup.timeout,
                                     metadata:     metadata,
                                     retry_policy: @config.rpcs.delete_backup.retry_policy

              options.apply_defaults timeout:      @config.timeout,
                                     metadata:     @config.metadata,
                                     retry_policy: @config.retry_policy

              @dataproc_metastore_stub.call_rpc :delete_backup, request, options: options do |response, operation|
                response = ::Gapic::Operation.new response, @operations_client, options: options
                yield response, operation if block_given?
                return response
              end
            rescue ::GRPC::BadStatus => e
              raise ::Google::Cloud::Error.from_error(e)
            end

            ##
            # Configuration class for the DataprocMetastore API.
            #
            # This class represents the configuration for DataprocMetastore,
            # providing control over timeouts, retry behavior, logging, transport
            # parameters, and other low-level controls. Certain parameters can also be
            # applied individually to specific RPCs. See
            # {::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client::Configuration::Rpcs}
            # for a list of RPCs that can be configured independently.
            #
            # Configuration can be applied globally to all clients, or to a single client
            # on construction.
            #
            # @example
            #
            #   # Modify the global config, setting the timeout for
            #   # list_services to 20 seconds,
            #   # and all remaining timeouts to 10 seconds.
            #   ::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.configure do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_services.timeout = 20.0
            #   end
            #
            #   # Apply the above configuration only to a new client.
            #   client = ::Google::Cloud::Metastore::V1beta::DataprocMetastore::Client.new do |config|
            #     config.timeout = 10.0
            #     config.rpcs.list_services.timeout = 20.0
            #   end
            #
            # @!attribute [rw] endpoint
            #   The hostname or hostname:port of the service endpoint.
            #   Defaults to `"metastore.googleapis.com"`.
            #   @return [::String]
            # @!attribute [rw] credentials
            #   Credentials to send with calls. You may provide any of the following types:
            #    *  (`String`) The path to a service account key file in JSON format
            #    *  (`Hash`) A service account key as a Hash
            #    *  (`Google::Auth::Credentials`) A googleauth credentials object
            #       (see the [googleauth docs](https://googleapis.dev/ruby/googleauth/latest/index.html))
            #    *  (`Signet::OAuth2::Client`) A signet oauth2 client object
            #       (see the [signet docs](https://googleapis.dev/ruby/signet/latest/Signet/OAuth2/Client.html))
            #    *  (`GRPC::Core::Channel`) a gRPC channel with included credentials
            #    *  (`GRPC::Core::ChannelCredentials`) a gRPC credentails object
            #    *  (`nil`) indicating no credentials
            #   @return [::Object]
            # @!attribute [rw] scope
            #   The OAuth scopes
            #   @return [::Array<::String>]
            # @!attribute [rw] lib_name
            #   The library name as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] lib_version
            #   The library version as recorded in instrumentation and logging
            #   @return [::String]
            # @!attribute [rw] channel_args
            #   Extra parameters passed to the gRPC channel. Note: this is ignored if a
            #   `GRPC::Core::Channel` object is provided as the credential.
            #   @return [::Hash]
            # @!attribute [rw] interceptors
            #   An array of interceptors that are run before calls are executed.
            #   @return [::Array<::GRPC::ClientInterceptor>]
            # @!attribute [rw] timeout
            #   The call timeout in seconds.
            #   @return [::Numeric]
            # @!attribute [rw] metadata
            #   Additional gRPC headers to be sent with the call.
            #   @return [::Hash{::Symbol=>::String}]
            # @!attribute [rw] retry_policy
            #   The retry policy. The value is a hash with the following keys:
            #    *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
            #    *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
            #    *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
            #    *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
            #       trigger a retry.
            #   @return [::Hash]
            # @!attribute [rw] quota_project
            #   A separate project against which to charge quota.
            #   @return [::String]
            #
            class Configuration
              extend ::Gapic::Config

              config_attr :endpoint,      "metastore.googleapis.com", ::String
              config_attr :credentials,   nil do |value|
                allowed = [::String, ::Hash, ::Proc, ::Symbol, ::Google::Auth::Credentials, ::Signet::OAuth2::Client, nil]
                allowed += [::GRPC::Core::Channel, ::GRPC::Core::ChannelCredentials] if defined? ::GRPC
                allowed.any? { |klass| klass === value }
              end
              config_attr :scope,         nil, ::String, ::Array, nil
              config_attr :lib_name,      nil, ::String, nil
              config_attr :lib_version,   nil, ::String, nil
              config_attr(:channel_args,  { "grpc.service_config_disable_resolution" => 1 }, ::Hash, nil)
              config_attr :interceptors,  nil, ::Array, nil
              config_attr :timeout,       nil, ::Numeric, nil
              config_attr :metadata,      nil, ::Hash, nil
              config_attr :retry_policy,  nil, ::Hash, ::Proc, nil
              config_attr :quota_project, nil, ::String, nil

              # @private
              def initialize parent_config = nil
                @parent_config = parent_config unless parent_config.nil?

                yield self if block_given?
              end

              ##
              # Configurations for individual RPCs
              # @return [Rpcs]
              #
              def rpcs
                @rpcs ||= begin
                  parent_rpcs = nil
                  parent_rpcs = @parent_config.rpcs if defined?(@parent_config) && @parent_config.respond_to?(:rpcs)
                  Rpcs.new parent_rpcs
                end
              end

              ##
              # Configuration RPC class for the DataprocMetastore API.
              #
              # Includes fields providing the configuration for each RPC in this service.
              # Each configuration object is of type `Gapic::Config::Method` and includes
              # the following configuration fields:
              #
              #  *  `timeout` (*type:* `Numeric`) - The call timeout in seconds
              #  *  `metadata` (*type:* `Hash{Symbol=>String}`) - Additional gRPC headers
              #  *  `retry_policy (*type:* `Hash`) - The retry policy. The policy fields
              #     include the following keys:
              #      *  `:initial_delay` (*type:* `Numeric`) - The initial delay in seconds.
              #      *  `:max_delay` (*type:* `Numeric`) - The max delay in seconds.
              #      *  `:multiplier` (*type:* `Numeric`) - The incremental backoff multiplier.
              #      *  `:retry_codes` (*type:* `Array<String>`) - The error codes that should
              #         trigger a retry.
              #
              class Rpcs
                ##
                # RPC-specific configuration for `list_services`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_services
                ##
                # RPC-specific configuration for `get_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_service
                ##
                # RPC-specific configuration for `create_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_service
                ##
                # RPC-specific configuration for `update_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_service
                ##
                # RPC-specific configuration for `delete_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_service
                ##
                # RPC-specific configuration for `list_metadata_imports`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_metadata_imports
                ##
                # RPC-specific configuration for `get_metadata_import`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_metadata_import
                ##
                # RPC-specific configuration for `create_metadata_import`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_metadata_import
                ##
                # RPC-specific configuration for `update_metadata_import`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :update_metadata_import
                ##
                # RPC-specific configuration for `export_metadata`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :export_metadata
                ##
                # RPC-specific configuration for `restore_service`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :restore_service
                ##
                # RPC-specific configuration for `list_backups`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :list_backups
                ##
                # RPC-specific configuration for `get_backup`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :get_backup
                ##
                # RPC-specific configuration for `create_backup`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :create_backup
                ##
                # RPC-specific configuration for `delete_backup`
                # @return [::Gapic::Config::Method]
                #
                attr_reader :delete_backup

                # @private
                def initialize parent_rpcs = nil
                  list_services_config = parent_rpcs.list_services if parent_rpcs.respond_to? :list_services
                  @list_services = ::Gapic::Config::Method.new list_services_config
                  get_service_config = parent_rpcs.get_service if parent_rpcs.respond_to? :get_service
                  @get_service = ::Gapic::Config::Method.new get_service_config
                  create_service_config = parent_rpcs.create_service if parent_rpcs.respond_to? :create_service
                  @create_service = ::Gapic::Config::Method.new create_service_config
                  update_service_config = parent_rpcs.update_service if parent_rpcs.respond_to? :update_service
                  @update_service = ::Gapic::Config::Method.new update_service_config
                  delete_service_config = parent_rpcs.delete_service if parent_rpcs.respond_to? :delete_service
                  @delete_service = ::Gapic::Config::Method.new delete_service_config
                  list_metadata_imports_config = parent_rpcs.list_metadata_imports if parent_rpcs.respond_to? :list_metadata_imports
                  @list_metadata_imports = ::Gapic::Config::Method.new list_metadata_imports_config
                  get_metadata_import_config = parent_rpcs.get_metadata_import if parent_rpcs.respond_to? :get_metadata_import
                  @get_metadata_import = ::Gapic::Config::Method.new get_metadata_import_config
                  create_metadata_import_config = parent_rpcs.create_metadata_import if parent_rpcs.respond_to? :create_metadata_import
                  @create_metadata_import = ::Gapic::Config::Method.new create_metadata_import_config
                  update_metadata_import_config = parent_rpcs.update_metadata_import if parent_rpcs.respond_to? :update_metadata_import
                  @update_metadata_import = ::Gapic::Config::Method.new update_metadata_import_config
                  export_metadata_config = parent_rpcs.export_metadata if parent_rpcs.respond_to? :export_metadata
                  @export_metadata = ::Gapic::Config::Method.new export_metadata_config
                  restore_service_config = parent_rpcs.restore_service if parent_rpcs.respond_to? :restore_service
                  @restore_service = ::Gapic::Config::Method.new restore_service_config
                  list_backups_config = parent_rpcs.list_backups if parent_rpcs.respond_to? :list_backups
                  @list_backups = ::Gapic::Config::Method.new list_backups_config
                  get_backup_config = parent_rpcs.get_backup if parent_rpcs.respond_to? :get_backup
                  @get_backup = ::Gapic::Config::Method.new get_backup_config
                  create_backup_config = parent_rpcs.create_backup if parent_rpcs.respond_to? :create_backup
                  @create_backup = ::Gapic::Config::Method.new create_backup_config
                  delete_backup_config = parent_rpcs.delete_backup if parent_rpcs.respond_to? :delete_backup
                  @delete_backup = ::Gapic::Config::Method.new delete_backup_config

                  yield self if block_given?
                end
              end
            end
          end
        end
      end
    end
  end
end
